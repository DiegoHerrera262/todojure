{"version":3,"sources":["app/client.cljs"],"mappings":";AASA,GAAA,QAAAA,gCAAAC,uCAAAC;AAAA;AAAA,AAAA,AAASC,iBAAI,AAACC;;AAEd,AAAA,GAAA,QAAAJ,gCAAAC,uCAAAI;AAAA;AAAA,AAAA,kBAAA,0BAAAC,5CAAO+B;AAAP,AAAA,IAAA9B,wBAAA,AAAA,wFAAA,CAAAC,oFAAAA,qGAAAA,nBAAO6B,iFAAAA;IAAP5B,aAAA,AAAAC,6CAAAJ,wBAAO+B;IAAP1B,sBAAA,AAAAC,4CAAAH,WAAA,IAAA;IAAAI,uBAAA,AAAAD,4CAAAH,WAAA,IAAA;AAAA,AAAA,QAAAF,sDAAAA,oDAAAI,oBAAAE,wBAAAN,gCAAAI,oBAAAE;;;;AAAA,AAAAC,yEAAA,2CAAA,kEAAA,KAAA,wEAAA,wEAAA,0DAAA,5UAAOuB,6WAAMC,MAAKC;AAAlB,AAAA,OAAAxB,uDAAA,NAAauB;AAAb,AAAA,IAAAtB,kCAAAC;IAAAC,oCAAAC;IAAAC,qCAAAC;IAAAC,qCAAAC;IAAAC,kCAAA,iBAAAC,mBAAAR;AAAA,AAAA,oBAAAQ;AAAAA;;AAAA,IAAAC,WAAaY;IAAbX,WAAA,mFAAA,QAAA;AAAA,AAAA,QAAAC,4EAAAA,0EAAAF,SAAAC,YAAAC,sDAAAF,SAAAC;;;IAAAE,oCAAA,CAAA,iBAAAJ,mBAAAN;AAAA,AAAA,oBAAAM;AAAAA;;AAAA,IAAAK,WAAaQ;IAAbP,WAAA,mFAAA,QAAA;AAAA,AAAA,QAAAH,4EAAAA,0EAAAE,SAAAC,YAAAH,sDAAAE,SAAAC;;OAAA;IAAAC,qCAAA,AAAAC,uEAAA,iBAAAR,mBAAAR;AAAA,AAAA,oBAAAQ;AAAAA;;AAAA,IAAAS,WAAaI;IAAbH,WAAA,mFAAA,QAAA;AAAA,AAAA,QAAAP,4EAAAA,0EAAAM,SAAAC,YAAAP,sDAAAM,SAAAC;;;IAAAC,qCAAaE;AAAb,AAAA,CAAArB,oDAAAO;;AAAA,CAAAL,sDAAAU;;AAAA,CAAAR,uDAAAW;;AAAA,CAAAT,uDAAAa;;AAAA,IAAA,AAAA,AAAA,AAEE,OAACI,kIACC,AAAAC,sDAAA,CAAA,KAAA,KAAA,aACA,iBAAAC,WAAA,2CAAA,sEAAgCE;AAAhC,AAAA,kJAAAF,4DAAAA,tMAACC,sEAAAA,gFAAAA;;UAJL,AAAA,CAAApB,uDAAAD;;AAAA,CAAAD,uDAAAD;;AAAA,CAAAD,sDAAAD;;AAAA,CAAAD,oDAAAD;;;AAOA;;;kBAAA,lBAAe6B;AAAf,AAGE,4GAAA,5GAACC,6EAAW3C,eAAIkC;;AAChB,mBAAA,ZAACU;;;AAEH;;;qBAAA,rBAAeC;AAAf,AAIE,4GAAA,5GAACF,6EAAW3C,eAAIkC;;AAEhB,AAACY,8FAA8B9C;;AAC/B,mBAAA,ZAAC4C","names":["js/app","js/app.client","js/app.client.app","app.client/app","com.fulcrologic.fulcro.application.fulcro_app","js/app.client.Root","js-props__43763__auto__","render__43764__auto__","com.fulcrologic.fulcro.components/component-options","vec__69004","com.fulcrologic.fulcro.components/use-fulcro","this__43765__auto__","cljs.core.nth","props__43766__auto__","com.fulcrologic.fulcro.components/add-hook-options!","com.fulcrologic.fulcro.components/wrapped-render","*app*-orig-val__69007","com.fulcrologic.fulcro.components/*app*","*depth*-orig-val__69008","com.fulcrologic.fulcro.components/*depth*","*shared*-orig-val__69009","com.fulcrologic.fulcro.components/*shared*","*parent*-orig-val__69010","com.fulcrologic.fulcro.components/*parent*","*app*-temp-val__69011","or__5045__auto__","G__69015","G__69016","com.fulcrologic.fulcro.components/isoget-in","*depth*-temp-val__69012","G__69017","G__69018","*shared*-temp-val__69013","com.fulcrologic.fulcro.components.shared","G__69019","G__69020","*parent*-temp-val__69014","app.client/Root","this","props","com.fulcrologic.fulcro.components.fragment","com.fulcrologic.fulcro.dom/macro-create-element*","G__69021","app.components.todo-list/ui-todo-list","test.mockups.todo-list/test-todo-list","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_","js/console.log","app.client/refresh","com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_"],"sourcesContent":["(ns app.client\n  (:require\n    [app.components.todo-list :refer [ui-todo-list]]\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc, fragment]]\n    [com.fulcrologic.fulcro.dom :refer [h1]]\n    [test.mockups.todo-list :refer [test-todo-list]]\n    ))\n\n(defonce app (app/fulcro-app))\n\n(defsc Root [this props]\n  {:use-hooks? true}\n  (fragment\n    (h1 \"Todojure\")\n    (ui-todo-list {:todo-list/items test-todo-list}))\n  )\n\n(defn ^:export init\n  \"Shadow-cljs sets this up to be our entry-point function. See shadow-cljs.edn `:init-fn` in the modules of the main build.\"\n  []\n  (app/mount! app Root \"app\")\n  (js/console.log \"Loaded\"))\n\n(defn ^:export refresh\n  \"During development, shadow-cljs will call this on every hot reload of source. See shadow-cljs.edn\"\n  []\n  ;; re-mounting will cause forced UI refresh, update internals, etc.\n  (app/mount! app Root \"app\")\n  ;; As of Fulcro 3.3.0, this addition will help with stale queries when using dynamic routing:\n  (comp/refresh-dynamic-queries! app)\n  (js/console.log \"Hot reload\"))"]}