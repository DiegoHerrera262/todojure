["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517)], null);\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64042){\nreturn cljs.core.vector_QMARK_(G__64042);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.vector_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null))], null);\n\nvar parallel_QMARK_ = (function (p__64045){\nvar map__64046 = p__64045;\nvar map__64046__$1 = cljs.core.__destructure_map(map__64046);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64046__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__64044 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__64044__$1 = cljs.core.__destructure_map(map__64044);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64044__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64044__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),cljs.core.fn_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__64052_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__64052_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__64062_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__64062_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null);\n\nvar vec__64068 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64068,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64068,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__64071 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,id){\nvar vec__64080 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__64081 = cljs.core.seq(vec__64080);\nvar first__64082 = cljs.core.first(seq__64081);\nvar seq__64081__$1 = cljs.core.next(seq__64081);\nvar map__64083 = first__64082;\nvar map__64083__$1 = cljs.core.__destructure_map(map__64083);\nvar n = map__64083__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64083__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__64081__$1;\nvar cluster = vec__64080;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__64071__$1 = cljs.core.__destructure_map(map__64071);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64071__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64071__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__64121){\nvar map__64125 = p__64121;\nvar map__64125__$1 = cljs.core.__destructure_map(map__64125);\nvar ast = map__64125__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64125__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64125__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64125__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64126){\nreturn cljs.core.coll_QMARK_(G__64126);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796))], null),null)], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__64137){\nreturn cljs.core.map_QMARK_(G__64137);\n}),(function (G__64137){\nreturn cljs.core.contains_QMARK_(G__64137,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\n})], null),(function (G__64137){\nreturn ((cljs.core.map_QMARK_(G__64137)) && (cljs.core.contains_QMARK_(G__64137,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421))));\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)))], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null)]))], null);\n\nvar vec__64189 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64189,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64189,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__64192 = cljs.core.split_with((function (p1__64128_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__64128_SHARP_));\n}),send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64192,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64192,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__64197){\nvar map__64198 = p__64197;\nvar map__64198__$1 = cljs.core.__destructure_map(map__64198);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64198__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(ast);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n}),cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),(function (p__64200){\nvar map__64201 = p__64200;\nvar map__64201__$1 = cljs.core.__destructure_map(map__64201);\nvar combined_result = map__64201__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64201__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__64202 = cljs.core.seq(to_send);\nvar chunk__64203 = null;\nvar count__64204 = (0);\nvar i__64205 = (0);\nwhile(true){\nif((i__64205 < count__64204)){\nvar map__64212 = chunk__64203.cljs$core$IIndexed$_nth$arity$2(null,i__64205);\nvar map__64212__$1 = cljs.core.__destructure_map(map__64212);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64212__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__65175 = seq__64202;\nvar G__65176 = chunk__64203;\nvar G__65177 = count__64204;\nvar G__65178 = (i__64205 + (1));\nseq__64202 = G__65175;\nchunk__64203 = G__65176;\ncount__64204 = G__65177;\ni__64205 = G__65178;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__64202);\nif(temp__5753__auto__){\nvar seq__64202__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__64202__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__64202__$1);\nvar G__65179 = cljs.core.chunk_rest(seq__64202__$1);\nvar G__65180 = c__5568__auto__;\nvar G__65181 = cljs.core.count(c__5568__auto__);\nvar G__65182 = (0);\nseq__64202 = G__65179;\nchunk__64203 = G__65180;\ncount__64204 = G__65181;\ni__64205 = G__65182;\ncontinue;\n} else {\nvar map__64222 = cljs.core.first(seq__64202__$1);\nvar map__64222__$1 = cljs.core.__destructure_map(map__64222);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64222__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__65183 = cljs.core.next(seq__64202__$1);\nvar G__65184 = null;\nvar G__65185 = (0);\nvar G__65186 = (0);\nseq__64202 = G__65183;\nchunk__64203 = G__65184;\ncount__64204 = G__65185;\ni__64205 = G__65186;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),(function (p__64224){\nvar map__64225 = p__64224;\nvar map__64225__$1 = cljs.core.__destructure_map(map__64225);\nvar combined_result = map__64225__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64225__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__64226_65187 = cljs.core.seq(to_send);\nvar chunk__64227_65188 = null;\nvar count__64228_65189 = (0);\nvar i__64229_65190 = (0);\nwhile(true){\nif((i__64229_65190 < count__64228_65189)){\nvar map__64244_65191 = chunk__64227_65188.cljs$core$IIndexed$_nth$arity$2(null,i__64229_65190);\nvar map__64244_65192__$1 = cljs.core.__destructure_map(map__64244_65191);\nvar ast_65193__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64244_65192__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_65194 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64244_65192__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_65195 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_65193__$1)):body);\nvar result_65196 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_65195);\nif(cljs.core.truth_((function (){var and__5043__auto__ = (function (){var or__5045__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntry{var map__64253_65197 = result_65196;\nvar map__64253_65198__$1 = cljs.core.__destructure_map(map__64253_65197);\nvar status_code_65199 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64253_65198__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_65200__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64253_65198__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_65199)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_65200__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_65199));\n}\n}catch (e64252){var e_65201 = e64252;\n}} else {\n}\n\n(result_handler_65194.cljs$core$IFn$_invoke$arity$1 ? result_handler_65194.cljs$core$IFn$_invoke$arity$1(result_65196) : result_handler_65194.call(null,result_65196));\n\n\nvar G__65202 = seq__64226_65187;\nvar G__65203 = chunk__64227_65188;\nvar G__65204 = count__64228_65189;\nvar G__65205 = (i__64229_65190 + (1));\nseq__64226_65187 = G__65202;\nchunk__64227_65188 = G__65203;\ncount__64228_65189 = G__65204;\ni__64229_65190 = G__65205;\ncontinue;\n} else {\nvar temp__5753__auto___65206 = cljs.core.seq(seq__64226_65187);\nif(temp__5753__auto___65206){\nvar seq__64226_65207__$1 = temp__5753__auto___65206;\nif(cljs.core.chunked_seq_QMARK_(seq__64226_65207__$1)){\nvar c__5568__auto___65208 = cljs.core.chunk_first(seq__64226_65207__$1);\nvar G__65209 = cljs.core.chunk_rest(seq__64226_65207__$1);\nvar G__65210 = c__5568__auto___65208;\nvar G__65211 = cljs.core.count(c__5568__auto___65208);\nvar G__65212 = (0);\nseq__64226_65187 = G__65209;\nchunk__64227_65188 = G__65210;\ncount__64228_65189 = G__65211;\ni__64229_65190 = G__65212;\ncontinue;\n} else {\nvar map__64256_65213 = cljs.core.first(seq__64226_65207__$1);\nvar map__64256_65214__$1 = cljs.core.__destructure_map(map__64256_65213);\nvar ast_65215__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64256_65214__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_65216 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64256_65214__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_65218 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_65215__$1)):body);\nvar result_65219 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_65218);\nif(cljs.core.truth_((function (){var and__5043__auto__ = (function (){var or__5045__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntry{var map__64261_65223 = result_65219;\nvar map__64261_65224__$1 = cljs.core.__destructure_map(map__64261_65223);\nvar status_code_65225 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64261_65224__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_65226__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64261_65224__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_65225)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_65226__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_65225));\n}\n}catch (e64260){var e_65227 = e64260;\n}} else {\n}\n\n(result_handler_65216.cljs$core$IFn$_invoke$arity$1 ? result_handler_65216.cljs$core$IFn$_invoke$arity$1(result_65219) : result_handler_65216.call(null,result_65219));\n\n\nvar G__65228 = cljs.core.next(seq__64226_65207__$1);\nvar G__65229 = null;\nvar G__65230 = (0);\nvar G__65231 = (0);\nseq__64226_65187 = G__65228;\nchunk__64227_65188 = G__65229;\ncount__64228_65189 = G__65230;\ni__64229_65190 = G__65231;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar b2__29641__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\nif(cljs.core.truth_(b2__29641__auto__)){\nvar remote = b2__29641__auto__;\nvar b2__29641__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__29641__auto____$1)){\nvar transmit_BANG_ = b2__29641__auto____$1;\ntry{if(cljs.core.truth_((function (){var and__5043__auto__ = (function (){var or__5045__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntry{var tx_65237 = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),tx_65237);\n}catch (e64286){var e_65240 = e64286;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node) : transmit_BANG_.call(null,remote,send_node));\n}catch (e64274){var e = e64274;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception for tx:\",com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node)),\"See https://book.fulcrologic.com/#err-txp-send-exc\"], null);\n}),null)),null,2015492046,null);\n\ntry{if(cljs.core.truth_((function (){var and__5043__auto__ = (function (){var or__5045__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),\"Transmit Exception\");\n}catch (e64276){var e_65241__$1 = e64276;\n}} else {\n}\n\nvar G__64279 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__64278 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__64278.cljs$core$IFn$_invoke$arity$1 ? fexpr__64278.cljs$core$IFn$_invoke$arity$1(G__64279) : fexpr__64278.call(null,G__64279));\n}catch (e64275){var e__$1 = e64275;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n}),null)),null,-1597725424,null);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name,\"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\"], null);\n}),null)),null,-1534521332,null);\n\nvar G__64293 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__64292 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__64292.cljs$core$IFn$_invoke$arity$1 ? fexpr__64292.cljs$core$IFn$_invoke$arity$1(G__64293) : fexpr__64292.call(null,G__64293));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name,\"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\"], null);\n}),null)),null,349239801,null);\n\nvar G__64295 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__64294 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__64294.cljs$core$IFn$_invoke$arity$1 ? fexpr__64294.cljs$core$IFn$_invoke$arity$1(G__64295) : fexpr__64294.call(null,G__64295));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__64297){\nvar map__64298 = p__64297;\nvar map__64298__$1 = cljs.core.__destructure_map(map__64298);\nvar app__$1 = map__64298__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64298__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807)], null);\n\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__64301 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64301,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64301,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__64304_65247 = cljs.core.seq(p);\nvar chunk__64305_65248 = null;\nvar count__64306_65249 = (0);\nvar i__64307_65250 = (0);\nwhile(true){\nif((i__64307_65250 < count__64306_65249)){\nvar item_65251 = chunk__64305_65248.cljs$core$IIndexed$_nth$arity$2(null,i__64307_65250);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__64304_65247,chunk__64305_65248,count__64306_65249,i__64307_65250,item_65251,send_queue,vec__64301,p,serial,front,send_queues,remote_names,operations,map__64298,map__64298__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_65251,remote);\n});})(seq__64304_65247,chunk__64305_65248,count__64306_65249,i__64307_65250,item_65251,send_queue,vec__64301,p,serial,front,send_queues,remote_names,operations,map__64298,map__64298__$1,app__$1,runtime_atom))\n);\n\n\nvar G__65252 = seq__64304_65247;\nvar G__65253 = chunk__64305_65248;\nvar G__65254 = count__64306_65249;\nvar G__65255 = (i__64307_65250 + (1));\nseq__64304_65247 = G__65252;\nchunk__64305_65248 = G__65253;\ncount__64306_65249 = G__65254;\ni__64307_65250 = G__65255;\ncontinue;\n} else {\nvar temp__5753__auto___65256 = cljs.core.seq(seq__64304_65247);\nif(temp__5753__auto___65256){\nvar seq__64304_65257__$1 = temp__5753__auto___65256;\nif(cljs.core.chunked_seq_QMARK_(seq__64304_65257__$1)){\nvar c__5568__auto___65258 = cljs.core.chunk_first(seq__64304_65257__$1);\nvar G__65259 = cljs.core.chunk_rest(seq__64304_65257__$1);\nvar G__65260 = c__5568__auto___65258;\nvar G__65261 = cljs.core.count(c__5568__auto___65258);\nvar G__65262 = (0);\nseq__64304_65247 = G__65259;\nchunk__64305_65248 = G__65260;\ncount__64306_65249 = G__65261;\ni__64307_65250 = G__65262;\ncontinue;\n} else {\nvar item_65263 = cljs.core.first(seq__64304_65257__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__64304_65247,chunk__64305_65248,count__64306_65249,i__64307_65250,item_65263,seq__64304_65257__$1,temp__5753__auto___65256,send_queue,vec__64301,p,serial,front,send_queues,remote_names,operations,map__64298,map__64298__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_65263,remote);\n});})(seq__64304_65247,chunk__64305_65248,count__64306_65249,i__64307_65250,item_65263,seq__64304_65257__$1,temp__5753__auto___65256,send_queue,vec__64301,p,serial,front,send_queues,remote_names,operations,map__64298,map__64298__$1,app__$1,runtime_atom))\n);\n\n\nvar G__65264 = cljs.core.next(seq__64304_65257__$1);\nvar G__65265 = null;\nvar G__65266 = (0);\nvar G__65267 = (0);\nseq__64304_65247 = G__65264;\nchunk__64305_65248 = G__65265;\ncount__64306_65249 = G__65266;\ni__64307_65250 = G__65267;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__64317 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\nvar map__64317__$1 = cljs.core.__destructure_map(map__64317);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64317__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64317__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,(function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\n}));\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nvar seq__64318_65268 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__64319_65269 = null;\nvar count__64320_65270 = (0);\nvar i__64321_65271 = (0);\nwhile(true){\nif((i__64321_65271 < count__64320_65270)){\nvar op_65272 = chunk__64319_65269.cljs$core$IIndexed$_nth$arity$2(null,i__64321_65271);\n(op_65272.cljs$core$IFn$_invoke$arity$0 ? op_65272.cljs$core$IFn$_invoke$arity$0() : op_65272.call(null));\n\n\nvar G__65273 = seq__64318_65268;\nvar G__65274 = chunk__64319_65269;\nvar G__65275 = count__64320_65270;\nvar G__65276 = (i__64321_65271 + (1));\nseq__64318_65268 = G__65273;\nchunk__64319_65269 = G__65274;\ncount__64320_65270 = G__65275;\ni__64321_65271 = G__65276;\ncontinue;\n} else {\nvar temp__5753__auto___65277 = cljs.core.seq(seq__64318_65268);\nif(temp__5753__auto___65277){\nvar seq__64318_65278__$1 = temp__5753__auto___65277;\nif(cljs.core.chunked_seq_QMARK_(seq__64318_65278__$1)){\nvar c__5568__auto___65279 = cljs.core.chunk_first(seq__64318_65278__$1);\nvar G__65280 = cljs.core.chunk_rest(seq__64318_65278__$1);\nvar G__65281 = c__5568__auto___65279;\nvar G__65282 = cljs.core.count(c__5568__auto___65279);\nvar G__65283 = (0);\nseq__64318_65268 = G__65280;\nchunk__64319_65269 = G__65281;\ncount__64320_65270 = G__65282;\ni__64321_65271 = G__65283;\ncontinue;\n} else {\nvar op_65284 = cljs.core.first(seq__64318_65278__$1);\n(op_65284.cljs$core$IFn$_invoke$arity$0 ? op_65284.cljs$core$IFn$_invoke$arity$0() : op_65284.call(null));\n\n\nvar G__65286 = cljs.core.next(seq__64318_65278__$1);\nvar G__65287 = null;\nvar G__65288 = (0);\nvar G__65289 = (0);\nseq__64318_65268 = G__65286;\nchunk__64319_65269 = G__65287;\ncount__64320_65270 = G__65288;\ni__64321_65271 = G__65289;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn new_send_queues;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__64325 = arguments.length;\nswitch (G__64325) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n})),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n}))),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__64334 = arguments.length;\nswitch (G__64334) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__64337,addl){\nvar map__64338 = p__64337;\nvar map__64338__$1 = cljs.core.__destructure_map(map__64338);\nvar tx_node = map__64338__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64338__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nvar map__64341 = options;\nvar map__64341__$1 = cljs.core.__destructure_map(map__64341);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64341__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64341__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__64342 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\nvar G__64342__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64342,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__64342);\nvar G__64342__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64342__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__64342__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64342__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__64342__$2;\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__64349){\nvar map__64351 = p__64349;\nvar map__64351__$1 = cljs.core.__destructure_map(map__64351);\nvar tx_node = map__64351__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64351__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3);\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e64369){var e = e64369;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,247,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch for mutation\",(function (){var G__64382 = env__$1;\nvar G__64382__$1 = (((G__64382 == null))?null:new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(G__64382));\nif((G__64382__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(G__64382__$1);\n}\n})(),\"failed with an exception. No dispatch generated. See https://book.fulcrologic.com/#err-txp-mut-dispatch-exc\"], null);\n}),null)),null,-704564494,null);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__64400){\nvar map__64402 = p__64400;\nvar map__64402__$1 = cljs.core.__destructure_map(map__64402);\nvar ele = map__64402__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64402__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__64408 = original_ast_node;\nvar map__64408__$1 = cljs.core.__destructure_map(map__64408);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64408__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__64416 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64416,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__64416;\n}\n});\nvar dispatch_all = (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$application_rendered_BANG_(p__64428,options){\nvar map__64430 = p__64428;\nvar map__64430__$1 = cljs.core.__destructure_map(map__64430);\nvar app__$1 = map__64430__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64430__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nif(cljs.core.truth_(cljs.core.some((function (p1__64427_SHARP_){\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(p1__64427_SHARP_)));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0)) : com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.call(null,app__$1,(0)));\n} else {\nreturn null;\n}\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__64459){\nvar map__64460 = p__64459;\nvar map__64460__$1 = cljs.core.__destructure_map(map__64460);\nvar app__$1 = map__64460__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64460__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__64465 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar map__64465__$1 = cljs.core.__destructure_map(map__64465);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64465__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64465__$1,false);\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__64446_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__64446_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__64446_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),(function (p1__64452_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__64452_SHARP_,dispatched_nodes);\n})),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.vec(blocked));\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__64491 = arguments.length;\nswitch (G__64491) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__64514 = arguments.length;\nswitch (G__64514) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__64521 = arguments.length;\nswitch (G__64521) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__64541){\nvar map__64546 = p__64541;\nvar map__64546__$1 = cljs.core.__destructure_map(map__64546);\nvar node = map__64546__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64546__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64546__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__64547,element){\nvar map__64548 = p__64547;\nvar map__64548__$1 = cljs.core.__destructure_map(map__64548);\nvar acc = map__64548__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64548__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64548__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__64549 = element;\nvar map__64549__$1 = cljs.core.__destructure_map(map__64549);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64549__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64549__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64549__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64549__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__64550 = dispatch;\nvar map__64550__$1 = cljs.core.__destructure_map(map__64550);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64550__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__5043__auto__ = action;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not((function (){var or__5045__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})());\n} else {\nreturn and__5043__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__5043__auto__ = (function (){var or__5045__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__5043__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e64565){var e_65316 = e64565;\nvar mutation_symbol_65317 = new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,340,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65316,\"The `action` section of mutation\",mutation_symbol_65317,\"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-action-exc\"], null);\n}),null)),null,-1886737991,null);\n}\nif(cljs.core.truth_((function (){var and__5043__auto__ = (function (){var or__5045__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntry{var tx_65318 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_65318], null));\n}catch (e64589){var e_65320 = e64589;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__64593){\nvar map__64594 = p__64593;\nvar map__64594__$1 = cljs.core.__destructure_map(map__64594);\nvar node = map__64594__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64594__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64594__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_elements,element){\nvar map__64602 = element;\nvar map__64602__$1 = cljs.core.__destructure_map(map__64602);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64602__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64602__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64602__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64602__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__64603 = dispatch;\nvar map__64603__$1 = cljs.core.__destructure_map(map__64603);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64603__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__5043__auto__ = action;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024))));\n} else {\nreturn and__5043__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e64617){var e_65326 = e64617;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,373,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65326,\"The `action` section threw an exception for mutation: \",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-mut-action-exc2\"], null);\n}),null)),null,2074083144,null);\n}\nif(cljs.core.truth_((function (){var and__5043__auto__ = (function (){var or__5045__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntry{var tx_65330 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_65330], null));\n}catch (e64635){var e_65332 = e64635;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}),cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__64657){\nvar map__64662 = p__64657;\nvar map__64662__$1 = cljs.core.__destructure_map(map__64662);\nvar tx_node = map__64662__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64662__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nvar element_complete_QMARK_ = (function (p__64666){\nvar map__64667 = p__64666;\nvar map__64667__$1 = cljs.core.__destructure_map(map__64667);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64667__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64667__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__64691,remote,txn_id,ele_idx){\nvar map__64697 = p__64691;\nvar map__64697__$1 = cljs.core.__destructure_map(map__64697);\nvar app__$1 = map__64697__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64697__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__64699 = cljs.core.deref(runtime_atom);\nvar map__64699__$1 = cljs.core.__destructure_map(map__64699);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64699__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar old_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue = cljs.core.filterv((function (p__64708){\nvar map__64709 = p__64708;\nvar map__64709__$1 = cljs.core.__destructure_map(map__64709);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64709__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64709__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__64754 = arguments.length;\nswitch (G__64754) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__64772,txn_id,ele_idx,remote,result,result_key){\nvar map__64778 = p__64772;\nvar map__64778__$1 = cljs.core.__destructure_map(map__64778);\nvar app__$1 = map__64778__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64778__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__64784){\nvar map__64785 = p__64784;\nvar map__64785__$1 = cljs.core.__destructure_map(map__64785);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64785__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,421,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-txp-res-lacks-valid-node\"], null);\n}),null)),null,-1865026894,null);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nnew cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$compute_desired_ast_node(app__$1,remote,tx_node,tx_element){\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nvar map__64839 = tx_element;\nvar map__64839__$1 = cljs.core.__destructure_map(map__64839);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64839__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64839__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64839__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar desired_ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,442,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire,\"See https://book.fulcrologic.com/#err-txp-remote-dispatch-invalid-res\"], null);\n}),null)),null,-845333209,null);\n\nreturn remote_desire;\n})()\n\n))));\nvar query_transform = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar ast = (cljs.core.truth_((function (){var and__5043__auto__ = desired_ast;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn query_transform;\n} else {\nreturn and__5043__auto__;\n}\n})())?(query_transform.cljs$core$IFn$_invoke$arity$1 ? query_transform.cljs$core$IFn$_invoke$arity$1(desired_ast) : query_transform.call(null,desired_ast)):desired_ast);\nvar G__64868 = tx_element;\nvar G__64868__$1 = (cljs.core.truth_(desired_ast)?cljs.core.assoc_in(G__64868,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425),remote], null),desired_ast):G__64868);\nif(cljs.core.truth_(ast)){\nreturn cljs.core.assoc_in(G__64868__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null),ast);\n} else {\nreturn G__64868__$1;\n}\n});\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__64869,p__64870,ele_idx,remote){\nvar map__64871 = p__64869;\nvar map__64871__$1 = cljs.core.__destructure_map(map__64871);\nvar app__$1 = map__64871__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64871__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__64872 = p__64870;\nvar map__64872__$1 = cljs.core.__destructure_map(map__64872);\nvar tx_node = map__64872__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64872__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64872__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),null)], null);\n\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__64877){\nvar map__64878 = p__64877;\nvar map__64878__$1 = cljs.core.__destructure_map(map__64878);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64878__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64878__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64878__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__64886){\nvar map__64887 = p__64886;\nvar map__64887__$1 = cljs.core.__destructure_map(map__64887);\nvar tx_node = map__64887__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64887__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn cljs.core.every_QMARK_((function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__64888){\nvar map__64889 = p__64888;\nvar map__64889__$1 = cljs.core.__destructure_map(map__64889);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64889__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64889__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n}),elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__64890){\nvar map__64891 = p__64890;\nvar map__64891__$1 = cljs.core.__destructure_map(map__64891);\nvar element = map__64891__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64891__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64891__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),null)], null);\n\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__64894){\nvar map__64895 = p__64894;\nvar map__64895__$1 = cljs.core.__destructure_map(map__64895);\nvar tx_node = map__64895__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64895__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__64899){\nvar map__64900 = p__64899;\nvar map__64900__$1 = cljs.core.__destructure_map(map__64900);\nvar tx_node = map__64900__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64900__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64900__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n}),tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__64903,remote){\nvar map__64904 = p__64903;\nvar map__64904__$1 = cljs.core.__destructure_map(map__64904);\nvar tx_element = map__64904__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64904__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64904__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64904__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64904__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64904__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nvar result_65390 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_65391 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_65391)){\nvar env_65392 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_65390], null));\ntry{(handler_65391.cljs$core$IFn$_invoke$arity$1 ? handler_65391.cljs$core$IFn$_invoke$arity$1(env_65392) : handler_65391.call(null,env_65392));\n}catch (e64911){var e_65393 = e64911;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,574,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65393,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-res-action-exc\"], null);\n}),null)),null,1102145651,null);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__64916){\nvar map__64918 = p__64916;\nvar map__64918__$1 = cljs.core.__destructure_map(map__64918);\nvar tx_element = map__64918__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64918__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64918__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__64920){\nvar map__64921 = p__64920;\nvar map__64921__$1 = cljs.core.__destructure_map(map__64921);\nvar tx_node = map__64921__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64921__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\n}),elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__64923){\nvar map__64924 = p__64923;\nvar map__64924__$1 = cljs.core.__destructure_map(map__64924);\nvar tx_node = map__64924__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64924__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar get_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,p__64928){\nvar map__64931 = p__64928;\nvar map__64931__$1 = cljs.core.__destructure_map(map__64931);\nvar element = map__64931__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64931__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64931__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64931__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64931__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar seq__64932_65404 = cljs.core.seq(progress);\nvar chunk__64933_65405 = null;\nvar count__64934_65406 = (0);\nvar i__64935_65407 = (0);\nwhile(true){\nif((i__64935_65407 < count__64934_65406)){\nvar vec__64945_65408 = chunk__64933_65405.cljs$core$IIndexed$_nth$arity$2(null,i__64935_65407);\nvar remote_65410 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64945_65408,(0),null);\nvar value_65411 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64945_65408,(1),null);\nvar env_65413 = get_env(remote_65410,value_65411);\nvar action_65414 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_65414)){\ntry{(action_65414.cljs$core$IFn$_invoke$arity$1 ? action_65414.cljs$core$IFn$_invoke$arity$1(env_65413) : action_65414.call(null,env_65413));\n}catch (e64948){var e_65415 = e64948;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64932_65404,chunk__64933_65405,count__64934_65406,i__64935_65407,e_65415,env_65413,action_65414,vec__64945_65408,remote_65410,value_65411,map__64931,map__64931__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64924,map__64924__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65415,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"], null);\n});})(seq__64932_65404,chunk__64933_65405,count__64934_65406,i__64935_65407,e_65415,env_65413,action_65414,vec__64945_65408,remote_65410,value_65411,map__64931,map__64931__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64924,map__64924__$1,tx_node,elements))\n,null)),null,832881590,null);\n}} else {\n}\n\n\nvar G__65420 = seq__64932_65404;\nvar G__65421 = chunk__64933_65405;\nvar G__65422 = count__64934_65406;\nvar G__65423 = (i__64935_65407 + (1));\nseq__64932_65404 = G__65420;\nchunk__64933_65405 = G__65421;\ncount__64934_65406 = G__65422;\ni__64935_65407 = G__65423;\ncontinue;\n} else {\nvar temp__5753__auto___65424 = cljs.core.seq(seq__64932_65404);\nif(temp__5753__auto___65424){\nvar seq__64932_65425__$1 = temp__5753__auto___65424;\nif(cljs.core.chunked_seq_QMARK_(seq__64932_65425__$1)){\nvar c__5568__auto___65426 = cljs.core.chunk_first(seq__64932_65425__$1);\nvar G__65427 = cljs.core.chunk_rest(seq__64932_65425__$1);\nvar G__65428 = c__5568__auto___65426;\nvar G__65429 = cljs.core.count(c__5568__auto___65426);\nvar G__65430 = (0);\nseq__64932_65404 = G__65427;\nchunk__64933_65405 = G__65428;\ncount__64934_65406 = G__65429;\ni__64935_65407 = G__65430;\ncontinue;\n} else {\nvar vec__64951_65431 = cljs.core.first(seq__64932_65425__$1);\nvar remote_65432 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64951_65431,(0),null);\nvar value_65433 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64951_65431,(1),null);\nvar env_65438 = get_env(remote_65432,value_65433);\nvar action_65439 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_65439)){\ntry{(action_65439.cljs$core$IFn$_invoke$arity$1 ? action_65439.cljs$core$IFn$_invoke$arity$1(env_65438) : action_65439.call(null,env_65438));\n}catch (e64954){var e_65444 = e64954;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64932_65404,chunk__64933_65405,count__64934_65406,i__64935_65407,e_65444,env_65438,action_65439,vec__64951_65431,remote_65432,value_65433,seq__64932_65425__$1,temp__5753__auto___65424,map__64931,map__64931__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64924,map__64924__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65444,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"], null);\n});})(seq__64932_65404,chunk__64933_65405,count__64934_65406,i__64935_65407,e_65444,env_65438,action_65439,vec__64951_65431,remote_65432,value_65433,seq__64932_65425__$1,temp__5753__auto___65424,map__64931,map__64931__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64924,map__64924__$1,tx_node,elements))\n,null)),null,1730491777,null);\n}} else {\n}\n\n\nvar G__65446 = cljs.core.next(seq__64932_65425__$1);\nvar G__65447 = null;\nvar G__65448 = (0);\nvar G__65449 = (0);\nseq__64932_65404 = G__65446;\nchunk__64933_65405 = G__65447;\ncount__64934_65406 = G__65448;\ni__64935_65407 = G__65449;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__64956){\nvar map__64957 = p__64956;\nvar map__64957__$1 = cljs.core.__destructure_map(map__64957);\nvar tx_node = map__64957__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64957__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),null)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__64958 = tx_node;\nvar G__64958__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__64958):G__64958);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__64958__$1);\n} else {\nreturn G__64958__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64971){\nreturn cljs.core.coll_QMARK_(G__64971);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.set_QMARK_], null);\n\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,element){\nvar map__64992 = element;\nvar map__64992__$1 = cljs.core.__destructure_map(map__64992);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64992__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n}),outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__65021,remotes){\nvar map__65022 = p__65021;\nvar map__65022__$1 = cljs.core.__destructure_map(map__65022);\nvar tx_node = map__65022__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65022__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nvar active_on_element = (function (p__65023){\nvar map__65024 = p__65023;\nvar map__65024__$1 = cljs.core.__destructure_map(map__65024);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65024__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65024__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n}),cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__65038){\nvar map__65039 = p__65038;\nvar map__65039__$1 = cljs.core.__destructure_map(map__65039);\nvar app__$1 = map__65039__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65039__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65039__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\n\nreturn null;\n});\n/**\n * Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n * have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n * are allowed to).\n * \n * NOTE: any *remote* behaviors of `tx` will *still be async*.\n * \n * This function:\n * \n * * Runs the optimistic side of the mutation(s)\n * * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n *   but with the optimistic part already done.\n * * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n * \n * If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n * component so it can refresh immediately and avoid DOM input issues.\n * \n * Returns the new component props or the final state map if no component was used in the transaction.\n * \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$transact_sync_BANG_(app__$1,tx,p__65042){\nvar map__65043 = p__65042;\nvar map__65043__$1 = cljs.core.__destructure_map(map__65043);\nvar options = map__65043__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65043__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65043__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar mutation_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(tx));\nvar ast_node__GT_operation = cljs.core.zipmap(mutation_nodes,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (ast_node){\nreturn com.fulcrologic.fulcro.mutations.mutate.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),ast_node], null));\n}),mutation_nodes));\nvar map__65044 = cljs.core.group_by((function (p1__65041_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),null], null), null),cljs.core.set(cljs.core.keys((ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1 ? ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1(p1__65041_SHARP_) : ast_node__GT_operation.call(null,p1__65041_SHARP_)))));\n}),mutation_nodes);\nvar map__65044__$1 = cljs.core.__destructure_map(map__65044);\nvar optimistic = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65044__$1,true);\nvar mixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65044__$1,false);\nvar optimistic_tx_node = ((cljs.core.seq(optimistic))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),optimistic], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar mixed_tx_node = ((cljs.core.seq(mixed))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),mixed], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar resulting_node_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nif(cljs.core.truth_(optimistic_tx_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,optimistic_tx_node);\n} else {\n}\n\nif(cljs.core.truth_(mixed_tx_node)){\nvar node_65468 = com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,mixed_tx_node);\nvar runtime_atom_65469 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.reset_BANG_(resulting_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node_65468));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom_65469,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([node_65468], 0));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(20));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__5043__auto__ = component;\nif(cljs.core.truth_(and__5043__auto__)){\nvar and__5043__auto____$1 = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component));\nif(cljs.core.truth_(and__5043__auto____$1)){\nreturn com.fulcrologic.fulcro.components.has_ident_QMARK_(component);\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nif(cljs.core.truth_(ref)){\nvar r_BANG__65472 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\nif(cljs.core.truth_(r_BANG__65472)){\n(r_BANG__65472.cljs$core$IFn$_invoke$arity$1 ? r_BANG__65472.cljs$core$IFn$_invoke$arity$1(app__$1) : r_BANG__65472.call(null,app__$1));\n} else {\n}\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,744,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen. See https://book.fulcrologic.com/#warn-tx-missing-ident\"], null);\n}),null)),null,1308521797,null);\n} else {\n}\n\n}\n}\n\nreturn cljs.core.deref(resulting_node_id);\n});\n/**\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n *   that might be used by the transaction processing (or UI refresh).\n * \n *   Some that may be supported (depending on application settings):\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n *         force a normal refresh via `app/render!`.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n *   algorithm will influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$default_tx_BANG_(var_args){\nvar G__65051 = arguments.length;\nswitch (G__65051) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__65052,tx,p__65053){\nvar map__65054 = p__65052;\nvar map__65054__$1 = cljs.core.__destructure_map(map__65054);\nvar app__$1 = map__65054__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65054__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__65055 = p__65053;\nvar map__65055__$1 = cljs.core.__destructure_map(map__65055);\nvar options = map__65055__$1;\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65055__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nif(cljs.core.truth_(synchronous_QMARK_)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_(app__$1,tx,options);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1);\n\nvar map__65056 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\nvar map__65056__$1 = cljs.core.__destructure_map(map__65056);\nvar options__$1 = map__65056__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65056__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65056__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65056__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__65048_SHARP_){\nreturn (((p1__65048_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__65048_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__65059 = cljs.core.set(refresh);\nvar G__65059__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__65059,follow_on_reads):G__65059);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__65059__$1,ref);\n} else {\nreturn G__65059__$1;\n}\n})();\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__65062 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (v,n){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(v),n);\n}),node);\nvar G__65062__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__65062,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__65062);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__65062__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__65062__$1;\n}\n}));\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Abort any elements in the given send-queue that have the given abort id.\n * \n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n *   virtual result will still be sent for that node.\n * \n *   Returns a new send-queue that no longer contains the aborted nodes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_elements_BANG_(p__65066,send_queue,abort_id){\nvar map__65067 = p__65066;\nvar map__65067__$1 = cljs.core.__destructure_map(map__65067);\nvar remote = map__65067__$1;\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65067__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(abort_BANG_)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__65069){\nvar map__65071 = p__65069;\nvar map__65071__$1 = cljs.core.__destructure_map(map__65071);\nvar send_node = map__65071__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65071__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65071__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65071__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar aid = (function (){var or__5045__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\n} else {\nif(cljs.core.truth_(active_QMARK_)){\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\n\nreturn result;\n} else {\nvar G__65073_65486 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__65073_65486) : result_handler.call(null,G__65073_65486));\n\nreturn result;\n\n}\n}\n}),cljs.core.PersistentVector.EMPTY,send_queue);\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,822,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support! See https://book.fulcrologic.com/#err-txp-cant-abort\"], null);\n}),null)),null,-1379678249,null);\n\nreturn send_queue;\n}\n});\n/**\n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_BANG_(app__$1,abort_id){\nvar map__65078 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__65078__$1 = cljs.core.__destructure_map(map__65078);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65078__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar runtime_state = cljs.core.deref(runtime_atom);\nvar map__65079 = runtime_state;\nvar map__65079__$1 = cljs.core.__destructure_map(map__65079);\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65079__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65079__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar remote_names = cljs.core.keys(send_queues);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,remote_name){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n});\n/**\n * Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n *   items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n *   that is in the send queue of the given remote.\n * \n *   This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_remote_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_remote_BANG_(app_ish,remote){\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\nvar map__65083 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__65083__$1 = cljs.core.__destructure_map(map__65083);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__65084 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),remote], null));\nvar map__65084__$1 = cljs.core.__destructure_map(map__65084);\nvar the_remote = map__65084__$1;\nvar abort_network_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65084__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nvar old_send_queue = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.PersistentVector.EMPTY);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.disj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([remote], 0));\n\nvar seq__65085 = cljs.core.seq(old_send_queue);\nvar chunk__65090 = null;\nvar count__65091 = (0);\nvar i__65092 = (0);\nwhile(true){\nif((i__65092 < count__65091)){\nvar map__65124 = chunk__65090.cljs$core$IIndexed$_nth$arity$2(null,i__65092);\nvar map__65124__$1 = cljs.core.__destructure_map(map__65124);\nvar send_node = map__65124__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65124__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65124__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65124__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__65093_65496 = cljs.core.seq((function (){var or__5045__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__65094_65497 = null;\nvar count__65095_65498 = (0);\nvar i__65096_65499 = (0);\nwhile(true){\nif((i__65096_65499 < count__65095_65498)){\nvar aid_65500 = chunk__65094_65497.cljs$core$IIndexed$_nth$arity$2(null,i__65096_65499);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65500) : abort_network_BANG_.call(null,the_remote,aid_65500));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,aid_65500,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,aid_65500,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1066922626,null);\n}\n} else {\n}\n\nvar G__65130_65503 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__65130_65503) : result_handler.call(null,G__65130_65503));\n}catch (e65129){var e_65508 = e65129;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,e_65508,aid_65500,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65508,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,e_65508,aid_65500,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,7497409,null);\n}\n\nvar G__65510 = seq__65093_65496;\nvar G__65511 = chunk__65094_65497;\nvar G__65512 = count__65095_65498;\nvar G__65513 = (i__65096_65499 + (1));\nseq__65093_65496 = G__65510;\nchunk__65094_65497 = G__65511;\ncount__65095_65498 = G__65512;\ni__65096_65499 = G__65513;\ncontinue;\n} else {\nvar temp__5753__auto___65514 = cljs.core.seq(seq__65093_65496);\nif(temp__5753__auto___65514){\nvar seq__65093_65515__$1 = temp__5753__auto___65514;\nif(cljs.core.chunked_seq_QMARK_(seq__65093_65515__$1)){\nvar c__5568__auto___65516 = cljs.core.chunk_first(seq__65093_65515__$1);\nvar G__65517 = cljs.core.chunk_rest(seq__65093_65515__$1);\nvar G__65518 = c__5568__auto___65516;\nvar G__65519 = cljs.core.count(c__5568__auto___65516);\nvar G__65520 = (0);\nseq__65093_65496 = G__65517;\nchunk__65094_65497 = G__65518;\ncount__65095_65498 = G__65519;\ni__65096_65499 = G__65520;\ncontinue;\n} else {\nvar aid_65521 = cljs.core.first(seq__65093_65515__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65521) : abort_network_BANG_.call(null,the_remote,aid_65521));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,aid_65521,seq__65093_65515__$1,temp__5753__auto___65514,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,aid_65521,seq__65093_65515__$1,temp__5753__auto___65514,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1115676006,null);\n}\n} else {\n}\n\nvar G__65132_65523 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__65132_65523) : result_handler.call(null,G__65132_65523));\n}catch (e65131){var e_65524 = e65131;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,e_65524,aid_65521,seq__65093_65515__$1,temp__5753__auto___65514,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65524,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__65093_65496,chunk__65094_65497,count__65095_65498,i__65096_65499,seq__65085,chunk__65090,count__65091,i__65092,e_65524,aid_65521,seq__65093_65515__$1,temp__5753__auto___65514,map__65124,map__65124__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1395581306,null);\n}\n\nvar G__65527 = cljs.core.next(seq__65093_65515__$1);\nvar G__65528 = null;\nvar G__65529 = (0);\nvar G__65530 = (0);\nseq__65093_65496 = G__65527;\nchunk__65094_65497 = G__65528;\ncount__65095_65498 = G__65529;\ni__65096_65499 = G__65530;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__65531 = seq__65085;\nvar G__65532 = chunk__65090;\nvar G__65533 = count__65091;\nvar G__65534 = (i__65092 + (1));\nseq__65085 = G__65531;\nchunk__65090 = G__65532;\ncount__65091 = G__65533;\ni__65092 = G__65534;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__65085);\nif(temp__5753__auto__){\nvar seq__65085__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__65085__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__65085__$1);\nvar G__65536 = cljs.core.chunk_rest(seq__65085__$1);\nvar G__65537 = c__5568__auto__;\nvar G__65538 = cljs.core.count(c__5568__auto__);\nvar G__65539 = (0);\nseq__65085 = G__65536;\nchunk__65090 = G__65537;\ncount__65091 = G__65538;\ni__65092 = G__65539;\ncontinue;\n} else {\nvar map__65133 = cljs.core.first(seq__65085__$1);\nvar map__65133__$1 = cljs.core.__destructure_map(map__65133);\nvar send_node = map__65133__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65133__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65133__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65133__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__65086_65541 = cljs.core.seq((function (){var or__5045__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__65087_65542 = null;\nvar count__65088_65543 = (0);\nvar i__65089_65544 = (0);\nwhile(true){\nif((i__65089_65544 < count__65088_65543)){\nvar aid_65546 = chunk__65087_65542.cljs$core$IIndexed$_nth$arity$2(null,i__65089_65544);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65546) : abort_network_BANG_.call(null,the_remote,aid_65546));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,aid_65546,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,aid_65546,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-577387757,null);\n}\n} else {\n}\n\nvar G__65139_65548 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__65139_65548) : result_handler.call(null,G__65139_65548));\n}catch (e65138){var e_65549 = e65138;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,e_65549,aid_65546,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65549,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,e_65549,aid_65546,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1799007160,null);\n}\n\nvar G__65552 = seq__65086_65541;\nvar G__65553 = chunk__65087_65542;\nvar G__65554 = count__65088_65543;\nvar G__65555 = (i__65089_65544 + (1));\nseq__65086_65541 = G__65552;\nchunk__65087_65542 = G__65553;\ncount__65088_65543 = G__65554;\ni__65089_65544 = G__65555;\ncontinue;\n} else {\nvar temp__5753__auto___65556__$1 = cljs.core.seq(seq__65086_65541);\nif(temp__5753__auto___65556__$1){\nvar seq__65086_65557__$1 = temp__5753__auto___65556__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__65086_65557__$1)){\nvar c__5568__auto___65558 = cljs.core.chunk_first(seq__65086_65557__$1);\nvar G__65559 = cljs.core.chunk_rest(seq__65086_65557__$1);\nvar G__65560 = c__5568__auto___65558;\nvar G__65561 = cljs.core.count(c__5568__auto___65558);\nvar G__65562 = (0);\nseq__65086_65541 = G__65559;\nchunk__65087_65542 = G__65560;\ncount__65088_65543 = G__65561;\ni__65089_65544 = G__65562;\ncontinue;\n} else {\nvar aid_65563 = cljs.core.first(seq__65086_65557__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65563) : abort_network_BANG_.call(null,the_remote,aid_65563));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,aid_65563,seq__65086_65557__$1,temp__5753__auto___65556__$1,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,aid_65563,seq__65086_65557__$1,temp__5753__auto___65556__$1,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,668005262,null);\n}\n} else {\n}\n\nvar G__65141_65565 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__65141_65565) : result_handler.call(null,G__65141_65565));\n}catch (e65140){var e_65567 = e65140;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,e_65567,aid_65563,seq__65086_65557__$1,temp__5753__auto___65556__$1,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65567,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__65086_65541,chunk__65087_65542,count__65088_65543,i__65089_65544,seq__65085,chunk__65090,count__65091,i__65092,e_65567,aid_65563,seq__65086_65557__$1,temp__5753__auto___65556__$1,map__65133,map__65133__$1,send_node,active_QMARK_,options,result_handler,seq__65085__$1,temp__5753__auto__,app__$1,map__65083,map__65083__$1,state_atom,runtime_atom,map__65084,map__65084__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1572447052,null);\n}\n\nvar G__65569 = cljs.core.next(seq__65086_65557__$1);\nvar G__65570 = null;\nvar G__65571 = (0);\nvar G__65572 = (0);\nseq__65086_65541 = G__65569;\nchunk__65087_65542 = G__65570;\ncount__65088_65543 = G__65571;\ni__65089_65544 = G__65572;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__65573 = cljs.core.next(seq__65085__$1);\nvar G__65574 = null;\nvar G__65575 = (0);\nvar G__65576 = (0);\nseq__65085 = G__65573;\nchunk__65090 = G__65574;\ncount__65091 = G__65575;\ni__65092 = G__65576;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^G","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^X","^?","^@","^J","^J","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^X","~$com.fulcrologic.fulcro.algorithms.denormalize","^12","~$cljs.core","^13","^G","^G","~$goog","^14","~$com.fulcrologic.fulcro.specs","^15","~$inspect","^G","^W","^W","~$com.fulcrologic.fulcro.algorithms.tempid","^17","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^19","~$sched","^19","~$enc","~$taoensso.encore","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1<","^1<","^@","^@","~$fdn","^12","~$tempid","^17","^1>","^1>"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$schedule!","^19","^F","^G","^H","^G","^I","^J","~$=>","^J","~$|","^J"],"~:require-macros",["^ ","^?","^@","^J","^J","^Y","^Z","^[","^10","^13","^13","^G","^G","^16","^G","~$m","^18","^1;","^1<","^18","^18","~$s","^@","^10","^10","^Z","^Z","^1<","^1<","^@","^@"],"~:form",["~#list",["~$ns","^N","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ",["^1H",["^1B",["^W","~:as","^V"],["^?","^1J","~$s"],["^U","^1J","^T"],["^17","^1J","^1@"],["^12","^1J","^1?"],["^1>","^1J","^1="],["^19","^1J","^1:","~:refer",["^1D"]],["^18","^1J","~$m"],["^10","^1J","^["],["^15"],["^G","^1J","^16","^1K",["^F","^H"]],"^15",["^J","^1K",["^I","^1E","~$|"]],["^X","^1J","^11"],["^1<","^1J","^1;"],["^Z","^1J","^Y"]]]]],"~:flags",["^ ","^1B",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]],"^Q","^N","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1689300183400,"^O",["^ ","^T","^U","^V","^W","^X","^X","^?","^@","^J","^J","^Y","^Z","^[","^10","^11","^X","^12","^12","^13","^13","^G","^G","^14","^14","^15","^15","^16","^G","^W","^W","^17","^17","~$m","^18","^19","^19","^1:","^19","^1;","^1<","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","^1=","^1>","^1<","^1<","^@","^@","^1?","^12","^1@","^17","^1>","^1>"],"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. \"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [com.fulcrologic.guardrails.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (futil/ast->query ast)]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (if (map? body)\n                                                                 (select-keys body (top-keys ast))\n                                                                 body)\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app combined-node-id (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote    (get (app->remotes app) remote-name)\n               transmit! (get remote :transmit!)]\n    (try\n      (inspect/ilet [tx (futil/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception for tx:\" (futil/ast->query (::ast send-node)) \"See https://book.fulcrologic.com/#err-txp-send-exc\")\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name \"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\")\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        operations      (atom [])\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (swap! operations conj #(net-send! app item remote)))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (swap! operations conj #(net-send! app send-node remote)))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, the queue updates of those handlers would be overwritten by our swap on the\n    ;; prior line\n    (doseq [op @operations]\n      (op))\n    new-send-queues))\n\n(defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch for mutation\" (some-> env :ast futil/ast->query) \"failed with an exception. No dispatch generated. See https://book.fulcrologic.com/#err-txp-mut-dispatch-exc\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(defn application-rendered!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app} options]\n  (when (some #(boolean (-> % ::options :after-render?)) (-> runtime-atom deref ::submission-queue))\n    (swap! runtime-atom update ::submission-queue\n      (fn [queue] (mapv (fn [node] (update node ::options dissoc :after-render?)) queue)))\n    (schedule-activation! app 0)))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::options) (::submission-queue @runtime-atom))\n        dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) ready)]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue (vec blocked)))))\n    (process-queue! app)))\n\n(defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 0)))\n\n(defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 0)))\n\n(defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-id-before (inspect/current-history-id app)\n                                 state           (:com.fulcrologic.fulcro.application/state-atom app)\n                                 state-before    @state\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (let [mutation-symbol (:dispatch-key original-ast-node)]\n                                     (log/error e \"The `action` section of mutation\" mutation-symbol \"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-action-exc\"))))\n                               (ilet [tx (eql/ast->expr original-ast-node true)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                               :state-id-before state-id-before\n                                                                               :db-before       state-before\n                                                                               :db-after        @state\n                                                                               :tx              tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?           (and action (not (complete? :action)))\n                               state-id-before (inspect/current-history-id app)\n                               state           (:com.fulcrologic.fulcro.application/state-atom app)\n                               state-before    @state\n                               updated-node    (if exec? (-> element\n                                                           (assoc ::state-before-action state-before)\n                                                           (update ::complete? conj :action)) element)\n                               new-acc         (conj new-elements updated-node)\n                               env             (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"The `action` section threw an exception for mutation: \" (:dispatch-key original-ast-node) \"See https://book.fulcrologic.com/#err-txp-mut-action-exc2\")))\n                             (ilet [tx (eql/ast->expr original-ast-node true)]\n                               (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                             :state-id-before state-id-before\n                                                                             :db-before       state-before\n                                                                             :db-after        @state\n                                                                             :tx              tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        old-queue (get send-queues remote)\n        queue     (filterv (fn [{:keys [::id ::idx]}]\n                             (not (and (= txn-id id) (= ele-idx idx)))) old-queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-txp-res-lacks-valid-node\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(defn compute-desired-ast-node\n  \"Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\"\n  [app remote tx-node tx-element]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::tx-node ::tx-element => ::tx-element]\n  (let [{::keys [dispatch original-ast-node state-before-action]} tx-element\n        env             (build-env app tx-node {:ast                 original-ast-node\n                                                :state-before-action state-before-action})\n        remote-fn       (get dispatch remote)\n        remote-desire   (when remote-fn (remote-fn env))\n        desired-ast     (cond\n                          (or (false? remote-desire) (nil? remote-desire)) nil\n                          (true? remote-desire) original-ast-node\n                          (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                          (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                          :else (do\n                                  (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire \"See https://book.fulcrologic.com/#err-txp-remote-dispatch-invalid-res\")\n                                  remote-desire))\n        ;; The EQL transform from fulcro app config ONLY affects the network layer (the AST we put on the send node).\n        ;; The response gets dispatched on network return, but the original query\n        ;; is needed at the top app layer so that :pre-merge can use the complete query\n        ;; as opposed to the pruned one.\n        query-transform (ah/app-algorithm app :global-eql-transform)\n        ast             (if (and desired-ast query-transform)\n                          (query-transform desired-ast)\n                          desired-ast)]\n    (cond-> tx-element\n      desired-ast (assoc-in [::desired-ast-nodes remote] desired-ast)\n      ast (assoc-in [::transmitted-ast-nodes remote] ast))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name\n   => (s/nilable ::send-node)]\n  (let [update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        ast            (get-in tx-node [::elements ele-idx ::transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 200 :body {}})\n        nil))))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::elements idx] (fn [tx-element] (compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::elements idx ::started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch        dispatch\n                                        :transacted-ast  original-ast-node\n                                        :mutation-ast    (get desired-ast-nodes remote)\n                                        :transmitted-ast (get transmitted-ast-nodes remote)\n                                        :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-res-action-exc\"))))))\n  (update tx-element ::complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {::keys [idx progress dispatch original-ast-node] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception in mutation\" (:dispatch-key original-ast-node) \"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n\n(defn transact-sync!\n  \"Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   \"\n  [app tx {:keys [component ref] :as options}]\n  (let [mutation-nodes      (:children (eql/query->ast tx))\n        ast-node->operation (zipmap mutation-nodes (map (fn [ast-node] (m/mutate {:ast ast-node})) mutation-nodes))\n        {optimistic true\n         mixed      false} (group-by #(= #{:action :result-action} (-> (ast-node->operation %) keys set)) mutation-nodes)\n        optimistic-tx-node  (when (seq optimistic)\n                              (let [node (tx-node (eql/ast->query {:type :root :children optimistic}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        mixed-tx-node       (when (seq mixed)\n                              (let [node (tx-node (eql/ast->query {:type :root :children mixed}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        resulting-node-id   (atom nil)]\n    (when optimistic-tx-node (run-actions! app optimistic-tx-node))\n    (when mixed-tx-node\n      (let [node         (run-actions! app mixed-tx-node)\n            runtime-atom (:com.fulcrologic.fulcro.application/runtime-atom app)]\n        (reset! resulting-node-id (::id node))\n        (swap! runtime-atom update ::active-queue conj node)\n        (schedule-queue-processing! app 20)))\n    (cond\n      (and component (comp/component? component) (comp/has-ident? component)) (comp/refresh-component! component)\n      ref (let [r! (ah/app-algorithm app :render!)] (when r! (r! app)))\n      :else (when #?(:cljs js/goog.DEBUG :clj true)\n              (log/warn \"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen. See https://book.fulcrologic.com/#warn-tx-missing-ident\")))\n    @resulting-node-id))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [:com.fulcrologic.fulcro.application/app ::tx => ::id]\n   (default-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx {:keys [synchronous?] :as options}]\n   [:com.fulcrologic.fulcro.application/app ::tx ::options => ::id]\n   (if synchronous?\n     (transact-sync! app tx options)\n     (do\n       (schedule-activation! app)\n       (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n             follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n             node            (tx-node tx options)\n             accumulate      (fn [r items] (into (set r) items))\n             refresh         (cond-> (set refresh)\n                               (seq follow-on-reads) (into follow-on-reads)\n                               ref (conj ref))]\n         (swap! runtime-atom (fn [s] (cond-> (update s ::submission-queue (fn [v n] (conj (vec v) n)) node)\n                                       ;; refresh sets are cumulative because rendering is debounced\n                                       (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                       (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n         (::id node))))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (result-handler {:status-text \"Cancelled\" ::aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support! See https://book.fulcrologic.com/#err-txp-cant-abort\")\n      send-queue)))\n\n(defn abort!\n  \"Implementation of abort when using this tx processing\"\n  [app abort-id]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} (comp/any->app app)\n        runtime-state   @runtime-atom\n        {:com.fulcrologic.fulcro.application/keys [remotes]\n         ::keys                                   [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n\n(defn abort-remote!\n  \"Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \\\"received\\\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\"\n  [app-ish remote]\n  (let [app            (comp/any->app app-ish)\n        {:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} (comp/any->app app)\n        {abort-network! :abort!\n         :as            the-remote} (get @runtime-atom [:com.fulcrologic.fulcro.application/remotes remote])\n        old-send-queue (get-in @runtime-atom [::send-queues remote])]\n    (swap! runtime-atom assoc-in [::send-queues remote] [])\n    (swap! state-atom update :com.fulcrologic.fulcro.application/active-remotes (fnil disj #{}) remote)\n    (doseq [{::keys [active? options result-handler] :as send-node} old-send-queue\n            aid (or (-> options ::abort-id) (-> options :abort-id))]\n      (try\n        (when active?\n          (if abort-network!\n            (abort-network! the-remote aid)\n            (log/warn \"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\")))\n        (result-handler {:status-code 500\n                         :body        {}\n                         :status-text \"Globally Aborted\"\n                         ::aborted?   true})\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"))))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","com.fulcrologic.guardrails.core/=>","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","cljs.spec.alpha.every_impl","G__64042","cljs.core/vector?","cljs.spec.alpha/cat-impl","map__64044","cljs.core/--destructure-map","cljs.core.get","parallel?","p__64045","map__64046","options","cljs.core/boolean","or__5045__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core/fn?","cljs.core/boolean?","cljs.core._EQ_","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__64052#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__64062#","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__64068","cljs.core.nth","map__64071","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv","n","cljs.core/first","cljs.core.partition_by","clusters","reads","writes","cljs.core.reduce","result","id","vec__64080","seq__64081","cljs.core/seq","first__64082","cljs.core/next","map__64083","ast","_","cluster","cljs.core.update","cljs.core/into","cljs.core.into","cljs.core.concat","p__64121","map__64125","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","G__64126","cljs.core/coll?","cljs.core.map","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","cljs.spec.alpha/map-spec-impl","G__64137","cljs.core/map?","cljs.core/contains?","vec__64189","vec__64192","active-nodes","id-to-send","to-send","to-defer","p1__64128#","tx","p__64197","map__64198","acc","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid","combined-node-idx","combined-node","p__64200","map__64201","body","combined-result","seq__64202","chunk__64203","count__64204","i__64205","map__64212","temp__5753__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__64222","update-handler","p__64224","map__64225","seq__64226","chunk__64227","count__64228","i__64229","map__64244","map__64256","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc","and__5043__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__64253","e","e64252","map__64261","e64260","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","cljs.core/any?","b2__29641__auto__","remote","transmit!","e64274","e64286","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e64275","e64276","G__64279","fexpr__64278","G__64293","fexpr__64292","G__64295","fexpr__64294","p__64297","map__64298","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","operations","cljs.core.atom","new-send-queues","vec__64301","p","serial","front","seq__64304","chunk__64305","count__64306","i__64307","item","cljs.core.swap_BANG_","cljs.core/conj","map__64317","cljs.core/assoc","seq__64318","chunk__64319","count__64320","i__64321","op","var_args","G__64325","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","ast-nodes","elements","cljs.core.comp","cljs.core.filter","cljs.core.map_indexed","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__64334","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__64337","map__64338","p__64349","map__64351","tx-node","addl","map__64341","ref","component","G__64342","cljs.core.merge","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e64369","G__64382","dispatch","p__64400","map__64402","original-ast-node","ele","map__64408","G__64416","dispatch-all","eles","p__64428","map__64430","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","p1__64427#","cljs.core/some","cljs.core/update","queue","node","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","p__64459","map__64460","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","map__64465","blocked","ready","dispatched-nodes","p1__64446#","com.fulcrologic.fulcro.mutations/mutate","a","p1__64452#","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__64491","tm","cljs.core/int?","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_","G__64514","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_","G__64521","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_","p__64541","map__64546","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","remotes","reduction","p__64547","map__64548","done?","new-elements","element","map__64549","map__64550","complete?","action","remote-set","clojure.set.intersection","exec?","cljs.core/not","fully-complete?","cljs.core/empty?","clojure.set.difference","state-id-before","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","state","state-before","updated-element","new-acc","cljs.core.conj","e64565","mutation-symbol","e64589","edn_query_language.core.ast__GT_expr","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__64593","map__64594","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__64602","map__64603","updated-node","e64617","e64635","p__64657","map__64662","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__64666","map__64667","active-keys","clojure.set.union","desired-set","p__64691","map__64697","txn-id","ele-idx","map__64699","old-queue","cljs.core/filterv","p__64708","map__64709","cljs.core/assoc-in","G__64754","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__64772","map__64778","result-key","cljs.core/keyword?","txn-idx","p__64784","map__64785","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","tx-element","map__64839","state-before-action","remote-fn","remote-desire","desired-ast","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__64868","p__64869","p__64870","map__64871","map__64872","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","cljs.spec.alpha/nilable-impl","cljs.core.get_in","handler","cljs.core/update-in","cljs.core.fnil","p__64877","map__64878","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.update_in","p__64886","map__64887","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__64888","map__64889","in-progress","p__64890","map__64891","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__64894","map__64895","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial","p__64899","map__64900","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__64903","map__64904","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","results","desired-ast-nodes","transmitted-ast-nodes","e64911","p__64916","map__64918","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__64920","map__64921","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__64923","map__64924","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__64928","map__64931","seq__64932","chunk__64933","count__64934","i__64935","vec__64945","vec__64951","value","e64948","e64954","p__64956","map__64957","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__64958","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","G__64971","cljs.core/set?","outer-acc","map__64992","refresh","p__65021","map__65022","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__65023","map__65024","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__65038","map__65039","state-atom","new-queue","temp__5751__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","p__65042","map__65043","com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","map__65044","mutation-nodes","ast-node->operation","cljs.core/zipmap","optimistic","mixed","p1__65041#","optimistic-tx-node","edn-query-language.core/ast->query","mixed-tx-node","resulting-node-id","cljs.core/reset!","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/refresh-component!","r!","G__65051","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","p__65052","p__65053","map__65054","map__65055","com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_","synchronous?","map__65056","only-refresh","follow-on-reads","p1__65048#","cljs.core/Keyword","edn-query-language.core/ident?","G__65059","s","G__65062","v","p__65066","map__65067","com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","abort!","abort-id","p__65069","map__65071","active?","aid","G__65073","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","map__65078","map__65079","com.fulcrologic.fulcro.components/any->app","runtime-state","com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","app-ish","map__65083","map__65084","abort-network!","the-remote","old-send-queue","cljs.core/disj","seq__65085","chunk__65090","count__65091","i__65092","map__65124","seq__65093","chunk__65094","count__65095","i__65096","map__65133","seq__65086","chunk__65087","count__65088","i__65089","e65129","e65131","e65138","e65140","G__65130","G__65132","G__65139","G__65141"]],"~:used-vars",["^L",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$cljs.core/--destructure-map","~$cljs.core/comp","~$clojure.set/intersection","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","~$cljs.core/boolean?","~$cljs.core/keyword?","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$edn-query-language.core/query->ast","~$cljs.spec.alpha/every-impl","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$cljs.core/vector?","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","~$cljs.core/partial","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.mutations/mutate","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","~$edn-query-language.core/ident?","~$com.fulcrologic.guardrails.core/=>","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/int?","~$cljs.core/group-by","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$cljs.core/mapv","~$cljs.spec.alpha/nilable-impl","~$cljs.core/not=","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","~$cljs.core/concat","~$com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.spec.alpha/map-spec-impl","~$cljs.core/reset!","~$com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$cljs.core/zipmap","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","~$cljs.core/map","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","~$edn-query-language.core/ast->expr","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","~$com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","~$com.fulcrologic.fulcro.algorithms.do-not-use/now","~$com.fulcrologic.fulcro.components/component?","~$cljs.core/partition-by","~$cljs.core/-nth","~$cljs.spec.alpha/cat-impl","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","~$clojure.set/difference","~$com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/reduced","~$cljs.core/set?","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$cljs.core/nth","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","~$js/goog.DEBUG","~$cljs.core/split-with","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$cljs.core/select-keys","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/disj","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","~$clojure.set/union","~$cljs.core/assoc-in","~$cljs.core/map-indexed","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-started!","~$cljs.core/coll?","~$com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$cljs.core/first","~$edn-query-language.core/ast->query","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/merge","~$cljs.core/every?","~$cljs.core/update-in","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","~$js/Error","~$cljs.core/any?","~$cljs.core/boolean","~$cljs.core/some","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1P","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^14","^13","^1>","^X","^Z","^10"]]],["^1P","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.dom.HtmlElement"]]],["^1P","goog/async/freelist.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core/async/impl/ioc_helpers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cljs.core.async.impl.protocols"]]],["^1P","goog/i18n/datetimesymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.i18n.cldrversion"]]],["^1P","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1P","expound/util.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^1P","goog/crypt/crypt.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.asserts","~$goog.async.throwException"]]],["^1P","cljs/core/async.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1P","goog/timer/timer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Promise","~$goog.events.EventTarget"]]],["^1P","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z"]]],["^1P","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$goog.Uri"]]],["^1P","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$clojure.string","~$goog.string"]]],["^1P","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F"]]],["^1P","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5R"]]],["^1P","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1P","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","^5F","^5A","^5D","^5E"]]],["^1P","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^5A"]]],["^1P","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F"]]],["^1P","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^5Q","^X","~$goog.object","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1P","expound/problems.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$expound.paths","^@"]]],["^1P","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5B","~$goog.reflect","^5A"]]],["^1P","goog/structs/prioritypool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1P","goog/async/run.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.async.WorkQueue","~$goog.debug.asyncStackTag","~$goog.async.nextTick","^5G"]]],["^1P","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1P","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/async/workqueue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.async.FreeList","^5F"]]],["^1P","com/fulcrologic/fulcro/dom/events.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1P","goog/promise/resolver.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5R","~$goog.string.StringBuffer"]]],["^1P","goog/structs/priorityqueue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Heap"]]],["^1P","goog/net/xhrio.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Timer","^5M","^5F","~$goog.collections.maps","^6=","^5O","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^5Y","^5R","~$goog.uri.utils","^5T"]]],["^1P","goog/promise/thenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/collections/iters.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cognitect.transit","^J","^@","^17"]]],["^1P","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$clojure.walk"]]],["^1P","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5Y"]]],["^1P","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5A"]]],["^1P","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^5R","^6G"]]],["^1P","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^@","^J","^X","^Z"]]],["^1P","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6C","^6D","^6E","^6B","^5M","^5R","^6G"]]],["^1P","expound/alpha.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$expound.problems","^@","^5Q","^W","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1P","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","~$goog.i18n.DateTimeFormat","^1<","~$taoensso.timbre.appenders.core"]]],["^1P","goog/net/wrapperxmlhttpfactory.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1P","goog/date/utcdatetime.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1P","goog/i18n/nativelocaledigits.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/eventtarget.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Disposable","^5F","~$goog.events","~$goog.events.Event","^6@","^6A","^5Y"]]],["^1P","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^5Q","~$expound.alpha"]]],["^1P","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1P","expound/ansi.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q"]]],["^1P","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1P","shadow/js.js"],["409b887858ac3838697e7a1c6e019c62bc4e5814","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F"]]],["^1P","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^W","~$cljs.reader","~$cljs.tools.reader.edn","^5Y","^5M","^5R","~$goog.string.format","^6G","^75","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^6N","^6M","~$taoensso.truss"]]],["^1P","goog/structs/set.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map"]]],"~:SHADOW-TIMESTAMP",[1689298966000,1689298966000,1689298966000],["^7=","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","1df918e8981877c2759388dfae58a059e089860d","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^7>"]]],["^1P","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^1<"]]],["^1P","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^64"]]],["^1P","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.ListenableKey"]]],["^1P","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.fs.blob","^5U","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5W","^5X"]]],["^1P","cljs/core/async/impl/channels.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","^5K","^5I"]]],["^1P","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","~$goog.events.Listener","^5Y"]]],["^1P","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$taoensso.truss.impl"]]],["^1P","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/fulcro/algorithms/merge.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.fulcro.algorithms.data-targeting","^10","^U","~$com.fulcrologic.fulcro.algorithms.normalize","^12","^1>","^X","^Z","^17"]]],["^1P","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^1P","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core/async/impl/dispatch.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5I","^69"]]],["^1P","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5W","~$goog.html.SafeUrl","^5X","^5F","^5A"]]],["^1P","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^7N","~$goog.html.SafeStyle","^7T","^5V","~$goog.html.uncheckedconversions","^5W","^5A"]]],["^1P","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.dom.TagName","^5F","~$goog.dom.element"]]],["^1P","goog/i18n/dayperiodsymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","expound/paths.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^6V"]]],["^1P","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W"]]],["^1P","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/useragent/product.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^61","^63","^5T"]]],["^1P","cljs/core/async/impl/protocols.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/net/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/structs/map.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.collections.iters","~$goog.iter","~$goog.iter.Iterator","~$goog.iter.es6"]]],["^1P","goog/net/xhriopool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7D","~$goog.structs.PriorityPool"]]],["^1P","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/date/date.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.i18n.DateTimeSymbols","^5R"]]],["^1P","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5W","^7N","^7Y","~$goog.html.SafeStyleSheet","^7T","^7[","^5V","^5X","^5F","^61","^5M","^5Y","^5A","~$goog.dom.tags","^7O"]]],["^1P","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5Y"]]],["^1P","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Y","^W","^5Q","^6S","^12","^1>","^U","~$com.fulcrologic.fulcro.algorithms.transit","^X","^1<","^Z"]]],["^1P","goog/structs/queue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M"]]],["^1P","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","^5A","^5B"]]],["^1P","com/fulcrologic/fulcro/inspect/transit.cljs"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6R","~$com.cognitect.transit.types","^89","^Z"]]],["^1P","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^6;","^8:"]]],["^1P","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Y","^6F","^7B","^6G"]]],["^1P","com/fulcrologic/fulcro/mutations.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.fulcro.raw.components","~$com.fulcrologic.fulcro.dom.events","^J","^X","^Z","^1<","^@","^1>","^7R","~$com.fulcrologic.fulcro.algorithms.merge","^U","^17","^5Q"]]],["^1P","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","^5F","^7U","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7[","~$goog.dom.safe","^7X","^7Z","~$goog.math.Coordinate","~$goog.math.Size","^5Y","^5R","^5W","~$goog.string.Unicode","^5T"]]],["^1P","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.guardrails.registry","^78"]]],["^1P","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Y","~$module$node_modules$react$index","^X","^@","^Z","^6S","^5Q","^1>","^12","^U","^8=","^J","^W"]]],["^1P","com/fulcrologic/fulcro/specs.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^J","^1>","^X"]]],["^1P","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.debug.Error","^8A"]]],["^1P","cljs/core/async/impl/buffers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?"]]],["^1P","goog/i18n/timezone.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","^5Y","^5R"]]],["^1P","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","^5F","^6J","^5R","^7H","^6Q","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1P","goog/i18n/cldrversion.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/net/errorcode.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C"]]],["^1P","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/iter/es6.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.iter.Iterable","^83"]]],["^1P","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6?","^5T"]]],["^1P","goog/debug/asyncstacktag.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F"]]],["^1P","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/promise/promise.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Thenable","^5F","^6<","~$goog.async.run","^5G","^8H","^68","^7W","~$goog.promise.Resolver"]]],["^1P","cljs/core/async/impl/timers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","^5H","^5K"]]],["^1P","cljs/spec/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Y","^6S","~$cljs.spec.gen.alpha","^5Q"]]],["^1P","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",[]]],["^1P","goog/json/hybrid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.json"]]],["^1P","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","^5Y"]]],["^1P","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6C","^5Q","~$cljs.tools.reader.impl.inspect"]]],["^1P","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^J","^B","^Z"]]],["^1P","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5R","^6G"]]],["^1P","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^6S"]]],["^1P","goog/structs/pool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^74","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1P","com/fulcrologic/fulcro/inspect/diff.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^7=","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^7>"]]],["^1P","goog/net/httpstatus.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/i18n/datetimeformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^70","~$goog.date.UtcDateTime","^86","~$goog.i18n.DayPeriods","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^5R"]]],["^1P","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8;","^8:","~$goog.math.Long"]]],["^1P","goog/structs/heap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Node","^5Y"]]],["^1P","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F"]]],["^1P","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8B","^7Z","^5W","^5A"]]],["^1P","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8;","~$com.cognitect.transit.eq","^8Y"]]],["^1P","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5A","^5E"]]],["^1P","expound/printer.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^@","^D","^W","^6V","^6W","^60","^6S","^7C","^5R"]]],["^1P","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]]],["^1P","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8;"]]],["^1P","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","~$goog.debug.errorcontext"]]],["^1P","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.math"]]],["^1P","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6D","^5R","^6G"]]],["^1P","goog/iter/iter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5M","^5F","~$goog.debug","^7W","^91"]]],["^1P","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.flags"]]],["^1P","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6=","~$goog.dom","^7[","^7W","^61","^62"]]],["^1P","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8A","^7["]]],["^1P","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^7X","^7N","^7Y","^87","^7T","^5V","^5W","^5A"]]],["^1P","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8<"]]],["^1P","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^74","~$goog.events.EventId"]]],["^1P","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6B","^6C","^6D"]]],["^1P","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8Y","~$goog.math.Integer","^5R","^5Y","^5M","^5P","^6G"]]],["^1P","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8;","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^8:","^8[","^6:","^6;"]]],["^1P","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5W","^5X","^7O","^5F"]]],["^1P","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^92"]]],["^1P","goog/async/throwexception.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5W","^7Y","^5X","^5Y","^5F","^5A"]]],["^1P","goog/structs/collection.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^92","^76","~$goog.events.EventType","^64","^5T"]]],["^1P","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^64"]]],["^1P","goog/structs/node.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5T"]]],["^1P","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^5R"]]],["^1P","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^5X"]]],["^1P","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7;"]]],["^1P","goog/json/json.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/i18n/localefeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8;","^6;","~$com.cognitect.transit.handlers","^8:","^8<","^8Y"]]],["^1P","goog/net/xmlhttpfactory.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6Z"]]],["^1P","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^X","^Z"]]],["^1P","goog/net/xmlhttp.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","~$goog.net.WrapperXmlHttpFactory","^6["]]],["^1P","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^X","^U","^5Y","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^1<","^Z"]]],["^1P","goog/net/xhrlike.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cognitect/transit.cljs"],["98d11d81caee82f97b9417025750b785fb6ecb16","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","~$com.cognitect.transit","^8:","^8[","^5Y","^8Y"]]],["^1P","goog/crypt/base64.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5F","^5Z","^5A","^5T","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async/impl/ioc_macros.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/problems.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1689298965000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1689258840000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/ioc_macros.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/paths.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1689292448000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm.clj",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1689292470000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm/utils.clj",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1689292470000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/mutex.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/buffers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/dispatch.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/ansi.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/printer.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/timers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1689292448000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/protocols.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/concurrent.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/exec/threadpool.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1689258840000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/dom/events.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/alpha.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/cognitect/transit-clj/1.0.329/transit-clj-1.0.329.jar!/cognitect/transit.clj",1689298965000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/util.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/channels.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/mutations.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/alpha.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1689292466000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^G","^I","^J"],"^K",["^L",[]],"^M","^N","^O",["^ "],"^R",null,"^S",["^ ","^T","^U","^V","^W","^X","^X","^?","^@","^J","^J","^Y","^Z","^[","^10","^11","^X","^12","^12","^13","^13","^G","^G","^14","^14","^15","^15","^16","^G","^W","^W","^17","^17","~$m","^18","^19","^19","^1:","^19","^1;","^1<","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","^1=","^1>","^1<","^1<","^@","^@","^1?","^12","^1@","^17","^1>","^1>"],"^1A",["^L",["^1B"]],"~:shadow/js-access-global",["^L",["Error"]],"^1C",["^ ","^1D","^19","^F","^G","^H","^G","^I","^J","^1E","^J","~$|","^J"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",142,"^9",7,"^:",142,"^;",16,"~:arglists",["^1H",["~$quote",["^1H",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^M","^27","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"~:method-params",["^1H",[["^;U","^;V","^;W"]]],"~:protocol-impl",null,"~:arglists-meta",["^1H",[null,null]],"^9",1,"~:variadic?",false,"^8",142,"~:ret-tag",["^L",[null,"~$any"]],"^:",142,"~:max-fixed-arity",3,"~:fn-var",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^;V","^;W"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",577,"^9",7,"^:",577,"^;",34,"^;S",["^1H",["^;T",["^1H",[["^;U","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1J","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^M","^2D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^;X",["^1H",[["^;U","^<5","~$p__64916"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",577,"^<0",["^L",[null,"^<1"]],"^:",577,"^<2",3,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^<5",["^ ","^<6",["^<7","^<8"],"^1J","^<9"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",599,"^9",7,"^:",599,"^;",23,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1J","^<5"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^M","^2=","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["^;U","~$p__64923"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",599,"^<0",["^L",[null,"^<1"]],"^:",599,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",652,"^9",7,"^:",652,"^;",29,"^;S",["^1H",["^;T",["^1H",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1J","^<5"],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^M","^2>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^;X",["^1H",[["~$p__65021","^<A"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",652,"^<0",["^L",[null,"^<1"]],"^:",652,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<?",["^<@"],"^1J","^<5"],"^<A"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",32,"^9",7,"^:",32,"^;",24,"^;S",["^1H",["^;T",["^1H",[["^;U"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^M","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;X",["^1H",[["^;U"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",32,"^<0",["^L",["~$clj","^<1","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",32,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",525,"^9",7,"^:",525,"^;",23,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^M","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["^;U","~$p__64894"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",525,"^<0",["^L",[null,"^<1","^<G"]],"^:",525,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$abort-remote!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",842,"^9",7,"^:",842,"^;",20,"^;S",["^1H",["^;T",["^1H",[["~$app-ish","~$remote"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"^M","^2Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;X",["^1H",[["^<K","^<L"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",842,"^<0","^<G","^:",842,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^<K","^<L"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"~$active-remotes",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",668,"^9",7,"^:",668,"^;",21,"^;S",["^1H",["^;T",["^1H",[["~$queue","^<A"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^M","^4U","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;X",["^1H",[["^<N","^<A"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",668,"^<0",["^L",[null,"^<1"]],"^:",668,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^<N","^<A"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",540,"^9",7,"^:",540,"^;",19,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^<<"],"^1J","^<5"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^M","^2L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;X",["^1H",[["^;U","~$p__64899"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",540,"^<0",["^L",[null,"^<1","^<G"]],"^:",540,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<P","^<<"],"^1J","^<5"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",679,"^9",7,"^:",679,"^;",21,"^;S",["^1H",["^;T",["^1H",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1J","^;U"]]]]]],"^6","Run through the active queue and do a processing step."],"^M","^4L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;X",["^1H",[["~$p__65038"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",679,"^<0","^<G","^:",679,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<T","^<U"],"^1J","^;U"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",238,"^9",7,"^:",238,"^;",24,"^;S",["^1H",["^;T",["^1H",[["^<5","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^M","^28","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;X",["^1H",[["^<5","^<X","^<Y"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",238,"^<0",["^L",["^<D","^<1"]],"^:",238,"^<2",3,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^<5","^<X","^<Y"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$abort-elements!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",798,"^9",8,"^:",798,"^;",23,"~:private",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["~$abort!"],"^1J","^<L"],"~$send-queue","~$abort-id"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^<[",true,"^M","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["~$p__65066","^=1","^=2"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",798,"^<0",["^L",[null,"^<1"]],"^:",798,"^<2",3,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^=0"],"^1J","^<L"],"^=1","^=2"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$remove-send!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",395,"^9",7,"^:",395,"^;",19,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^<L","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^M","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;X",["^1H",[["~$p__64691","^<L","^=5","^=6"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",395,"^<0",["^L",[null,"^<1"]],"^:",395,"^<2",4,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^<L","^=5","^=6"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",485,"^9",7,"^:",485,"^;",27,"^;S",["^1H",["^;T",["^1H",[["^;U","^<5",["^ ","^<6",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^M","^4C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;X",["^1H",[["^;U","^<5","~$p__64877"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",485,"^<0",["^L",[null,"^<1"]],"^:",485,"^<2",3,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^<5",["^ ","^<6",["^=9","^=:","^=;"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",90,"^9",7,"^:",90,"^;",15,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["~$type","~$key","~$children"],"^1J","~$ast"]]]]]]],"^M","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^;X",["^1H",[["~$p__64121"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",90,"^<0",["^L",["^<1","^<E"]],"^:",90,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^=>","^=?","^=@"],"^1J","^=A"]]]]]]],"~$schedule-activation!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",281,"^9",7,"^:",281,"^;",27,"^;S",["^1H",["^;T",["^1H",[["^;U","~$tm"],["^;U"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^;[",false,"~:fixed-arity",2,"^<2",2,"^;X",[["^;U","^=D"],["^;U"]],"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^;Z",["^1H",[null,null]]]],"^M","^37","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^;U","^=D"],["^;U"]],"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^;Z",["^1H",[null,null]]],"^;X",[["^;U","^=D"],["^;U"]],"^;Y",null,"^=F",2,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"~:methods",[["^ ","^=F",2,"^;[",false,"~:tag",["^L",["~$js","^<G"]]],["^ ","^=F",1,"^;[",false,"^=H",["^L",["^=I","^<G"]]]],"^8",281,"^:",281,"^<2",2,"^<3",true,"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",405,"^9",7,"^:",405,"^;",21,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","~$result","~$result-key"],["^;U","^=5","^=6","^<L","^=K"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^=E",["^ ","^;[",false,"^=F",6,"^<2",6,"^;X",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","^=K","^=L"],["^;U","^=5","^=6","^<L","^=K"]],"^;S",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","^=K","^=L"],["^;U","^=5","^=6","^<L","^=K"]]],"^;Z",["^1H",[null,null]]]],"^M","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^=E",["^ ","^;[",false,"^=F",6,"^<2",6,"^;X",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","^=K","^=L"],["^;U","^=5","^=6","^<L","^=K"]],"^;S",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","^=K","^=L"],["^;U","^=5","^=6","^<L","^=K"]]],"^;Z",["^1H",[null,null]]],"^;X",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","^=K","^=L"],["^;U","^=5","^=6","^<L","^=K"]],"^;Y",null,"^=F",6,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^=G",[["^ ","^=F",6,"^;[",false,"^=H",["^L",[null,"^<1","^<G"]]],["^ ","^=F",5,"^;[",false,"^=H",["^L",[null,"^<1","^<G"]]]],"^8",405,"^:",405,"^<2",6,"^<3",true,"^;S",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],"^=5","^=6","^<L","^=K","^=L"],["^;U","^=5","^=6","^<L","^=K"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",619,"^9",7,"^:",619,"^;",23,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]]]]]],"^M","^2I","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["^;U","~$p__64956"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",619,"^<0",["^L",["^<D","^<1","^<G"]],"^:",619,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]]]]]],"~$add-send!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",7,"^:",456,"^;",16,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],["^ ","^<?",["~$id","~$options"],"^1J","^<5"],"^=6","^<L"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^M","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^;X",["^1H",[["~$p__64869","~$p__64870","^=6","^<L"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",456,"^<0",["^L",["~$cljs.core/IMap","^<G"]],"^:",456,"^<2",4,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"],["^ ","^<?",["^=P","^=Q"],"^1J","^<5"],"^=6","^<L"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",49,"^9",7,"^:",49,"^;",17,"^;S",["^1H",["^;T",["^1H",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^M","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;X",["^1H",[["^=V","^=W"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",49,"^<0",["^L",["~$boolean","^<1"]],"^:",49,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^=V","^=W"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",63,"^9",7,"^:",63,"^;",17,"^;S",["^1H",["^;T",["^1H",[["^=V"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^M","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;X",["^1H",[["^=V"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",63,"^<0",["^L",["^=X","^<1"]],"^:",63,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^=V"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",589,"^9",7,"^:",589,"^;",26,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^M","^3K","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^;X",["^1H",[["^;U","~$p__64920"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",589,"^<0",["^L",["^<D","^<1"]],"^:",589,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",385,"^9",7,"^:",385,"^;",22,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]]],"^M","^3G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^;X",["^1H",[["^;U","~$p__64657"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",385,"^<0","^=X","^:",385,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<6",["^<<"],"^1J","^<5"]]]]]]],"~$schedule-queue-processing!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",291,"^9",7,"^:",291,"^;",33,"^;S",["^1H",["^;T",["^1H",[["^;U","^=D"],["^;U"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^;U","^=D"],["^;U"]],"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^;Z",["^1H",[null,null]]]],"^M","^3V","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",33,"^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^;U","^=D"],["^;U"]],"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^;Z",["^1H",[null,null]]],"^;X",[["^;U","^=D"],["^;U"]],"^;Y",null,"^=F",2,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^=G",[["^ ","^=F",2,"^;[",false,"^=H",["^L",["^=I","^<G"]]],["^ ","^=F",1,"^;[",false,"^=H",["^L",["^=I","^<G"]]]],"^8",291,"^:",291,"^<2",2,"^<3",true,"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",26,"^9",7,"^:",26,"^;",19,"^;S",["^1H",["^;T",["^1H",[["^;U"]]]]],"^6","Returns the remotes map from an app"],"^M","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;X",["^1H",[["^;U"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",26,"^<0","^<1","^:",26,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",353,"^9",7,"^:",353,"^;",19,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<?",["^=P","^<@"],"^1J","~$node"]]]]]]],"^M","^3P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;X",["^1H",[["^;U","~$p__64593"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",353,"^<0",["^L",["^<D","^<1"]],"^:",353,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<?",["^=P","^<@"],"^1J","^>5"]]]]]]],"~$process-send-queues!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",7,"^:",167,"^;",27,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^M","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;X",["^1H",[["~$p__64297"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",167,"^<0",["^L",[null,"^<1"]],"^:",167,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<S",["^<U"],"^1J","^;U"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",513,"^9",7,"^:",513,"^;",24,"^;S",["^1H",["^;T",["^1H",[["~$remote-names",["^ ","^<6",["^=:","^=;"],"^1J","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^M","^3X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;X",["^1H",[["^>:","~$p__64890"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",513,"^<0",["^L",[null,"^<1","^<G"]],"^:",513,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^>:",["^ ","^<6",["^=:","^=;"],"^1J","^>;"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",38,"^9",7,"^:",38,"^;",23,"^;S",["^1H",["^;T",["^1H",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^M","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["^>>"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",38,"^<0","~$cljs.core/IVector","^:",38,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^>>"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$application-rendered!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",257,"^9",7,"^:",257,"^;",28,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1J","^;U"],"^=Q"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^M","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;X",["^1H",[["~$p__64428","^=Q"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",257,"^<0",["^L",["^<1","^<G"]],"^:",257,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^>A"],"^1J","^;U"],"^=Q"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$build-env",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",225,"^9",7,"^:",225,"^;",16,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"~$addl"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]]]]],"^=E",["^ ","^;[",false,"^=F",3,"^<2",3,"^;X",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"^>D"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]],"^;S",["^1H",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"^>D"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]]],"^;Z",["^1H",[null,null]]]],"^M","^4D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^=E",["^ ","^;[",false,"^=F",3,"^<2",3,"^;X",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"^>D"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]],"^;S",["^1H",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"^>D"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]]],"^;Z",["^1H",[null,null]]],"^;X",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"^>D"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]],"^;Y",null,"^=F",3,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^=G",[["^ ","^=F",3,"^;[",false,"^=H",["^L",["^<D","^<1","^<G"]]],["^ ","^=F",2,"^;[",false,"^=H",["^L",["^<D","^<1","^<G"]]]],"^8",225,"^:",225,"^<2",3,"^<3",true,"^;S",["^1H",[["^;U",["^ ","^<?",["^=Q"],"^1J","^<5"],"^>D"],["^;U",["^ ","^<6",["^<P"],"^1J","^<5"]]]]],"~$schedule-sends!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",301,"^9",7,"^:",301,"^;",22,"^;S",["^1H",["^;T",["^1H",[["^;U","^=D"],["^;U"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^;U","^=D"],["^;U"]],"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^;Z",["^1H",[null,null]]]],"^M","^2Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^;U","^=D"],["^;U"]],"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^;Z",["^1H",[null,null]]],"^;X",[["^;U","^=D"],["^;U"]],"^;Y",null,"^=F",2,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^=G",[["^ ","^=F",2,"^;[",false,"^=H",["^L",["^=I","^<G"]]],["^ ","^=F",1,"^;[",false,"^=H",["^L",["^=I","^<G"]]]],"^8",301,"^:",301,"^<2",2,"^<3",true,"^;S",["^1H",[["^;U","^=D"],["^;U"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",69,"^9",7,"^:",69,"^;",37,"^;S",["^1H",["^;T",["^1H",[["^=1"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^M","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",37,"^;X",["^1H",[["^=1"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",69,"^<0",["^L",[null,"^<D","^<1"]],"^:",69,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^=1"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^=0",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",825,"^9",7,"^:",825,"^;",13,"^;S",["^1H",["^;T",["^1H",[["^;U","^=2"]]]]],"^6","Implementation of abort when using this tx processing"],"^M","^4T","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",13,"^;X",["^1H",[["^;U","^=2"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",825,"^<0",["^L",[null,"^<1"]],"^:",825,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^=2"]]]]],"^6","Implementation of abort when using this tx processing"],"~$compute-desired-ast-node",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",427,"^9",7,"^:",427,"^;",31,"^;S",["^1H",["^;T",["^1H",[["^;U","^<L","^<5","^<9"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"^M","^4Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",31,"^;X",["^1H",[["^;U","^<L","^<5","^<9"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",427,"^<0",["^L",[null,"^<D","^<1"]],"^:",427,"^<2",4,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^<L","^<5","^<9"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"~$advance-actions!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",310,"^9",7,"^:",310,"^;",23,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<?",["^=P","^<@"],"^1J","^>5"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^M","^4>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["^;U","~$p__64541"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",310,"^<0",["^L",["^<D","^<1"]],"^:",310,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U",["^ ","^<?",["^=P","^<@"],"^1J","^>5"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",57,"^9",7,"^:",57,"^;",20,"^;S",["^1H",["^;T",["^1H",[["^=V"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^M","^4X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;X",["^1H",[["^=V"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",57,"^<0",["^L",["^=X","^<1"]],"^:",57,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^=V"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",28,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^>A"],"^1J","^;U"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^M","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;X",["^1H",[["~$p__64459"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",266,"^<0","^<1","^:",266,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^>A"],"^1J","^;U"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$combine-sends",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",20,"^;S",["^1H",["^;T",["^1H",[["^;U","^;W","^=1"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^M","^57","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;X",["^1H",[["^;U","^;W","^=1"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",97,"^<0","^=T","^:",97,"^<2",3,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^;W","^=1"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$default-tx!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",747,"^9",7,"^:",747,"^;",18,"^;S",["^1H",["^;T",["^1H",[["^;U","~$tx"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["~$synchronous?"],"^1J","^=Q"]]]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^=E",["^ ","^;[",false,"^=F",3,"^<2",3,"^;X",[["^;U","^>O"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["^>P"],"^1J","^=Q"]]],"^;S",["^1H",[["^;U","^>O"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["^>P"],"^1J","^=Q"]]]],"^;Z",["^1H",[null,null]]]],"^M","^4<","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^=E",["^ ","^;[",false,"^=F",3,"^<2",3,"^;X",[["^;U","^>O"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["^>P"],"^1J","^=Q"]]],"^;S",["^1H",[["^;U","^>O"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["^>P"],"^1J","^=Q"]]]],"^;Z",["^1H",[null,null]]],"^;X",[["^;U","^>O"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["^>P"],"^1J","^=Q"]]],"^;Y",null,"^=F",3,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^=G",[["^ ","^=F",2,"^;[",false,"^=H","^<1"],["^ ","^=F",3,"^;[",false,"^=H","^<1"]],"^8",747,"^:",747,"^<2",3,"^<3",true,"^;S",["^1H",[["^;U","^>O"],[["^ ","^<S",["^<U"],"^1J","^;U"],"^>O",["^ ","^<6",["^>P"],"^1J","^=Q"]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$transact-sync!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",702,"^9",7,"^:",702,"^;",21,"^;S",["^1H",["^;T",["^1H",[["^;U","^>O",["^ ","^<6",["~$component","~$ref"],"^1J","^=Q"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"^M","^46","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;X",["^1H",[["^;U","^>O","~$p__65042"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",702,"^<0","^<1","^:",702,"^<2",3,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^>O",["^ ","^<6",["^>R","^>S"],"^1J","^=Q"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"~$idle-node?",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",503,"^9",7,"^:",503,"^;",17,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Returns true if the given node has no active network operations."],"^M","^51","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;X",["^1H",[["~$p__64886"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",503,"^<0","^=X","^:",503,"^<2",1,"^<3",true,"^;S",["^1H",["^;T",["^1H",[[["^ ","^<6",["^<<"],"^1J","^<5"]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",634,"^9",7,"^:",634,"^;",26,"^;S",["^1H",["^;T",["^1H",[["^;U","^<N"]]]]]],"^M","^20","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^;X",["^1H",[["^;U","^<N"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",634,"^<0",["^L",[null,"^<1"]],"^:",634,"^<2",2,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^<N"]]]]]],"~$dispatch-result!",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",555,"^9",7,"^:",555,"^;",23,"^;S",["^1H",["^;T",["^1H",[["^;U","^<5",["^ ","^<?",["~$results","~$dispatch","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1J","^<9"],"^<L"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^M","^43","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;X",["^1H",[["^;U","^<5","~$p__64903","^<L"]]],"^;Y",null,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^8",555,"^<0",["^L",["^<D","^<1"]],"^:",555,"^<2",4,"^<3",true,"^;S",["^1H",["^;T",["^1H",[["^;U","^<5",["^ ","^<?",["^>Y","^>Z","^>[","^?0","^?1"],"^1J","^<9"],"^<L"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^<5",["^ ","^;R",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",199,"^9",7,"^:",199,"^;",14,"^;S",["^1H",["^;T",["^1H",[["^>O"],["^>O","^=Q"]]]]],"^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^>O"],["^>O","^=Q"]],"^;S",["^1H",[["^>O"],["^>O","^=Q"]]],"^;Z",["^1H",[null,null]]]],"^M","^4H","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",14,"^=E",["^ ","^;[",false,"^=F",2,"^<2",2,"^;X",[["^>O"],["^>O","^=Q"]],"^;S",["^1H",[["^>O"],["^>O","^=Q"]]],"^;Z",["^1H",[null,null]]],"^;X",[["^>O"],["^>O","^=Q"]],"^;Y",null,"^=F",2,"^;Z",["^1H",[null,null]],"^9",1,"^;[",false,"^=G",[["^ ","^=F",1,"^;[",false,"^=H","^<1"],["^ ","^=F",2,"^;[",false,"^=H","^=T"]],"^8",199,"^:",199,"^<2",2,"^<3",true,"^;S",["^1H",[["^>O"],["^>O","^=Q"]]]]],"^1F",["^ ","^?","^@","^J","^J","^Y","^Z","^[","^10","^13","^13","^G","^G","^16","^G","~$m","^18","^1;","^1<","^18","^18","~$s","^@","^10","^10","^Z","^Z","^1<","^1<","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1A",["^L",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:req-un","~:opt-un","~:remote","~:state-id-before","~:only-refresh","~:gfn","~:children","~:pred-exprs","~:keys-pred","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","^2<","^<7","~:transacted-ast","~:opt-keys","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:db-after","~:ref","~$cljs.spec.alpha/coll-of","~:synchronous?","~:cljs.spec.alpha/kind-form","~:render!","~:warn","~:req-specs","~:transmitted-ast","~:done?","~:status-text","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element","~:state","^3?","^3A","~:cljs.spec.alpha/cpred","~:status-code","~:after-render?","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^<<","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~$%","~:abort!","~:otherwise","~:state-before-action","~:fatal","~:db-before","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:transmit!","~:req","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:root","~:result","^>A","^=:","~:kind","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","~:req-keys","^=;","~$cljs.core/fn","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:opt-specs","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:pred-forms","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.application/remote-name","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:abort-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^<P","~:parallel?","~:auto","~:edn-query-language.ast/key","~:p","~:new-elements","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:cljs.spec.alpha/conform-all","~:rest","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^<8","^=9","~:message","~:com.fulcrologic.fulcro.application/remote-names","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:cljs.spec.alpha/describe","~:opt","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^@=","^A9","^>A","^A@","^A:","^?O","^@0","^@G","^A;","^AB","^2<","^?M","~:p","^A<","^?>","^<P","^A4","^AD","^?C","^@E","^?X","^?;","^?I","^A>","^@R","^AE","^??","^?G","^?E","^A6","^@X","^?5","^?6","^?:","^?<","^?=","^?A","^?R","^@@","^@L","^@P","^@S","^AC","^@M","~$%","^3A","^3?","^=9","^?D","^AF","^A1","^@1","^@?","^@V","^A5","^@;","^@T","^A?","^@Y","^@I","^@A","^A8","^=;","^<8","^<7","^=:","^?B","^<<","^?L","^@3","^?[","^@K","^@6","^?W","^@2","^@O","^@Q","^A3","^?H","^?V","^?T","^A7","^@U","^@5","^@N","^@W","^?8","^@<","^?K","^@B","^?Z","^@:","^?Y","^AA","^AG","^@[","^@H","^@Z","^@>","^?@","^@D","^?S","^@F","^?7","^A0","^@J","^?F","^A=","^@4","^@C","^?P","^?Q","^?N","^?9","^@7","^@8","^?4","^A2","^@9","^?U","^?J"]],"^1L",["^ ","^1B",["^L",[]]],"^1M",["^ "],"^1N",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]],"^Q","^N","~:ns-specs",["^ ","^?4","^53","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^?>",["^1H",["^?M","^A:","^@G","^2<"]],"^<7",["^1H",["~$cljs.spec.alpha/map-of","^26","^53"]],"^?B","^AK","^?C","~:edn-query-language.ast/node","^?D","~$cljs.core/ifn?","^?H","^25","^?V","^25","^?Z",["^1H",["~$cljs.spec.alpha/keys","^@@",["^=9","^A8","^=;","^<8","^<7","^=:"],"^AC",["^AA","^AG","^@["]]],"^<<",["^1H",["^?M","^?Z","^@G","^2<"]],"^@A",["^1H",["^AO","^@@",["^@R","^?B","^<P","^@I","^<<"],"^AC",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^AJ"]]],"^=:","^3A","^@I","^2<","^=;","^4:","^@O",["^1H",["^?M","^@A","^@G","^2<"]],"^@Q",["^1H",["^?M","^@A","^@G","^2<"]],"^@R","~$cljs.core/uuid?","^AP","^AK","^@Y",["^1H",["^AL","^@X","^?>"]],"^@[",["^1H",["^AL","^26","^53"]],"^A3","^25","^<P",["^1H",["^AO","^AC",["^?4"],"^?6",["^?4"]]],"^A8","^?C","^A:",["^1H",["^AO","^@@",["^@R","^=9","^?C","^AF","^?D","^A>"],"^AC",["^<P"]]],"^A>","^25","^<8","^4:","^=9","^2V","^AA",["^1H",["^AL","^26","^AM"]],"^AD","^25","^AF","^AN","^AG",["^1H",["^AL","^26","^AM"]]],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^59",[["^AS","~:static-fns"],true,["^AS","~:shadow-tweaks"],null,["^AS","~:source-map-inline"],null,["^AS","~:elide-asserts"],false,["^AS","~:optimize-constants"],null,["^AS","^1S"],null,["^AS","~:external-config"],null,["^AS","~:tooling-config"],null,["^AS","~:emit-constants"],null,["^AS","~:load-tests"],null,["^AS","~:form-size-threshold"],null,["^AS","~:global-goog-object&array"],null,["^AS","~:data-readers"],null,["^AS","~:infer-externs"],"^A5",["^AS","^1U"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^AS","~:fn-invoke-direct"],null,["^AS","~:source-map"],"/dev/null"]]]