["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.data_fetch');\n/**\n * Is the given parameter a load marker?\n */\ncom.fulcrologic.fulcro.data_fetch.data_state_QMARK_ = (function com$fulcrologic$fulcro$data_fetch$data_state_QMARK_(state){\nreturn ((cljs.core.map_QMARK_(state)) && (cljs.core.contains_QMARK_(state,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413))));\n});\n/**\n * Is the given parameter a load marker?\n */\ncom.fulcrologic.fulcro.data_fetch.load_marker_QMARK_ = (function com$fulcrologic$fulcro$data_fetch$load_marker_QMARK_(x){\nreturn com.fulcrologic.fulcro.data_fetch.data_state_QMARK_(x);\n});\n/**\n * Is the given load marker ready for loading?\n */\ncom.fulcrologic.fulcro.data_fetch.ready_QMARK_ = (function com$fulcrologic$fulcro$data_fetch$ready_QMARK_(marker){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413).cljs$core$IFn$_invoke$arity$1(marker));\n});\n/**\n * Is the given load marker loading?\n */\ncom.fulcrologic.fulcro.data_fetch.loading_QMARK_ = (function com$fulcrologic$fulcro$data_fetch$loading_QMARK_(marker){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413).cljs$core$IFn$_invoke$arity$1(marker));\n});\n/**\n * Is the given load marker indicate failed?\n * \n *   WARNING: This function is current unimplemented and will be removed.  The new way of dealing with failure is to\n *   define an `error-action` for the load in question and modify your own state. You can also override\n */\ncom.fulcrologic.fulcro.data_fetch.failed_QMARK_ = (function com$fulcrologic$fulcro$data_fetch$failed_QMARK_(marker){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413).cljs$core$IFn$_invoke$arity$1(marker));\n});\n/**\n * The name of the table in which fulcro load markers are stored. You must query for this via a link query\n *   `[df/marker-table '_]` in any component that needs to use them (and refresh) during loads.\n */\ncom.fulcrologic.fulcro.data_fetch.marker_table = new cljs.core.Keyword(\"ui.fulcro.client.data-fetch.load-markers\",\"by-id\",\"ui.fulcro.client.data-fetch.load-markers/by-id\",763321486);\n/**\n * Remove items from a query (AST) that have a key that returns true for the elision-predicate\n */\ncom.fulcrologic.fulcro.data_fetch.elide_ast_nodes = (function com$fulcrologic$fulcro$data_fetch$elide_ast_nodes(p__47160,elision_predicate){\nvar map__47161 = p__47160;\nvar map__47161__$1 = cljs.core.__destructure_map(map__47161);\nvar ast = map__47161__$1;\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47161__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar union_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47161__$1,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47161__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar union_elision_QMARK_ = (elision_predicate.cljs$core$IFn$_invoke$arity$1 ? elision_predicate.cljs$core$IFn$_invoke$arity$1(union_key) : elision_predicate.call(null,union_key));\nif(cljs.core.truth_((function (){var or__5045__auto__ = union_elision_QMARK_;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn (elision_predicate.cljs$core$IFn$_invoke$arity$1 ? elision_predicate.cljs$core$IFn$_invoke$arity$1(key) : elision_predicate.call(null,key));\n}\n})())){\nreturn null;\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = union_elision_QMARK_;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn (cljs.core.count(children) <= (2));\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.data-fetch\",null,62,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\\n        load functions where the :without set contains \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([union_key], 0)),\"See https://book.fulcrologic.com/#warn-union-needs-more-children\"], null);\n}),null)),null,2016503370,null);\n} else {\n}\n\nvar new_ast = cljs.core.update.cljs$core$IFn$_invoke$arity$3(ast,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),(function (c){\nreturn cljs.core.vec(cljs.core.keep.cljs$core$IFn$_invoke$arity$2((function (p1__47159_SHARP_){\nreturn (com.fulcrologic.fulcro.data_fetch.elide_ast_nodes.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.data_fetch.elide_ast_nodes.cljs$core$IFn$_invoke$arity$2(p1__47159_SHARP_,elision_predicate) : com.fulcrologic.fulcro.data_fetch.elide_ast_nodes.call(null,p1__47159_SHARP_,elision_predicate));\n}),c));\n}));\nif(cljs.core.seq(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(new_ast))){\nreturn new_ast;\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new_ast,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\n}\n}\n});\n/**\n * Remove items from a query when the query element where the (node-predicate key) returns true. Commonly used with\n * a set as a predicate to elide specific well-known UI-only paths.\n */\ncom.fulcrologic.fulcro.data_fetch.elide_query_nodes = (function com$fulcrologic$fulcro$data_fetch$elide_query_nodes(query,node_predicate){\nreturn edn_query_language.core.ast__GT_query(com.fulcrologic.fulcro.data_fetch.elide_ast_nodes(edn_query_language.core.query__GT_ast(query),node_predicate));\n});\n/**\n * Internal function to validate and process the parameters of `load` and `load-action`.\n */\ncom.fulcrologic.fulcro.data_fetch.load_params_STAR_ = (function com$fulcrologic$fulcro$data_fetch$load_params_STAR_(app__$1,server_property_or_ident,class_or_factory,p__47180){\nvar map__47186 = p__47180;\nvar map__47186__$1 = cljs.core.__destructure_map(map__47186);\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar abort_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819));\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47186__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\nvar update_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"update-query\",\"update-query\",-1566885791));\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929));\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47186__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),false);\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar error_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"error-action\",\"error-action\",-1147840498));\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\nvar without = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"without\",\"without\",1107036688));\nvar ok_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"ok-action\",\"ok-action\",1253795573));\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897));\nvar focus = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"focus\",\"focus\",234677911));\nvar post_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47186__$1,new cljs.core.Keyword(null,\"post-action\",\"post-action\",-542405960));\n\n\n\n\n\nvar state_map = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar transformed_query = (cljs.core.truth_(class_or_factory)?(function (){var G__47202 = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,state_map);\nvar G__47202__$1 = ((cljs.core.set_QMARK_(without))?com.fulcrologic.fulcro.data_fetch.elide_query_nodes(G__47202,without):G__47202);\nvar G__47202__$2 = (cljs.core.truth_(focus)?edn_query_language.core.focus_subquery(G__47202__$1,focus):G__47202__$1);\nif(cljs.core.truth_(update_query)){\nreturn (update_query.cljs$core$IFn$_invoke$arity$1 ? update_query.cljs$core$IFn$_invoke$arity$1(G__47202__$2) : update_query.call(null,G__47202__$2));\n} else {\nreturn G__47202__$2;\n}\n})():null);\nvar query = (cljs.core.truth_((function (){var and__5043__auto__ = class_or_factory;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.map_QMARK_(params);\n} else {\nreturn and__5043__auto__;\n}\n})())?cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,server_property_or_ident,null,(1),null)),(new cljs.core.List(null,transformed_query,null,(1),null)))))),null,(1),null)),(new cljs.core.List(null,params,null,(1),null))))),null,(1),null)))))):(cljs.core.truth_(class_or_factory)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([server_property_or_ident,transformed_query])], null):((cljs.core.map_QMARK_(params))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.List(null,server_property_or_ident,(new cljs.core.List(null,params,null,(1),null)),(2),null))], null):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [server_property_or_ident], null)\n)));\nvar marker__$1 = ((marker === true)?(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.data-fetch\",null,100,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Boolean load marker no longer supported. See https://book.fulcrologic.com/#warn-boolean-marker-not-supported\"], null);\n}),null)),null,-721225889,null);\n\nreturn false;\n})()\n:marker);\nif(cljs.core.truth_((function (){var and__5043__auto__ = target;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn (((!(com.fulcrologic.fulcro.algorithms.data_targeting.special_target_QMARK_(target)))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(target))));\n} else {\nreturn and__5043__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.data-fetch\",null,104,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Data load targets of two elements imply that you are targeting a table entry. That is probably\",\"incorrect. Normalization targets tables. Targeting is for creating missing edges, which are usually 3-tuples. See https://book.fulcrologic.com/#warn-data-load-targets-table\"], null);\n}),null)),null,-1245712935,null);\n} else {\n}\n\nreturn cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929),new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),new cljs.core.Keyword(null,\"source-key\",\"source-key\",-1325875542),new cljs.core.Keyword(null,\"error-action\",\"error-action\",-1147840498),new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705),new cljs.core.Keyword(null,\"ok-action\",\"ok-action\",1253795573),new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897),new cljs.core.Keyword(null,\"post-action\",\"post-action\",-542405960),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819)],[remote,fallback,marker__$1,server_property_or_ident,error_action,post_mutation,ok_action,post_mutation_params,post_action,target,query,abort_id]);\n});\n/**\n * Adds a load marker at the given `marker` id to df/marker-table with the given status.\n * \n *   NOTE: You must query for the marker table in any component that wants to show activity.\n */\ncom.fulcrologic.fulcro.data_fetch.set_load_marker_BANG_ = (function com$fulcrologic$fulcro$data_fetch$set_load_marker_BANG_(app__$1,marker,status){\nif(cljs.core.truth_(marker)){\nvar map__47240 = app__$1;\nvar map__47240__$1 = cljs.core.__destructure_map(map__47240);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47240__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,127,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Setting load marker\"], null);\n}),null)),null,11187536,null);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [com.fulcrologic.fulcro.data_fetch.marker_table,marker], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),status], null));\n\nvar G__47244 = app__$1;\nvar G__47245 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\nreturn (render_BANG_.cljs$core$IFn$_invoke$arity$2 ? render_BANG_.cljs$core$IFn$_invoke$arity$2(G__47244,G__47245) : render_BANG_.call(null,G__47244,G__47245));\n} else {\nreturn null;\n}\n});\n/**\n * Removes the load marker with the given `marker` id from the df/marker-table.\n */\ncom.fulcrologic.fulcro.data_fetch.remove_load_marker_BANG_ = (function com$fulcrologic$fulcro$data_fetch$remove_load_marker_BANG_(app__$1,marker){\nif(cljs.core.truth_(marker)){\nvar map__47247 = app__$1;\nvar map__47247__$1 = cljs.core.__destructure_map(map__47247);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47247__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,137,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Removing load marker\"], null);\n}),null)),null,-1714555182,null);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state_atom,cljs.core.update,com.fulcrologic.fulcro.data_fetch.marker_table,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([marker], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Default processing when a load finishes successfully (called internally).\n * \n *   Removes any load marker, then either:\n * \n *   - Runs the `ok-action` (if defined).\n *   - Does normal post-processing (if the was no ok-action):\n *     - Merges the load result\n *     - Processes desired targets\n *     - Runs the post-mutation (if defined)\n *     - Runs the post-action (if defined)\n */\ncom.fulcrologic.fulcro.data_fetch.finish_load_BANG_ = (function com$fulcrologic$fulcro$data_fetch$finish_load_BANG_(p__47256,p__47257){\nvar map__47258 = p__47256;\nvar map__47258__$1 = cljs.core.__destructure_map(map__47258);\nvar env = map__47258__$1;\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47258__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47258__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nvar transmitted_ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47258__$1,new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690));\nvar map__47259 = p__47257;\nvar map__47259__$1 = cljs.core.__destructure_map(map__47259);\nvar params = map__47259__$1;\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar ok_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"ok-action\",\"ok-action\",1253795573));\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897));\nvar post_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"post-action\",\"post-action\",-542405960));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313));\nvar source_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,new cljs.core.Keyword(null,\"source-key\",\"source-key\",-1325875542));\ncom.fulcrologic.fulcro.data_fetch.remove_load_marker_BANG_(app__$1,marker);\n\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"load-params\",\"load-params\",38753949),params);\nif(cljs.core.fn_QMARK_(ok_action)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,158,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Skipping default merge and calling user-supplied ok-action.\"], null);\n}),null)),null,1844954270,null);\n\nreturn (ok_action.cljs$core$IFn$_invoke$arity$1 ? ok_action.cljs$core$IFn$_invoke$arity$1(env__$1) : ok_action.call(null,env__$1));\n} else {\nvar map__47268 = result;\nvar map__47268__$1 = cljs.core.__destructure_map(map__47268);\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47268__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar transaction = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47268__$1,new cljs.core.Keyword(null,\"transaction\",\"transaction\",1777321997));\nvar mark_query = (function (){var or__5045__auto__ = transaction;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(transmitted_ast);\n}\n})();\nvar body__$1 = com.fulcrologic.fulcro.algorithms.merge.mark_missing(body,mark_query);\nvar map__47269 = app__$1;\nvar map__47269__$1 = cljs.core.__destructure_map(map__47269);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47269__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state_atom,(function (s){\nvar G__47275 = com.fulcrologic.fulcro.algorithms.merge.merge_STAR_.cljs$core$IFn$_invoke$arity$3(s,query,body__$1);\nif(cljs.core.truth_(target)){\nreturn com.fulcrologic.fulcro.algorithms.data_targeting.process_target.cljs$core$IFn$_invoke$arity$3(G__47275,source_key,target);\n} else {\nreturn G__47275;\n}\n}));\n\nif((post_mutation instanceof cljs.core.Symbol)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,168,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Doing post mutation \",post_mutation], null);\n}),null)),null,176007463,null);\n\ncom.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,post_mutation,null,(1),null)),(new cljs.core.List(null,(function (){var or__5045__auto__ = post_mutation_params;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),null,(1),null))))),null,(1),null)))))));\n} else {\n}\n\nif(cljs.core.fn_QMARK_(post_action)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,171,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Doing post action\"], null);\n}),null)),null,441711393,null);\n\nreturn (post_action.cljs$core$IFn$_invoke$arity$1 ? post_action.cljs$core$IFn$_invoke$arity$1(env__$1) : post_action.call(null,env__$1));\n} else {\nreturn null;\n}\n}\n});\n/**\n * The normal internal processing of a load that has failed (error returned true).\n * \n *   Sets the load marker, if present, to :failed.\n * \n *   If an `error-action` was desired, it is used to process the rest of the failure.\n * \n *   The `env` will include the network `:result` and the original load options as `:load-params`.\n * \n *   *Otherwise*, this function will:\n * \n *   - Trigger the global error action (if defined on the app) (arg is env as described above)\n *   - Trigger any fallback for the load. (params are the env described above)\n *   \n */\ncom.fulcrologic.fulcro.data_fetch.load_failed_BANG_ = (function com$fulcrologic$fulcro$data_fetch$load_failed_BANG_(p__47312,p__47313){\nvar map__47319 = p__47312;\nvar map__47319__$1 = cljs.core.__destructure_map(map__47319);\nvar env = map__47319__$1;\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47319__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar map__47320 = p__47313;\nvar map__47320__$1 = cljs.core.__destructure_map(map__47320);\nvar params = map__47320__$1;\nvar error_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47320__$1,new cljs.core.Keyword(null,\"error-action\",\"error-action\",-1147840498));\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47320__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313));\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47320__$1,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,189,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Running load failure logic.\"], null);\n}),null)),null,833694319,null);\n\ncom.fulcrologic.fulcro.data_fetch.set_load_marker_BANG_(app__$1,marker,new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762));\n\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"load-params\",\"load-params\",38753949),params);\nif(cljs.core.fn_QMARK_(error_action)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,194,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Skipping default load error action\"], null);\n}),null)),null,823924313,null);\n\nreturn (error_action.cljs$core$IFn$_invoke$arity$1 ? error_action.cljs$core$IFn$_invoke$arity$1(env__$1) : error_action.call(null,env__$1));\n} else {\nvar temp__5753__auto___47467 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-error-action\",\"global-error-action\",-924822372));\nif(cljs.core.truth_(temp__5753__auto___47467)){\nvar global_error_action_47472 = temp__5753__auto___47467;\n(global_error_action_47472.cljs$core$IFn$_invoke$arity$1 ? global_error_action_47472.cljs$core$IFn$_invoke$arity$1(env__$1) : global_error_action_47472.call(null,env__$1));\n} else {\n}\n\nif((fallback instanceof cljs.core.Symbol)){\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,fallback,null,(1),null)),(new cljs.core.List(null,env__$1,null,(1),null))))),null,(1),null)))))));\n} else {\nreturn null;\n}\n}\n});\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.data-fetch\",\"internal-load!\",\"com.fulcrologic.fulcro.data-fetch/internal-load!\",273645565,null),(function (p__47326){\nvar map__47327 = p__47326;\nvar map__47327__$1 = cljs.core.__destructure_map(map__47327);\nvar env = map__47327__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47327__$1,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(ast,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar map__47328 = params;\nvar map__47328__$1 = cljs.core.__destructure_map(map__47328);\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47328__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47328__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47328__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313));\nvar remote_key = (function (){var or__5045__auto__ = remote;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576);\n}\n})();\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.data-fetch\",null,206,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Loading \",remote,\" query:\",query], null);\n}),null)),null,1562363013,null);\n\nvar G__47330 = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"action\",\"action\",-811238024),(function (p__47331){\nvar map__47332 = p__47331;\nvar map__47332__$1 = cljs.core.__destructure_map(map__47332);\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47332__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nreturn com.fulcrologic.fulcro.data_fetch.set_load_marker_BANG_(app__$1,marker,new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189));\n}),new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),(function (p__47333){\nvar map__47334 = p__47333;\nvar map__47334__$1 = cljs.core.__destructure_map(map__47334);\nvar env__$1 = map__47334__$1;\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47334__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47334__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar remote_error_QMARK_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nif(cljs.core.truth_((remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1 ? remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1(result) : remote_error_QMARK_.call(null,result)))){\nreturn com.fulcrologic.fulcro.data_fetch.load_failed_BANG_(env__$1,params);\n} else {\nreturn com.fulcrologic.fulcro.data_fetch.finish_load_BANG_(env__$1,params);\n}\n}),remote_key,(function (_){\nreturn edn_query_language.core.query__GT_ast(query);\n})]);\nreturn G__47330;\n}));\n/**\n * Load data from the server.\n * \n *   This function triggers a server interaction and normalizes the server response into your app state database. During\n *   operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n *   components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n *   state root (which is the default).\n * \n *   The server will receive a query of the form: [({server-property (comp/get-query class-or-factory)} params)], which\n *   a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n *   instructions on parsing queries in the developer's guide.\n * \n *   Parameters:\n *   - `app-or-comp` : A component instance or Fulcro application\n *   - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n *   you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n *   - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n *  class-or-factory can be nil, in which case the resulting server query will not be a join.\n *   - `config` : A map of load configuration parameters.\n * \n *   Config (all optional):\n *   - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n *  Can also be special targets (multiple-targets, append-to,\n *  prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n *  When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n *   - `initialize` - REMOVED. Use component pre-merge instead.\n *   - `remote` - Optional. Keyword name of the remote that this load should come from.\n *   - `params` - Optional parameters to add to the generated query\n *   - `marker` - ID of marker. Normalizes a load marker into app state so you can see progress.\n *   - `refresh` - A list of things in the UI to refresh. Depends on rendering optimization.\n *   - `focus` - Focus the query along a path. See eql/focus-subquery.\n *   - `without` - A set of keys to remove (recursively) from the query.\n *   - `update-query` - A general-purpose function that can transform the component query before sending to remote. See also\n *   the application's `:global-eql-transform` option.\n *   For example, to focus a subquery using update-query: `{:update-query #(eql/focus-subquery % [:my {:sub [:query]}])}`\n *   Removing properties (like previous :without option): `{:update-query #(df/elide-query-nodes % #{:my :elisions})}`\n *   - `abort-id` - Set a unique key. If supplied, then the load can be cancelled via that abort ID.\n *   - `parallel` - Send the load out-of-order (immediately) without waiting for other loads in progress.\n *   - `post-mutation` - A mutation (symbol) to run *after* the data is merged. Note, if target is supplied be sure your post mutation\n *  should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n *   - `post-mutation-params` - An optional map that will be passed to the post-mutation when it is called.\n *   - `post-action` - A lambda that will get a mutation env parameter `(fn [env] ...)`. Called after success, like post-mutation\n *  (and after post-mutation if also defined). `env` will include the original `:load-params` and raw network layer `:result`. If you\n *  want the post behavior to act as a top-level mutation, then prefer `post-mutation`. The action can also call `transact!`.\n *   - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be like a mutation `env`, and will\n *  include a `:result` key with the real result from the server, along with the original `:load-params`.\n * \n *   Special-purpose config options:\n * \n *   The config options can also include the following things that completely override behaviors of other (respons-processing) options,\n *   and should only be used in very advanced situations where you know what you are doing:\n * \n *   - `ok-action` - WARNING: OVERRIDES ALL DEFAULT OK BEHAVIOR (except load marker removal)! A lambda that will receive an env parameter `(fn [env] ...)` that\n *  includes the `:result` and original `:load-params`.\n *   - `error-action` - WARNING: OVERRIDES ALL DEFAULT ERROR BEHAVIOR (except load marker update). A lambda that will receive an `env`\n *  that includes the `:result` and original `:load-params`.\n *   \n */\ncom.fulcrologic.fulcro.data_fetch.load_BANG_ = (function com$fulcrologic$fulcro$data_fetch$load_BANG_(var_args){\nvar G__47339 = arguments.length;\nswitch (G__47339) {\ncase 3:\nreturn com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_or_comp,server_property_or_ident,class_or_factory){\nreturn com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4(app_or_comp,server_property_or_ident,class_or_factory,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (app_or_comp,server_property_or_ident,class_or_factory,config){\nvar app__$1 = com.fulcrologic.fulcro.raw.components.any__GT_app(app_or_comp);\nvar txn_options = cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.PersistentArrayMap.EMPTY);\nvar map__47343 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"config\",\"com.fulcrologic.fulcro.application/config\",-1907926684).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar map__47343__$1 = cljs.core.__destructure_map(map__47343);\nvar load_marker_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47343__$1,new cljs.core.Keyword(null,\"load-marker-default\",\"load-marker-default\",335781105));\nvar query_transform_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47343__$1,new cljs.core.Keyword(null,\"query-transform-default\",\"query-transform-default\",-1684574273));\nvar load_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47343__$1,new cljs.core.Keyword(null,\"load-mutation\",\"load-mutation\",-2132703225));\nvar map__47344 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var G__47345 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),load_marker_default,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),false,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"without\",\"without\",1107036688),cljs.core.PersistentHashSet.EMPTY], null);\nif(cljs.core.truth_(query_transform_default)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47345,new cljs.core.Keyword(null,\"update-query\",\"update-query\",-1566885791),query_transform_default);\n} else {\nreturn G__47345;\n}\n})(),config], 0));\nvar map__47344__$1 = cljs.core.__destructure_map(map__47344);\nvar config__$1 = map__47344__$1;\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47344__$1,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128));\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47344__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar load_sym = (function (){var or__5045__auto__ = load_mutation;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(\"com.fulcrologic.fulcro.data-fetch\",\"internal-load!\",\"com.fulcrologic.fulcro.data-fetch/internal-load!\",273645565,null);\n}\n})();\nvar mutation_args = com.fulcrologic.fulcro.data_fetch.load_params_STAR_(app__$1,server_property_or_ident,class_or_factory,config__$1);\nvar abort_id = new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(mutation_args);\nif(cljs.core.truth_(query_transform_default)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.data-fetch\",null,286,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Query-transform-default is a dangerous option that can break general merge behaviors. Do not use it. See https://book.fulcrologic.com/#warn-dont-use-query-transform-default\"], null);\n}),null)),null,651711125,null);\n} else {\n}\n\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,load_sym,null,(1),null)),(new cljs.core.List(null,mutation_args,null,(1),null))))),null,(1),null)))))),(function (){var G__47349 = txn_options;\nvar G__47349__$1 = ((cljs.core.seq(refresh))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47349,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),refresh):G__47349);\nvar G__47349__$2 = ((cljs.core.boolean_QMARK_(parallel))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47349__$1,new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892),parallel):G__47349__$1);\nif(cljs.core.truth_(abort_id)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47349__$2,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184),abort_id);\n} else {\nreturn G__47349__$2;\n}\n})());\n}));\n\n(com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$lang$maxFixedArity = 4);\n\n/**\n * Load a field of the current component. Runs `prim/transact!`.\n * \n *   Parameters\n *   - `component`: The component (**instance**, not class). This component MUST have an Ident.\n *   - `field`: A field on the component's query that you wish to load. If `field` is a *vector* of keywords then\n *   this function will load all of the fields specified.\n *   - `options` : A map of load options. See `load`.\n * \n *   WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n *   nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n *   a component that has a dynamic query unless you can base it on the original static query.\n *   \n */\ncom.fulcrologic.fulcro.data_fetch.load_field_BANG_ = (function com$fulcrologic$fulcro$data_fetch$load_field_BANG_(component,field_or_fields,options){\nvar app__$1 = com.fulcrologic.fulcro.raw.components.any__GT_app(component);\nvar map__47365 = options;\nvar map__47365__$1 = cljs.core.__destructure_map(map__47365);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47365__$1,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128));\nvar update_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47365__$1,new cljs.core.Keyword(null,\"update-query\",\"update-query\",-1566885791));\nvar ident = com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1(component);\nvar update_query__$1 = (function (q){\nvar G__47369 = edn_query_language.core.focus_subquery(q,((cljs.core.vector_QMARK_(field_or_fields))?field_or_fields:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [field_or_fields], null)));\nif(cljs.core.truth_(update_query)){\nreturn (update_query.cljs$core$IFn$_invoke$arity$1 ? update_query.cljs$core$IFn$_invoke$arity$1(G__47369) : update_query.call(null,G__47369));\n} else {\nreturn G__47369;\n}\n});\nvar params = com.fulcrologic.fulcro.data_fetch.load_params_STAR_(app__$1,ident,component,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(options,new cljs.core.Keyword(null,\"update-query\",\"update-query\",-1566885791),update_query__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"source-key\",\"source-key\",-1325875542),com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1(component)], 0)));\nvar abort_id = new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(params);\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.List(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.data-fetch\",\"internal-load!\",\"com.fulcrologic.fulcro.data-fetch/internal-load!\",273645565,null),(new cljs.core.List(null,params,null,(1),null)),(2),null))], null),(function (){var G__47379 = cljs.core.PersistentArrayMap.EMPTY;\nvar G__47379__$1 = ((cljs.core.boolean_QMARK_(parallel))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47379,new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892),parallel):G__47379);\nif(cljs.core.truth_(abort_id)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47379__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184),abort_id);\n} else {\nreturn G__47379__$1;\n}\n})());\n});\ncom.fulcrologic.fulcro.data_fetch.refresh_BANG_ = (function com$fulcrologic$fulcro$data_fetch$refresh_BANG_(var_args){\nvar G__47385 = arguments.length;\nswitch (G__47385) {\ncase 2:\nreturn com.fulcrologic.fulcro.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,load_options){\nreturn com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4(component,com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1(component),component,load_options);\n}));\n\n(com.fulcrologic.fulcro.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (component){\nreturn com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$3(component,com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1(component),component);\n}));\n\n(com.fulcrologic.fulcro.data_fetch.refresh_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * DEPRECATED. Use `load!`\n */\ncom.fulcrologic.fulcro.data_fetch.load = com.fulcrologic.fulcro.data_fetch.load_BANG_;\n/**\n * DEPRECATED. Use `load-field!`\n */\ncom.fulcrologic.fulcro.data_fetch.load_field = com.fulcrologic.fulcro.data_fetch.load_field_BANG_;\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Functions for issuing loads of subgraphs of data for your application. The primary functions of interest are\n  `load!` and `load-field!`. Fulcro's composed queries and idents allow these loads to automatically be normalized\n  and merged into your database. The data targeting support allows you to then *join* that new subgraph to the\n  existing UI data graph. This process is the central topic to understand in Fulcro, and it is to your advantage\n  to study the concepts of Fulcro idents and query composition carefully.","~:file","com/fulcrologic/fulcro/data_fetch.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",38],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",["~$load"]],"~:name","~$com.fulcrologic.fulcro.data-fetch","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^T","^?","^@","^G","^G","~$log","~$taoensso.timbre","~$targeting","~$com.fulcrologic.fulcro.algorithms.data-targeting","~$eql","^T","~$cljs.core","^Z","~$rc","~$com.fulcrologic.fulcro.raw.components","~$goog","^11","^X","^X","~$m","~$com.fulcrologic.fulcro.mutations","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","^12","^12","~$s","^@","^S","^S","~$merge","~$com.fulcrologic.fulcro.algorithms.merge","^14","^14","^V","^V","^10","^10","^16","^16","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^@","^@","~$clojure.walk","^19","^18","^18"],"~:seen",["^I",["~:require"]],"~:uses",["^ ","~$walk","^19","~$prewalk","^19","^F","^G","~$=>","^G"],"~:require-macros",["^ ","^?","^@","^G","^G","^U","^V","^Z","^Z","~$m","^12","^12","^12","~$s","^@","^V","^V","^@","^@"],"~:form",["~#list",["~$ns","^L","Functions for issuing loads of subgraphs of data for your application. The primary functions of interest are\n  `load!` and `load-field!`. Fulcro's composed queries and idents allow these loads to automatically be normalized\n  and merged into your database. The data targeting support allows you to then *join* that new subgraph to the\n  existing UI data graph. This process is the central topic to understand in Fulcro, and it is to your advantage\n  to study the concepts of Fulcro idents and query composition carefully.",["^1B",["~:refer-clojure","~:exclude",["^J"]]],["^1B",["^1;",["^19","~:refer",["^1=","^1>"]],["^18","~:as","^17"],["^X","^1G","^W"],["^14","^1G","^13"],["^16","^1G","^15"],["^10","^1G","^["],["^12","^1G","~$m"],["^?","^1G","~$s"],["^G","^1F",["^F","^1?"]],["^T","^1G","^Y"],["^V","^1G","^U"],["^S","^1G","^R"]]]]],"~:flags",["^ ","^1;",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^11","^Z","^19","^18","^X","^14","^16","^10","^12","^@","^G","^T","^V","^S"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/data_fetch.cljc"],"~:compiled-at",1689300107124,"^M",["^ ","^R","^S","^T","^T","^?","^@","^G","^G","^U","^V","^W","^X","^Y","^T","^Z","^Z","^[","^10","^11","^11","^X","^X","~$m","^12","^13","^14","^12","^12","~$s","^@","^S","^S","^15","^16","^14","^14","^V","^V","^10","^10","^16","^16","^17","^18","^@","^@","^19","^19","^18","^18"],"~:resource-name","com/fulcrologic/fulcro/data_fetch.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.data-fetch\n  \"Functions for issuing loads of subgraphs of data for your application. The primary functions of interest are\n  `load!` and `load-field!`. Fulcro's composed queries and idents allow these loads to automatically be normalized\n  and merged into your database. The data targeting support allows you to then *join* that new subgraph to the\n  existing UI data graph. This process is the central topic to understand in Fulcro, and it is to your advantage\n  to study the concepts of Fulcro idents and query composition carefully.\"\n  (:refer-clojure :exclude [load])\n  (:require\n    [clojure.walk :refer [walk prewalk]]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]))\n\n(>defn data-state?\n  \"Is the given parameter a load marker?\"\n  [state]\n  [any? => boolean?]\n  (and (map? state) (contains? state :status)))\n\n(>defn load-marker?\n  \"Is the given parameter a load marker?\"\n  [x]\n  [any? => boolean?]\n  (data-state? x))\n\n(>defn ready? \"Is the given load marker ready for loading?\" [marker]\n  [(s/nilable map?) => boolean?]\n  (= :loading (:status marker)))\n\n(>defn loading? \"Is the given load marker loading?\" [marker]\n  [(s/nilable map?) => boolean?]\n  (= :loading (:status marker)))\n\n(>defn failed?\n  \"Is the given load marker indicate failed?\n\n  WARNING: This function is current unimplemented and will be removed.  The new way of dealing with failure is to\n  define an `error-action` for the load in question and modify your own state. You can also override\"\n  [marker]\n  [(s/nilable map?) => boolean?]\n  (= :failed (:status marker)))\n\n(def marker-table\n  \"The name of the table in which fulcro load markers are stored. You must query for this via a link query\n  `[df/marker-table '_]` in any component that needs to use them (and refresh) during loads.\"\n  :ui.fulcro.client.data-fetch.load-markers/by-id)\n\n(defn elide-ast-nodes\n  \"Remove items from a query (AST) that have a key that returns true for the elision-predicate\"\n  [{:keys [key union-key children] :as ast} elision-predicate]\n  (let [union-elision? (elision-predicate union-key)]\n    (when-not (or union-elision? (elision-predicate key))\n      (when (and union-elision? (<= (count children) 2))\n        (log/warn \"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\n        load functions where the :without set contains \" (pr-str union-key) \"See https://book.fulcrologic.com/#warn-union-needs-more-children\"))\n      (let [new-ast (update ast :children (fn [c] (vec (keep #(elide-ast-nodes % elision-predicate) c))))]\n        (if (seq (:children new-ast))\n          new-ast\n          (dissoc new-ast :children))))))\n\n(defn elide-query-nodes\n  \"Remove items from a query when the query element where the (node-predicate key) returns true. Commonly used with\n   a set as a predicate to elide specific well-known UI-only paths.\"\n  [query node-predicate]\n  (-> query eql/query->ast (elide-ast-nodes node-predicate) eql/ast->query))\n\n(defn load-params*\n  \"Internal function to validate and process the parameters of `load` and `load-action`.\"\n  [app server-property-or-ident class-or-factory {:keys [target params marker post-mutation post-mutation-params without\n                                                         fallback focus ok-action post-action error-action remote\n                                                         abort-id update-query]\n                                                  :or   {remote :remote marker false}}]\n  {:pre [(or (nil? target) (vector? target))\n         (or (nil? post-mutation) (symbol? post-mutation))\n         (or (nil? post-mutation-params) (map? post-mutation-params))\n         (or (nil? params) (map? params))\n         (or (eql/ident? server-property-or-ident) (keyword? server-property-or-ident))]}\n  (let [state-map         (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n        transformed-query (if class-or-factory\n                            (cond-> (rc/get-query class-or-factory state-map)\n                              (set? without) (elide-query-nodes without)\n                              focus (eql/focus-subquery focus)\n                              update-query update-query)\n                            nil)\n        query             (cond\n                            (and class-or-factory (map? params)) `[({~server-property-or-ident ~transformed-query} ~params)]\n                            class-or-factory [{server-property-or-ident transformed-query}]\n                            (map? params) [(list server-property-or-ident params)]\n                            :else [server-property-or-ident])\n        marker            (if (true? marker)\n                            (do\n                              (log/warn \"Boolean load marker no longer supported. See https://book.fulcrologic.com/#warn-boolean-marker-not-supported\")\n                              false)\n                            marker)]\n    (when (and target (not (targeting/special-target? target)) (= 2 (count target)))\n      (log/warn \"Data load targets of two elements imply that you are targeting a table entry. That is probably\"\n        \"incorrect. Normalization targets tables. Targeting is for creating missing edges, which are usually 3-tuples. See https://book.fulcrologic.com/#warn-data-load-targets-table\"))\n    {:query                query\n     :source-key           server-property-or-ident\n     :remote               remote\n     :target               target\n     :ok-action            ok-action\n     :error-action         error-action\n     :post-action          post-action\n     :post-mutation        post-mutation\n     :post-mutation-params post-mutation-params\n     :fallback             fallback\n     :marker               marker\n     :abort-id             abort-id}))\n\n(defn set-load-marker!\n  \"Adds a load marker at the given `marker` id to df/marker-table with the given status.\n\n  NOTE: You must query for the marker table in any component that wants to show activity.\"\n  [app marker status]\n  (when marker\n    (let [{:com.fulcrologic.fulcro.application/keys [state-atom]} app\n          render! (ah/app-algorithm app :schedule-render!)]\n      (log/debug \"Setting load marker\")\n      (swap! state-atom assoc-in [marker-table marker] {:status status})\n      ;; FIXME: Test refresh for this without the force root...it should work without it if ppl properly query for the marker table.\n      (render! app {:force-root? true}))))\n\n(defn remove-load-marker!\n  \"Removes the load marker with the given `marker` id from the df/marker-table.\"\n  [app marker]\n  (when marker\n    (let [{:com.fulcrologic.fulcro.application/keys [state-atom]} app]\n      (log/debug \"Removing load marker\")\n      (swap! state-atom update marker-table dissoc marker))))\n\n(defn finish-load!\n  \"Default processing when a load finishes successfully (called internally).\n\n  Removes any load marker, then either:\n\n  - Runs the `ok-action` (if defined).\n  - Does normal post-processing (if the was no ok-action):\n       - Merges the load result\n       - Processes desired targets\n       - Runs the post-mutation (if defined)\n       - Runs the post-action (if defined)\"\n  [{:keys [app result transmitted-ast] :as env} {:keys [query ok-action post-mutation post-mutation-params\n                                                        post-action target marker source-key] :as params}]\n  (remove-load-marker! app marker)\n\n  (let [env (assoc env :load-params params)]\n    (if (fn? ok-action)\n      (do\n        (log/debug \"Skipping default merge and calling user-supplied ok-action.\")\n        (ok-action env))\n      (let [{:keys [body transaction]} result\n            mark-query  (or transaction (futil/ast->query transmitted-ast))\n            body        (merge/mark-missing body mark-query)\n            {:com.fulcrologic.fulcro.application/keys [state-atom]} app]\n        (swap! state-atom (fn [s]\n                            (cond-> (merge/merge* s query body)\n                              target (targeting/process-target source-key target))))\n        (when (symbol? post-mutation)\n          (log/debug \"Doing post mutation \" post-mutation)\n          (rc/transact! app `[(~post-mutation ~(or post-mutation-params {}))]))\n        (when (fn? post-action)\n          (log/debug \"Doing post action\")\n          (post-action env))))))\n\n(defn load-failed!\n  \"The normal internal processing of a load that has failed (error returned true).\n\n  Sets the load marker, if present, to :failed.\n\n  If an `error-action` was desired, it is used to process the rest of the failure.\n\n  The `env` will include the network `:result` and the original load options as `:load-params`.\n\n  *Otherwise*, this function will:\n\n  - Trigger the global error action (if defined on the app) (arg is env as described above)\n  - Trigger any fallback for the load. (params are the env described above)\n  \"\n  [{:keys [app] :as env} {:keys [error-action marker fallback] :as params}]\n  (log/debug \"Running load failure logic.\")\n  (set-load-marker! app marker :failed)\n  (let [env (assoc env :load-params params)]\n    (if (fn? error-action)\n      (do\n        (log/debug \"Skipping default load error action\")\n        (error-action env))\n      (do\n        (when-let [global-error-action (ah/app-algorithm app :global-error-action)]\n          (global-error-action env))\n        (when (symbol? fallback)\n          (rc/transact! app `[(~fallback ~env)]))))))\n\n(defmethod m/mutate `internal-load! [{:keys [ast] :as env}]\n  (let [params     (get ast :params)\n        {:keys [remote query marker]} params\n        remote-key (or remote :remote)]\n    (log/debug \"Loading \" remote \" query:\" query)\n    (cond-> {:action        (fn [{:keys [app]}] (set-load-marker! app marker :loading))\n             :result-action (fn [{:keys [result app] :as env}]\n                              (let [remote-error? (ah/app-algorithm app :remote-error?)]\n                                (if (remote-error? result)\n                                  (load-failed! env params)\n                                  (finish-load! env params))))\n             remote-key     (fn [_]\n                              (eql/query->ast query))})))\n\n(defn load!\n  \"Load data from the server.\n\n  This function triggers a server interaction and normalizes the server response into your app state database. During\n  operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n  components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n  state root (which is the default).\n\n  The server will receive a query of the form: [({server-property (comp/get-query class-or-factory)} params)], which\n  a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n  instructions on parsing queries in the developer's guide.\n\n  Parameters:\n  - `app-or-comp` : A component instance or Fulcro application\n  - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n  you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n  - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n    class-or-factory can be nil, in which case the resulting server query will not be a join.\n  - `config` : A map of load configuration parameters.\n\n  Config (all optional):\n  - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n    Can also be special targets (multiple-targets, append-to,\n    prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n    When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n  - `initialize` - REMOVED. Use component pre-merge instead.\n  - `remote` - Optional. Keyword name of the remote that this load should come from.\n  - `params` - Optional parameters to add to the generated query\n  - `marker` - ID of marker. Normalizes a load marker into app state so you can see progress.\n  - `refresh` - A list of things in the UI to refresh. Depends on rendering optimization.\n  - `focus` - Focus the query along a path. See eql/focus-subquery.\n  - `without` - A set of keys to remove (recursively) from the query.\n  - `update-query` - A general-purpose function that can transform the component query before sending to remote. See also\n     the application's `:global-eql-transform` option.\n     For example, to focus a subquery using update-query: `{:update-query #(eql/focus-subquery % [:my {:sub [:query]}])}`\n     Removing properties (like previous :without option): `{:update-query #(df/elide-query-nodes % #{:my :elisions})}`\n  - `abort-id` - Set a unique key. If supplied, then the load can be cancelled via that abort ID.\n  - `parallel` - Send the load out-of-order (immediately) without waiting for other loads in progress.\n  - `post-mutation` - A mutation (symbol) to run *after* the data is merged. Note, if target is supplied be sure your post mutation\n    should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n  - `post-mutation-params` - An optional map that will be passed to the post-mutation when it is called.\n  - `post-action` - A lambda that will get a mutation env parameter `(fn [env] ...)`. Called after success, like post-mutation\n    (and after post-mutation if also defined). `env` will include the original `:load-params` and raw network layer `:result`. If you\n    want the post behavior to act as a top-level mutation, then prefer `post-mutation`. The action can also call `transact!`.\n  - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be like a mutation `env`, and will\n    include a `:result` key with the real result from the server, along with the original `:load-params`.\n\n  Special-purpose config options:\n\n  The config options can also include the following things that completely override behaviors of other (respons-processing) options,\n  and should only be used in very advanced situations where you know what you are doing:\n\n  - `ok-action` - WARNING: OVERRIDES ALL DEFAULT OK BEHAVIOR (except load marker removal)! A lambda that will receive an env parameter `(fn [env] ...)` that\n    includes the `:result` and original `:load-params`.\n  - `error-action` - WARNING: OVERRIDES ALL DEFAULT ERROR BEHAVIOR (except load marker update). A lambda that will receive an `env`\n    that includes the `:result` and original `:load-params`.\n  \"\n  ([app-or-comp server-property-or-ident class-or-factory] (load! app-or-comp server-property-or-ident class-or-factory {}))\n  ([app-or-comp server-property-or-ident class-or-factory config]\n   (let [app           (rc/any->app app-or-comp)\n         txn-options   (get config ::txn/options {})\n         {:keys [load-marker-default query-transform-default load-mutation]} (-> app :com.fulcrologic.fulcro.application/config)\n         {:keys [parallel refresh] :as config} (merge\n                                                 (cond-> {:marker load-marker-default :parallel false :refresh [] :without #{}}\n                                                   query-transform-default (assoc :update-query query-transform-default))\n                                                 config)\n         load-sym      (or load-mutation `internal-load!)\n         mutation-args (load-params* app server-property-or-ident class-or-factory config)\n         abort-id      (:abort-id mutation-args)]\n     (when query-transform-default\n       (log/warn \"Query-transform-default is a dangerous option that can break general merge behaviors. Do not use it. See https://book.fulcrologic.com/#warn-dont-use-query-transform-default\"))\n     (rc/transact! app `[(~load-sym ~mutation-args)]\n       (cond-> txn-options\n         (seq refresh) (assoc :refresh refresh)\n         (boolean? parallel) (assoc :parallel? parallel)\n         abort-id (assoc ::txn/abort-id abort-id))))))\n\n(defn load-field!\n  \"Load a field of the current component. Runs `prim/transact!`.\n\n  Parameters\n  - `component`: The component (**instance**, not class). This component MUST have an Ident.\n  - `field`: A field on the component's query that you wish to load. If `field` is a *vector* of keywords then\n  this function will load all of the fields specified.\n  - `options` : A map of load options. See `load`.\n\n  WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n  nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n  a component that has a dynamic query unless you can base it on the original static query.\n  \"\n  [component field-or-fields options]\n  (let [app          (rc/any->app component)\n        {:keys [parallel update-query]} options\n        ident        (rc/get-ident component)\n        update-query (fn [q]\n                       (cond-> (eql/focus-subquery q (if (vector? field-or-fields)\n                                                       field-or-fields\n                                                       [field-or-fields]))\n                         update-query (update-query)))\n        params       (load-params* app ident component (assoc options\n                                                         :update-query update-query\n                                                         :source-key (rc/get-ident component)))\n        abort-id     (:abort-id params)]\n    (rc/transact! app [(list `internal-load! params)]\n      (cond-> {}\n        (boolean? parallel) (assoc :parallel? parallel)\n        abort-id (assoc ::txn/abort-id abort-id)))))\n\n(defn refresh!\n  ([component load-options]\n   (load! component (rc/get-ident component) component load-options))\n  ([component]\n   (load! component (rc/get-ident component) component)))\n\n(def load \"DEPRECATED. Use `load!`\" load!)\n(def load-field \"DEPRECATED. Use `load-field!`\" load-field!)\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.data-fetch/data-state?","state","cljs.core/map?","cljs.core/contains?","com.fulcrologic.fulcro.data-fetch/load-marker?","x","com.fulcrologic.fulcro.data-fetch/ready?","marker","cljs.core._EQ_","com.fulcrologic.fulcro.data-fetch/loading?","com.fulcrologic.fulcro.data-fetch/failed?","com.fulcrologic.fulcro.data-fetch/marker-table","p__47160","map__47161","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.data-fetch/elide-ast-nodes","key","union-key","children","ast","elision-predicate","union-elision?","or__5045__auto__","and__5043__auto__","cljs.core/count","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.pr_str","new-ast","cljs.core.update","c","cljs.core/vec","p1__47159#","cljs.core.keep","cljs.core/seq","cljs.core.dissoc","com.fulcrologic.fulcro.data-fetch/elide-query-nodes","query","node-predicate","edn-query-language.core/query->ast","edn-query-language.core/ast->query","p__47180","map__47186","com.fulcrologic.fulcro.data-fetch/load-params*","app","server-property-or-ident","class-or-factory","target","params","post-mutation","post-mutation-params","without","fallback","focus","ok-action","post-action","error-action","remote","abort-id","update-query","state-map","cljs.core/deref","transformed-query","G__47202","com.fulcrologic.fulcro.raw.components.get_query","cljs.core/set?","edn-query-language.core/focus-subquery","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","com.fulcrologic.fulcro.algorithms.data-targeting/special-target?","com.fulcrologic.fulcro.data-fetch/set-load-marker!","status","map__47240","state-atom","render!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","cljs.core.swap_BANG_","cljs.core/assoc-in","G__47244","G__47245","com.fulcrologic.fulcro.data-fetch/remove-load-marker!","map__47247","cljs.core/update","cljs.core/dissoc","p__47256","p__47257","map__47258","map__47259","com.fulcrologic.fulcro.data-fetch/finish-load!","result","transmitted-ast","env","source-key","cljs.core.assoc","cljs.core/fn?","map__47268","map__47269","body","transaction","mark-query","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","com.fulcrologic.fulcro.algorithms.merge/mark-missing","s","G__47275","com.fulcrologic.fulcro.algorithms.merge.merge_STAR_","com.fulcrologic.fulcro.algorithms.data_targeting.process_target","cljs.core/Symbol","com.fulcrologic.fulcro.raw.components.transact_BANG_","p__47312","p__47313","map__47319","map__47320","com.fulcrologic.fulcro.data-fetch/load-failed!","temp__5753__auto__","global-error-action","com.fulcrologic.fulcro.mutations/mutate","p__47326","map__47327","map__47328","remote-key","G__47330","p__47331","map__47332","p__47333","map__47334","remote-error?","_","var_args","G__47339","com.fulcrologic.fulcro.data-fetch/load!","js/Error","app-or-comp","com.fulcrologic.fulcro.data_fetch.load_BANG_","config","map__47343","map__47344","com.fulcrologic.fulcro.raw.components/any->app","txn-options","load-marker-default","query-transform-default","load-mutation","parallel","refresh","cljs.core.merge","G__47345","load-sym","mutation-args","G__47349","cljs.core/boolean?","com.fulcrologic.fulcro.data-fetch/load-field!","component","field-or-fields","options","map__47365","ident","com.fulcrologic.fulcro.raw.components.get_ident","q","G__47369","cljs.core/vector?","G__47379","G__47385","com.fulcrologic.fulcro.data-fetch/refresh!","load-options","com.fulcrologic.fulcro.data-fetch/load","com.fulcrologic.fulcro.data-fetch/load-field"]],"~:used-vars",["^I",["~$com.fulcrologic.fulcro.algorithms.merge/mark-missing","~$cljs.core/--destructure-map","~$cljs.core/keep","~$com.fulcrologic.fulcro.data-fetch/load!","~$com.fulcrologic.fulcro.algorithms.data-targeting/process-target","~$com.fulcrologic.fulcro.data-fetch/load","~$cljs.core/boolean?","~$edn-query-language.core/query->ast","~$com.fulcrologic.fulcro.raw.components/get-ident","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$cljs.core/vector?","~$com.fulcrologic.fulcro.data-fetch/data-state?","~$cljs.core/=","~$com.fulcrologic.fulcro.data-fetch/failed?","~$cljs.core/array-map","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.mutations/mutate","~$com.fulcrologic.fulcro.data-fetch/refresh!","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/apply","~$com.fulcrologic.fulcro.data-fetch/load-field!","~$com.fulcrologic.fulcro.data-fetch/elide-ast-nodes","~$com.fulcrologic.fulcro.data-fetch/set-load-marker!","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.data-fetch/load-marker?","~$cljs.core/Delay","~$cljs.core/concat","~$cljs.core/pr-str","~$com.fulcrologic.fulcro.data-fetch/marker-table","~$com.fulcrologic.fulcro.raw.components/any->app","~$com.fulcrologic.fulcro.data-fetch/finish-load!","~$com.fulcrologic.fulcro.data-fetch/elide-query-nodes","~$cljs.core/contains?","~$cljs.core/map?","~$taoensso.timbre/*config*","~$cljs.core/update","~$cljs.core/fn?","~$cljs.core/List","~$cljs.core/swap!","~$cljs.core/-add-method","~$cljs.core/get","~$com.fulcrologic.fulcro.raw.components/transact!","~$com.fulcrologic.fulcro.algorithms.data-targeting/special-target?","~$cljs.core/set?","~$com.fulcrologic.fulcro.data-fetch/remove-load-marker!","~$com.fulcrologic.fulcro.data-fetch/load-field","~$cljs.core/vec","~$com.fulcrologic.fulcro.data-fetch/ready?","~$cljs.core/sequence","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.data-fetch/load-params*","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/Symbol","~$com.fulcrologic.fulcro.algorithms.merge/merge*","~$edn-query-language.core/ast->query","~$edn-query-language.core/focus-subquery","~$cljs.core/merge","~$com.fulcrologic.fulcro.raw.components/get-query","~$js/Error","~$com.fulcrologic.fulcro.data-fetch/loading?","~$com.fulcrologic.fulcro.data-fetch/load-failed!"]]],"~:cache-keys",["~#cmap",[["^1L","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^11","^Z","^18","^T","^V","~$com.fulcrologic.fulcro.components"]]],["^1L","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.dom.HtmlElement"]]],["^1L","goog/async/freelist.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cljs/core/async/impl/ioc_helpers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$cljs.core.async.impl.protocols"]]],["^1L","goog/i18n/datetimesymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.i18n.cldrversion"]]],["^1L","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1L","expound/util.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^@"]]],["^1L","goog/crypt/crypt.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.asserts","~$goog.async.throwException"]]],["^1L","cljs/core/async.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3I","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1L","goog/timer/timer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.Promise","~$goog.events.EventTarget"]]],["^1L","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^V"]]],["^1L","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$goog.Uri"]]],["^1L","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$clojure.string","~$goog.string"]]],["^1L","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P"]]],["^1L","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^40"]]],["^1L","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1L","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3L","^3M","^3P","^3K","^3N","^3O"]]],["^1L","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3K"]]],["^1L","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P"]]],["^1L","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^V","^3[","^T","~$goog.object","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1L","expound/problems.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$expound.paths","^@"]]],["^1L","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3L","~$goog.reflect","^3K"]]],["^1L","goog/structs/prioritypool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1L","goog/async/run.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.async.WorkQueue","~$goog.debug.asyncStackTag","~$goog.async.nextTick","^3Q"]]],["^1L","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1L","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/async/workqueue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.async.FreeList","^3P"]]],["^1L","com/fulcrologic/fulcro/dom/events.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z"]]],["^1L","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1L","goog/promise/resolver.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^40","~$goog.string.StringBuffer"]]],["^1L","goog/structs/priorityqueue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.structs.Heap"]]],["^1L","goog/net/xhrio.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.Timer","^3W","^3P","~$goog.collections.maps","^4G","^3Y","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^47","^40","~$goog.uri.utils","^42"]]],["^1L","goog/promise/thenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/collections/iters.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$cognitect.transit","^G","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1L","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^19"]]],["^1L","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z"]]],["^1L","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^47"]]],["^1L","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3L","^3K"]]],["^1L","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3[","^40","^4Q"]]],["^1L","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$clojure.set","^@","^G","^T","^V"]]],["^1L","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^4M","^4N","^4O","^4L","^3W","^40","^4Q"]]],["^1L","expound/alpha.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$expound.problems","^@","^3[","^52","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1L","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3[","~$goog.i18n.DateTimeFormat","~$taoensso.encore","~$taoensso.timbre.appenders.core"]]],["^1L","goog/net/wrapperxmlhttpfactory.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1L","goog/date/utcdatetime.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1L","goog/i18n/nativelocaledigits.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/events/eventtarget.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.Disposable","^3P","~$goog.events","~$goog.events.Event","^4J","^4K","^47"]]],["^1L","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^3[","~$expound.alpha"]]],["^1L","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1L","expound/ansi.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3["]]],["^1L","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3C",["^ ","^3D",2,"^3E",["^I",[0,1]],"^3F",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1L","shadow/js.js"],["409b887858ac3838697e7a1c6e019c62bc4e5814","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P"]]],["^1L","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3[","^52","~$cljs.reader","~$cljs.tools.reader.edn","^47","^3W","^40","~$goog.string.format","^4Q","^5A","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^4X","^4W","~$taoensso.truss"]]],["^1L","goog/structs/set.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map"]]],"~:SHADOW-TIMESTAMP",[1689298966000,1689298966000,1689298966000],["^5I","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","1df918e8981877c2759388dfae58a059e089860d","^3C",["^ ","^3D",1,"^3E",["^I",[]],"^3F",["^5J"]]],["^1L","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3[","^58"]]],["^1L","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^4>"]]],["^1L","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.events.ListenableKey"]]],["^1L","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.fs.blob","^43","~$goog.html.SafeScript","~$goog.html.trustedtypes","^45","^46"]]],["^1L","cljs/core/async/impl/channels.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3I","^3U","^3S"]]],["^1L","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","~$goog.events.Listener","^47"]]],["^1L","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$taoensso.truss.impl"]]],["^1L","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z"]]],["^1L","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","com/fulcrologic/fulcro/algorithms/merge.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^X","^3G","^S","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^18","^T","^V","^51"]]],["^1L","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^@"]]],["^1L","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cljs/core/async/impl/dispatch.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3S","^4C"]]],["^1L","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^45","~$goog.html.SafeUrl","^46","^3P","^3K"]]],["^1L","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5Z","~$goog.html.SafeStyle","^64","^44","~$goog.html.uncheckedconversions","^45","^3K"]]],["^1L","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.dom.TagName","^3P","~$goog.dom.element"]]],["^1L","goog/i18n/dayperiodsymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","expound/paths.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^@","^55"]]],["^1L","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^52"]]],["^1L","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z"]]],["^1L","goog/useragent/product.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^4;","^4=","^42"]]],["^1L","cljs/core/async/impl/protocols.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z"]]],["^1L","goog/net/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/structs/map.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.collections.iters","~$goog.iter","~$goog.iter.Iterator","~$goog.iter.es6"]]],["^1L","goog/net/xhriopool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^5P","~$goog.structs.PriorityPool"]]],["^1L","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/date/date.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.i18n.DateTimeSymbols","^40"]]],["^1L","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^45","^5Z","^69","~$goog.html.SafeStyleSheet","^64","^6;","^44","^46","^3P","^4;","^3W","^47","^3K","~$goog.dom.tags","^5["]]],["^1L","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^47"]]],["^1L","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^47","^52","^3[","^19","^63","^18","^S","~$com.fulcrologic.fulcro.algorithms.transit","^T","^58","^V"]]],["^1L","goog/structs/queue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W"]]],["^1L","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","^3K","^3L"]]],["^1L","com/fulcrologic/fulcro/inspect/transit.cljs"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^50","~$com.cognitect.transit.types","^6E","^V"]]],["^1L","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^4E","^6F"]]],["^1L","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^47","^4P","^5N","^4Q"]]],["^1L","com/fulcrologic/fulcro/mutations.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^10","~$com.fulcrologic.fulcro.dom.events","^G","^T","^V","^58","^@","^18","^X","^16","^S","^51","^3["]]],["^1L","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","^3P","^65","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^6;","~$goog.dom.safe","^68","^6:","~$goog.math.Coordinate","~$goog.math.Size","^47","^40","^45","~$goog.string.Unicode","^42"]]],["^1L","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","~$com.fulcrologic.guardrails.registry","^5D"]]],["^1L","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[2]],"^3F",["^11","^Z","^47","~$module$node_modules$react$index","^T","^@","^V","^19","^3[","^18","^63","^S","^10","^G","^52"]]],["^1L","com/fulcrologic/fulcro/specs.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^@","^G","^18","^T"]]],["^1L","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.debug.Error","^6K"]]],["^1L","cljs/core/async/impl/buffers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3I"]]],["^1L","goog/i18n/timezone.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","^47","^40"]]],["^1L","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","^3P","^4T","^40","^5T","^4[","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","goog/i18n/cldrversion.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/net/errorcode.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3M"]]],["^1L","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/iter/es6.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.iter.Iterable","^6?"]]],["^1L","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^4I","^42"]]],["^1L","goog/debug/asyncstacktag.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P"]]],["^1L","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/promise/promise.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.Thenable","^3P","^4F","~$goog.async.run","^3Q","^6R","^4B","^67","~$goog.promise.Resolver"]]],["^1L","cljs/core/async/impl/timers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3I","^3R","^3U"]]],["^1L","cljs/spec/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^47","^19","~$cljs.spec.gen.alpha","^3["]]],["^1L","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",[]]],["^1L","goog/json/hybrid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.json"]]],["^1L","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","^47"]]],["^1L","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^4M","^3[","~$cljs.tools.reader.impl.inspect"]]],["^1L","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^G","^B","^V"]]],["^1L","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^40","^4Q"]]],["^1L","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^V","^19"]]],["^1L","goog/structs/pool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^5@","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1L","com/fulcrologic/fulcro/inspect/diff.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^@"]]],["^5I","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^3C",["^ ","^3D",0,"^3E",["^I",[]],"^3F",["^5J"]]],["^1L","goog/net/httpstatus.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/i18n/datetimeformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^5<","~$goog.date.UtcDateTime","^6B","~$goog.i18n.DayPeriods","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^40"]]],["^1L","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6G","^6F","~$goog.math.Long"]]],["^1L","goog/structs/heap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.structs.Node","^47"]]],["^1L","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P"]]],["^1L","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6L","^6:","^45","^3K"]]],["^1L","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6G","~$com.cognitect.transit.eq","^77"]]],["^1L","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3K","^3O"]]],["^1L","expound/printer.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^3[","^@","^D","^52","^55","^56","^4:","^19","^5O","^40"]]],["^1L","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^52","^@","^S","^51","^63","^18","~$com.fulcrologic.fulcro.algorithms.scheduling","^12","^3G","~$com.fulcrologic.fulcro.specs","~$com.fulcrologic.fulcro.inspect.inspect-client","^G","^T","^58","^V"]]],["^1L","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6G"]]],["^1L","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","~$goog.debug.errorcontext"]]],["^1L","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.math"]]],["^1L","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^4N","^40","^4Q"]]],["^1L","goog/iter/iter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3W","^3P","~$goog.debug","^67","^7>"]]],["^1L","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","~$goog.flags"]]],["^1L","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^4G","~$goog.dom","^6;","^67","^4;","^4<"]]],["^1L","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6K","^6;"]]],["^1L","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^68","^5Z","^69","^6C","^64","^44","^45","^3K"]]],["^1L","com/fulcrologic/fulcro/data_fetch.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^19","^18","^X","^14","^16","^10","^12","^@","^G","^T","^V","^S"]]],["^1L","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6H"]]],["^1L","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^5@","~$goog.events.EventId"]]],["^1L","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^4L","^4M","^4N"]]],["^1L","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^77","~$goog.math.Integer","^40","^47","^3W","^3Z","^4Q"]]],["^1L","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6G","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^6F","^79","^4D","^4E"]]],["^1L","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^45","^46","^5[","^3P"]]],["^1L","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^7?"]]],["^1L","goog/async/throwexception.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^45","^69","^46","^47","^3P","^3K"]]],["^1L","goog/structs/collection.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^7?","^5B","~$goog.events.EventType","^4>","^42"]]],["^1L","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^4>"]]],["^1L","goog/structs/node.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^42"]]],["^1L","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z"]]],["^1L","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^40"]]],["^1L","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^46"]]],["^1L","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^5G"]]],["^1L","goog/json/json.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/i18n/localefeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^6G","^4E","~$com.cognitect.transit.handlers","^6F","^6H","^77"]]],["^1L","goog/net/xmlhttpfactory.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^5:"]]],["^1L","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^52","^T","^V"]]],["^1L","goog/net/xmlhttp.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","~$goog.net.WrapperXmlHttpFactory","^5;"]]],["^1L","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^T","^S","^47","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^58","^V"]]],["^1L","goog/net/xhrlike.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11"]]],["^1L","cognitect/transit.cljs"],["98d11d81caee82f97b9417025750b785fb6ecb16","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^Z","^52","~$com.cognitect.transit","^6F","^79","^47","^77"]]],["^1L","goog/crypt/base64.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3C",["^ ","^3D",null,"^3E",["^I",[]],"^3F",["^11","^3P","^48","^3K","^42","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async/impl/ioc_macros.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/problems.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1689258840000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/ioc_macros.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/paths.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1689292448000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm.clj",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1689292470000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm/utils.clj",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1689292470000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/mutex.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/buffers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/dispatch.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/ansi.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/printer.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/timers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1689292448000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/protocols.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/concurrent.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/exec/threadpool.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1689258840000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/dom/events.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/alpha.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/cognitect/transit-clj/1.0.329/transit-clj-1.0.329.jar!/cognitect/transit.clj",1689298965000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/util.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/channels.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/mutations.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/alpha.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1689292466000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Functions for issuing loads of subgraphs of data for your application. The primary functions of interest are\n  `load!` and `load-field!`. Fulcro's composed queries and idents allow these loads to automatically be normalized\n  and merged into your database. The data targeting support allows you to then *join* that new subgraph to the\n  existing UI data graph. This process is the central topic to understand in Fulcro, and it is to your advantage\n  to study the concepts of Fulcro idents and query composition carefully.","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",1,"^9",5,"^:",1,"^;",38],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G"],"^H",["^I",["^J"]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^S","^T","^T","^?","^@","^G","^G","^U","^V","^W","^X","^Y","^T","^Z","^Z","^[","^10","^11","^11","^X","^X","~$m","^12","^13","^14","^12","^12","~$s","^@","^S","^S","^15","^16","^14","^14","^V","^V","^10","^10","^16","^16","^17","^18","^@","^@","^19","^19","^18","^18"],"^1:",["^I",["^1;"]],"~:shadow/js-access-global",["^I",["Error"]],"^1<",["^ ","^1=","^19","^1>","^19","^F","^G","^1?","^G"],"~:defs",["^ ","~$finish-load!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",140,"^9",7,"^:",140,"^;",19,"~:arglists",["^1B",["~$quote",["^1B",[[["^ ","~:keys",["~$app","~$result","~$transmitted-ast"],"^1G","~$env"],["^ ","^:5",["~$query","~$ok-action","~$post-mutation","~$post-mutation-params","~$post-action","~$target","~$marker","~$source-key"],"^1G","~$params"]]]]]],"^6","Default processing when a load finishes successfully (called internally).\n\n  Removes any load marker, then either:\n\n  - Runs the `ok-action` (if defined).\n  - Does normal post-processing (if the was no ok-action):\n       - Merges the load result\n       - Processes desired targets\n       - Runs the post-mutation (if defined)\n       - Runs the post-action (if defined)"],"^K","^2L","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",19,"~:method-params",["^1B",[["~$p__47256","~$p__47257"]]],"~:protocol-impl",null,"~:arglists-meta",["^1B",[null,null]],"^9",1,"~:variadic?",false,"^8",140,"~:ret-tag",["^I",["~$any","~$clj-nil"]],"^:",140,"~:max-fixed-arity",2,"~:fn-var",true,"^:3",["^1B",["^:4",["^1B",[[["^ ","^:5",["^:6","^:7","^:8"],"^1G","^:9"],["^ ","^:5",["^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1G","^:B"]]]]]],"^6","Default processing when a load finishes successfully (called internally).\n\n  Removes any load marker, then either:\n\n  - Runs the `ok-action` (if defined).\n  - Does normal post-processing (if the was no ok-action):\n       - Merges the load result\n       - Processes desired targets\n       - Runs the post-mutation (if defined)\n       - Runs the post-action (if defined)"],"~$failed?",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",42,"^9",8,"^:",42,"^;",15,"^:3",["^1B",["^:4",["^1B",[["^:@"]]]]],"^6","Is the given load marker indicate failed?\n\n  WARNING: This function is current unimplemented and will be removed.  The new way of dealing with failure is to\n  define an `error-action` for the load in question and modify your own state. You can also override"],"^K","^29","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",15,"^:C",["^1B",[["^:@"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",42,"^:I","~$boolean","^:",42,"^:L",1,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:@"]]]]],"^6","Is the given load marker indicate failed?\n\n  WARNING: This function is current unimplemented and will be removed.  The new way of dealing with failure is to\n  define an `error-action` for the load in question and modify your own state. You can also override"],"~$refresh!",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",324,"^9",7,"^:",324,"^;",15,"^:3",["^1B",["^:4",["^1B",[["~$component","~$load-options"],["^:Q"]]]]],"~:top-fn",["^ ","^:H",false,"~:fixed-arity",2,"^:L",2,"^:C",[["^:Q","^:R"],["^:Q"]],"^:3",["^1B",[["^:Q","^:R"],["^:Q"]]],"^:G",["^1B",[null,null]]]],"^K","^2=","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",15,"^:S",["^ ","^:H",false,"^:T",2,"^:L",2,"^:C",[["^:Q","^:R"],["^:Q"]],"^:3",["^1B",[["^:Q","^:R"],["^:Q"]]],"^:G",["^1B",[null,null]]],"^:C",[["^:Q","^:R"],["^:Q"]],"^:F",null,"^:T",2,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"~:methods",[["^ ","^:T",2,"^:H",false,"~:tag",["^I",["^:J","^:K"]]],["^ ","^:T",1,"^:H",false,"^:V","^:J"]],"^8",324,"^:",324,"^:L",2,"^:M",true,"^:3",["^1B",[["^:Q","^:R"],["^:Q"]]]],"~$load-field!",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",293,"^9",7,"^:",293,"^;",18,"^:3",["^1B",["^:4",["^1B",[["^:Q","~$field-or-fields","~$options"]]]]],"^6","Load a field of the current component. Runs `prim/transact!`.\n\n  Parameters\n  - `component`: The component (**instance**, not class). This component MUST have an Ident.\n  - `field`: A field on the component's query that you wish to load. If `field` is a *vector* of keywords then\n  this function will load all of the fields specified.\n  - `options` : A map of load options. See `load`.\n\n  WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n  nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n  a component that has a dynamic query unless you can base it on the original static query.\n  "],"^K","^2B","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",18,"^:C",["^1B",[["^:Q","^:X","^:Y"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",293,"^:I",["^I",["^:J","^:K"]],"^:",293,"^:L",3,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:Q","^:X","^:Y"]]]]],"^6","Load a field of the current component. Runs `prim/transact!`.\n\n  Parameters\n  - `component`: The component (**instance**, not class). This component MUST have an Ident.\n  - `field`: A field on the component's query that you wish to load. If `field` is a *vector* of keywords then\n  this function will load all of the fields specified.\n  - `options` : A map of load options. See `load`.\n\n  WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n  nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n  a component that has a dynamic query unless you can base it on the original static query.\n  "],"~$load!",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",216,"^9",7,"^:",216,"^;",12,"^:3",["^1B",["^:4",["^1B",[["~$app-or-comp","~$server-property-or-ident","~$class-or-factory"],["^:[","^;0","^;1","~$config"]]]]],"^6","Load data from the server.\n\n  This function triggers a server interaction and normalizes the server response into your app state database. During\n  operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n  components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n  state root (which is the default).\n\n  The server will receive a query of the form: [({server-property (comp/get-query class-or-factory)} params)], which\n  a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n  instructions on parsing queries in the developer's guide.\n\n  Parameters:\n  - `app-or-comp` : A component instance or Fulcro application\n  - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n  you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n  - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n    class-or-factory can be nil, in which case the resulting server query will not be a join.\n  - `config` : A map of load configuration parameters.\n\n  Config (all optional):\n  - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n    Can also be special targets (multiple-targets, append-to,\n    prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n    When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n  - `initialize` - REMOVED. Use component pre-merge instead.\n  - `remote` - Optional. Keyword name of the remote that this load should come from.\n  - `params` - Optional parameters to add to the generated query\n  - `marker` - ID of marker. Normalizes a load marker into app state so you can see progress.\n  - `refresh` - A list of things in the UI to refresh. Depends on rendering optimization.\n  - `focus` - Focus the query along a path. See eql/focus-subquery.\n  - `without` - A set of keys to remove (recursively) from the query.\n  - `update-query` - A general-purpose function that can transform the component query before sending to remote. See also\n     the application's `:global-eql-transform` option.\n     For example, to focus a subquery using update-query: `{:update-query #(eql/focus-subquery % [:my {:sub [:query]}])}`\n     Removing properties (like previous :without option): `{:update-query #(df/elide-query-nodes % #{:my :elisions})}`\n  - `abort-id` - Set a unique key. If supplied, then the load can be cancelled via that abort ID.\n  - `parallel` - Send the load out-of-order (immediately) without waiting for other loads in progress.\n  - `post-mutation` - A mutation (symbol) to run *after* the data is merged. Note, if target is supplied be sure your post mutation\n    should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n  - `post-mutation-params` - An optional map that will be passed to the post-mutation when it is called.\n  - `post-action` - A lambda that will get a mutation env parameter `(fn [env] ...)`. Called after success, like post-mutation\n    (and after post-mutation if also defined). `env` will include the original `:load-params` and raw network layer `:result`. If you\n    want the post behavior to act as a top-level mutation, then prefer `post-mutation`. The action can also call `transact!`.\n  - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be like a mutation `env`, and will\n    include a `:result` key with the real result from the server, along with the original `:load-params`.\n\n  Special-purpose config options:\n\n  The config options can also include the following things that completely override behaviors of other (respons-processing) options,\n  and should only be used in very advanced situations where you know what you are doing:\n\n  - `ok-action` - WARNING: OVERRIDES ALL DEFAULT OK BEHAVIOR (except load marker removal)! A lambda that will receive an env parameter `(fn [env] ...)` that\n    includes the `:result` and original `:load-params`.\n  - `error-action` - WARNING: OVERRIDES ALL DEFAULT ERROR BEHAVIOR (except load marker update). A lambda that will receive an `env`\n    that includes the `:result` and original `:load-params`.\n  ","^:S",["^ ","^:H",false,"^:T",4,"^:L",4,"^:C",[["^:[","^;0","^;1"],["^:[","^;0","^;1","^;2"]],"^:3",["^1B",[["^:[","^;0","^;1"],["^:[","^;0","^;1","^;2"]]],"^:G",["^1B",[null,null]]]],"^K","^1[","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",12,"^:S",["^ ","^:H",false,"^:T",4,"^:L",4,"^:C",[["^:[","^;0","^;1"],["^:[","^;0","^;1","^;2"]],"^:3",["^1B",[["^:[","^;0","^;1"],["^:[","^;0","^;1","^;2"]]],"^:G",["^1B",[null,null]]],"^:C",[["^:[","^;0","^;1"],["^:[","^;0","^;1","^;2"]],"^:F",null,"^:T",4,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^:U",[["^ ","^:T",3,"^:H",false,"^:V","^:J"],["^ ","^:T",4,"^:H",false,"^:V",["^I",["^:J","^:K"]]]],"^8",216,"^:",216,"^:L",4,"^:M",true,"^:3",["^1B",[["^:[","^;0","^;1"],["^:[","^;0","^;1","^;2"]]],"^6","Load data from the server.\n\n  This function triggers a server interaction and normalizes the server response into your app state database. During\n  operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n  components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n  state root (which is the default).\n\n  The server will receive a query of the form: [({server-property (comp/get-query class-or-factory)} params)], which\n  a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n  instructions on parsing queries in the developer's guide.\n\n  Parameters:\n  - `app-or-comp` : A component instance or Fulcro application\n  - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n  you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n  - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n    class-or-factory can be nil, in which case the resulting server query will not be a join.\n  - `config` : A map of load configuration parameters.\n\n  Config (all optional):\n  - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n    Can also be special targets (multiple-targets, append-to,\n    prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n    When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n  - `initialize` - REMOVED. Use component pre-merge instead.\n  - `remote` - Optional. Keyword name of the remote that this load should come from.\n  - `params` - Optional parameters to add to the generated query\n  - `marker` - ID of marker. Normalizes a load marker into app state so you can see progress.\n  - `refresh` - A list of things in the UI to refresh. Depends on rendering optimization.\n  - `focus` - Focus the query along a path. See eql/focus-subquery.\n  - `without` - A set of keys to remove (recursively) from the query.\n  - `update-query` - A general-purpose function that can transform the component query before sending to remote. See also\n     the application's `:global-eql-transform` option.\n     For example, to focus a subquery using update-query: `{:update-query #(eql/focus-subquery % [:my {:sub [:query]}])}`\n     Removing properties (like previous :without option): `{:update-query #(df/elide-query-nodes % #{:my :elisions})}`\n  - `abort-id` - Set a unique key. If supplied, then the load can be cancelled via that abort ID.\n  - `parallel` - Send the load out-of-order (immediately) without waiting for other loads in progress.\n  - `post-mutation` - A mutation (symbol) to run *after* the data is merged. Note, if target is supplied be sure your post mutation\n    should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n  - `post-mutation-params` - An optional map that will be passed to the post-mutation when it is called.\n  - `post-action` - A lambda that will get a mutation env parameter `(fn [env] ...)`. Called after success, like post-mutation\n    (and after post-mutation if also defined). `env` will include the original `:load-params` and raw network layer `:result`. If you\n    want the post behavior to act as a top-level mutation, then prefer `post-mutation`. The action can also call `transact!`.\n  - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be like a mutation `env`, and will\n    include a `:result` key with the real result from the server, along with the original `:load-params`.\n\n  Special-purpose config options:\n\n  The config options can also include the following things that completely override behaviors of other (respons-processing) options,\n  and should only be used in very advanced situations where you know what you are doing:\n\n  - `ok-action` - WARNING: OVERRIDES ALL DEFAULT OK BEHAVIOR (except load marker removal)! A lambda that will receive an env parameter `(fn [env] ...)` that\n    includes the `:result` and original `:load-params`.\n  - `error-action` - WARNING: OVERRIDES ALL DEFAULT ERROR BEHAVIOR (except load marker update). A lambda that will receive an `env`\n    that includes the `:result` and original `:load-params`.\n  "],"~$data-state?",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",22,"^9",8,"^:",22,"^;",19,"^:3",["^1B",["^:4",["^1B",[["~$state"]]]]],"^6","Is the given parameter a load marker?"],"^K","^27","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",19,"^:C",["^1B",[["^;4"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",22,"^:I","^:O","^:",22,"^:L",1,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^;4"]]]]],"^6","Is the given parameter a load marker?"],"~$ready?",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",34,"^9",8,"^:",34,"^;",14,"^:3",["^1B",["^:4",["^1B",[["^:@"]]]]],"^6","Is the given load marker ready for loading?"],"^K","^31","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",14,"^:C",["^1B",[["^:@"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",34,"^:I","^:O","^:",34,"^:L",1,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:@"]]]]],"^6","Is the given load marker ready for loading?"],"^J",["^ ","^K","^21","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",330,"^9",1,"^:",330,"^;",10,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",330,"^9",6,"^:",330,"^;",10],"^6","DEPRECATED. Use `load!`"],"~$load-params*",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",75,"^9",7,"^:",75,"^;",19,"^:3",["^1B",["^:4",["^1B",[["^:6","^;0","^;1",["^ ","^:5",["^:?","^:B","^:@","^:<","^:=","~$without","~$fallback","~$focus","^:;","^:>","~$error-action","~$remote","~$abort-id","~$update-query"],"~:or",["^ ","^;;","~:remote","^:@",false]]]]]]],"^6","Internal function to validate and process the parameters of `load` and `load-action`."],"^K","^35","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",19,"^:C",["^1B",[["^:6","^;0","^;1","~$p__47180"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",75,"^:I","~$cljs.core/IMap","^:",75,"^:L",4,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:6","^;0","^;1",["^ ","^:5",["^:?","^:B","^:@","^:<","^:=","^;7","^;8","^;9","^:;","^:>","^;:","^;;","^;<","^;="],"^;>",["^ ","^;;","^;?","^:@",false]]]]]]],"^6","Internal function to validate and process the parameters of `load` and `load-action`."],"~$elide-ast-nodes",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",56,"^9",7,"^:",56,"^;",22,"^:3",["^1B",["^:4",["^1B",[[["^ ","^:5",["~$key","~$union-key","~$children"],"^1G","~$ast"],"~$elision-predicate"]]]]],"^6","Remove items from a query (AST) that have a key that returns true for the elision-predicate"],"^K","^2C","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",22,"^:C",["^1B",[["~$p__47160","^;G"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",56,"^:I",["^I",["~$clj","^:J","^:K"]],"^:",56,"^:L",2,"^:M",true,"^:3",["^1B",["^:4",["^1B",[[["^ ","^:5",["^;C","^;D","^;E"],"^1G","^;F"],"^;G"]]]]],"^6","Remove items from a query (AST) that have a key that returns true for the elision-predicate"],"~$set-load-marker!",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",119,"^9",7,"^:",119,"^;",23,"^:3",["^1B",["^:4",["^1B",[["^:6","^:@","~$status"]]]]],"^6","Adds a load marker at the given `marker` id to df/marker-table with the given status.\n\n  NOTE: You must query for the marker table in any component that wants to show activity."],"^K","^2D","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",23,"^:C",["^1B",[["^:6","^:@","^;K"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",119,"^:I",["^I",["^:J","^:K"]],"^:",119,"^:L",3,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:6","^:@","^;K"]]]]],"^6","Adds a load marker at the given `marker` id to df/marker-table with the given status.\n\n  NOTE: You must query for the marker table in any component that wants to show activity."],"~$load-marker?",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",28,"^9",8,"^:",28,"^;",20,"^:3",["^1B",["^:4",["^1B",[["~$x"]]]]],"^6","Is the given parameter a load marker?"],"^K","^2F","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",20,"^:C",["^1B",[["~$x"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",28,"^:I","^:O","^:",28,"^:L",1,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["~$x"]]]]],"^6","Is the given parameter a load marker?"],"~$elide-query-nodes",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",69,"^9",7,"^:",69,"^;",24,"^:3",["^1B",["^:4",["^1B",[["^::","~$node-predicate"]]]]],"^6","Remove items from a query when the query element where the (node-predicate key) returns true. Commonly used with\n   a set as a predicate to elide specific well-known UI-only paths."],"^K","^2M","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",24,"^:C",["^1B",[["^::","^;N"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",69,"^:I",["^I",[null,"^;I","~$cljs.core/IVector","^:J","~$cljs.core/MetaFn","^:K"]],"^:",69,"^:L",2,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^::","^;N"]]]]],"^6","Remove items from a query when the query element where the (node-predicate key) returns true. Commonly used with\n   a set as a predicate to elide specific well-known UI-only paths."],"~$remove-load-marker!",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",132,"^9",7,"^:",132,"^;",26,"^:3",["^1B",["^:4",["^1B",[["^:6","^:@"]]]]],"^6","Removes the load marker with the given `marker` id from the df/marker-table."],"^K","^2Z","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",26,"^:C",["^1B",[["^:6","^:@"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",132,"^:I",["^I",[null,"^:J","^:K"]],"^:",132,"^:L",2,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:6","^:@"]]]]],"^6","Removes the load marker with the given `marker` id from the df/marker-table."],"~$loading?",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",38,"^9",8,"^:",38,"^;",16,"^:3",["^1B",["^:4",["^1B",[["^:@"]]]]],"^6","Is the given load marker loading?"],"^K","^3?","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",16,"^:C",["^1B",[["^:@"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",38,"^:I","^:O","^:",38,"^:L",1,"^:M",true,"^:3",["^1B",["^:4",["^1B",[["^:@"]]]]],"^6","Is the given load marker loading?"],"~$load-field",["^ ","^K","^2[","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",331,"^9",1,"^:",331,"^;",16,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",331,"^9",6,"^:",331,"^;",16],"^6","DEPRECATED. Use `load-field!`"],"~$marker-table",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",51,"^9",6,"^:",51,"^;",18],"^K","^2J","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",18,"^9",1,"^8",51,"^:",51,"^:V","~$cljs.core/Keyword","^6","The name of the table in which fulcro load markers are stored. You must query for this via a link query\n  `[df/marker-table '_]` in any component that needs to use them (and refresh) during loads."],"~$load-failed!",["^ ","^:2",null,"^5",["^ ","^7","com/fulcrologic/fulcro/data_fetch.cljc","^8",174,"^9",7,"^:",174,"^;",19,"^:3",["^1B",["^:4",["^1B",[[["^ ","^:5",["^:6"],"^1G","^:9"],["^ ","^:5",["^;:","^:@","^;8"],"^1G","^:B"]]]]]],"^6","The normal internal processing of a load that has failed (error returned true).\n\n  Sets the load marker, if present, to :failed.\n\n  If an `error-action` was desired, it is used to process the rest of the failure.\n\n  The `env` will include the network `:result` and the original load options as `:load-params`.\n\n  *Otherwise*, this function will:\n\n  - Trigger the global error action (if defined on the app) (arg is env as described above)\n  - Trigger any fallback for the load. (params are the env described above)\n  "],"^K","^3@","^7","com/fulcrologic/fulcro/data_fetch.cljc","^;",19,"^:C",["^1B",[["~$p__47312","~$p__47313"]]],"^:F",null,"^:G",["^1B",[null,null]],"^9",1,"^:H",false,"^8",174,"^:I",["^I",["^:J","^:K"]],"^:",174,"^:L",2,"^:M",true,"^:3",["^1B",["^:4",["^1B",[[["^ ","^:5",["^:6"],"^1G","^:9"],["^ ","^:5",["^;:","^:@","^;8"],"^1G","^:B"]]]]]],"^6","The normal internal processing of a load that has failed (error returned true).\n\n  Sets the load marker, if present, to :failed.\n\n  If an `error-action` was desired, it is used to process the rest of the failure.\n\n  The `env` will include the network `:result` and the original load options as `:load-params`.\n\n  *Otherwise*, this function will:\n\n  - Trigger the global error action (if defined on the app) (arg is env as described above)\n  - Trigger any fallback for the load. (params are the env described above)\n  "]],"^1@",["^ ","^?","^@","^G","^G","^U","^V","^Z","^Z","~$m","^12","^12","^12","~$s","^@","^V","^V","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1:",["^I",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","^;?","~:update-query","~:children","~:union-key","~:com.fulcrologic.fulcro.application/config","~:key","~:refresh","~:else","~:load-mutation","~:parallel","~:warn","~:fallback","~:marker","~:transmitted-ast","~:source-key","~:params","~:ast","~:debug","~:transaction","~:force-root?","~:error-action","~:ui.fulcro.client.data-fetch.load-markers/by-id","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:post-mutation","~:without","~:load-marker-default","~:loading","~:status","~:result","~:ok-action","~:app","~:post-mutation-params","~:remote-error?","~:focus","~:action","~:post-action","~:target","~:result-action","~:query","~:body","~:abort-id","~:global-error-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/options","~:parallel?","~:auto","~:p","~:load-params","~$com.fulcrologic.fulcro.data-fetch/internal-load!","~:failed","~:query-transform-default"]],"~:order",["^<J","^<I","^=2","^<C","^<3","^<1","^<0","^<8","~:p","^<[","^<S","^<W","^;?","^;[","^<9","^<:","^<=","^<B","^<F","^<G","^<L","^<N","^<P","^<R","^<E","^<5","^<<","^<U","^<D","^<?","^<A","^<M","^<K","^<;","^=0","^<V","^<@","^<X","^=1","^<>","^<Q","^<T","^<O","^<Y","^<2","^<H","^=3","^<6","^<7","^<4","^<Z","^;Z"]],"^1H",["^ ","^1;",["^I",[]]],"^1I",["^ "],"^1J",["^11","^Z","^19","^18","^X","^14","^16","^10","^12","^@","^G","^T","^V","^S"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^3B",[["^=7","~:static-fns"],true,["^=7","~:shadow-tweaks"],null,["^=7","~:source-map-inline"],null,["^=7","~:elide-asserts"],true,["^=7","~:optimize-constants"],null,["^=7","^1O"],null,["^=7","~:external-config"],null,["^=7","~:tooling-config"],null,["^=7","~:emit-constants"],null,["^=7","~:load-tests"],false,["^=7","~:form-size-threshold"],null,["^=7","~:global-goog-object&array"],null,["^=7","~:data-readers"],null,["^=7","~:infer-externs"],"^<[",["^=7","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^=7","~:fn-invoke-direct"],null,["^=7","~:source-map"],null]]]