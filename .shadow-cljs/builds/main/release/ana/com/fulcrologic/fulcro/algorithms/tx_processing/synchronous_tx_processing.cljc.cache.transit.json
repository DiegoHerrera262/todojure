["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing');\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n\n/**\n * Returns true if the current thread is running non-nested transaction processing code.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.top_level_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$top_level_QMARK_(p__48638){\nvar map__48639 = p__48638;\nvar map__48639__$1 = cljs.core.__destructure_map(map__48639);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48639__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)),(0));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_submission_queue_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48796 = arguments.length;\nvar i__5770__auto___48797 = (0);\nwhile(true){\nif((i__5770__auto___48797 < len__5769__auto___48796)){\nargs__5775__auto__.push((arguments[i__5770__auto___48797]));\n\nvar G__48798 = (i__5770__auto___48797 + (1));\ni__5770__auto___48797 = G__48798;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$applyTo = (function (seq48641){\nvar G__48642 = cljs.core.first(seq48641);\nvar seq48641__$1 = cljs.core.next(seq48641);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48642,seq48641__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_submission_queue_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submission_queue(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_post_processing_steps_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48800 = arguments.length;\nvar i__5770__auto___48801 = (0);\nwhile(true){\nif((i__5770__auto___48801 < len__5769__auto___48800)){\nargs__5775__auto__.push((arguments[i__5770__auto___48801]));\n\nvar G__48802 = (i__5770__auto___48801 + (1));\ni__5770__auto___48801 = G__48802;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$applyTo = (function (seq48646){\nvar G__48647 = cljs.core.first(seq48646);\nvar seq48646__$1 = cljs.core.next(seq48646);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48647,seq48646__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_post_processing_steps_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_steps(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_active_queue_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48809 = arguments.length;\nvar i__5770__auto___48810 = (0);\nwhile(true){\nif((i__5770__auto___48810 < len__5769__auto___48809)){\nargs__5775__auto__.push((arguments[i__5770__auto___48810]));\n\nvar G__48811 = (i__5770__auto___48810 + (1));\ni__5770__auto___48810 = G__48811;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$applyTo = (function (seq48651){\nvar G__48652 = cljs.core.first(seq48651);\nvar seq48651__$1 = cljs.core.next(seq48651);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48652,seq48651__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_active_queue_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$active_queue(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_send_queue_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48814 = arguments.length;\nvar i__5770__auto___48815 = (0);\nwhile(true){\nif((i__5770__auto___48815 < len__5769__auto___48814)){\nargs__5775__auto__.push((arguments[i__5770__auto___48815]));\n\nvar G__48816 = (i__5770__auto___48815 + (1));\ni__5770__auto___48815 = G__48816;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,remote,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$applyTo = (function (seq48656){\nvar G__48657 = cljs.core.first(seq48656);\nvar seq48656__$1 = cljs.core.next(seq48656);\nvar G__48658 = cljs.core.first(seq48656__$1);\nvar seq48656__$2 = cljs.core.next(seq48656__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48657,G__48658,seq48656__$2);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_send_queue_BANG_(app__$1,remote,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$send_queue(app__$1,remote){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)));\n});\n/**\n * Add `f` as a function that will run after the current transaction has been fully processed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_after_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_after_BANG_(app__$1,f){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),f], 0));\n});\n/**\n * Is there post processing to do?\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_QMARK_(app__$1){\nreturn cljs.core.boolean$(cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1)));\n});\n/**\n * Runs the queued post processing steps until the post-processing queue is empty.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.do_post_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$do_post_processing_BANG_(app__$1){\nvar steps = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1);\nwhile(true){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_(app__$1,cljs.core.PersistentVector.EMPTY);\n\nvar seq__48663_48818 = cljs.core.seq(steps);\nvar chunk__48664_48819 = null;\nvar count__48665_48820 = (0);\nvar i__48666_48821 = (0);\nwhile(true){\nif((i__48666_48821 < count__48665_48820)){\nvar f_48822 = chunk__48664_48819.cljs$core$IIndexed$_nth$arity$2(null,i__48666_48821);\ntry{(f_48822.cljs$core$IFn$_invoke$arity$0 ? f_48822.cljs$core$IFn$_invoke$arity$0() : f_48822.call(null));\n}catch (e48672){var e_48823 = e48672;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,134,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__48663_48818,chunk__48664_48819,count__48665_48820,i__48666_48821,steps,e_48823,f_48822){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_48823,\"Post processing step failed. See https://book.fulcrologic.com/#err-stp-postproc-failed\"], null);\n});})(seq__48663_48818,chunk__48664_48819,count__48665_48820,i__48666_48821,steps,e_48823,f_48822))\n,null)),null,1758231482,null);\n}\n\nvar G__48826 = seq__48663_48818;\nvar G__48827 = chunk__48664_48819;\nvar G__48828 = count__48665_48820;\nvar G__48829 = (i__48666_48821 + (1));\nseq__48663_48818 = G__48826;\nchunk__48664_48819 = G__48827;\ncount__48665_48820 = G__48828;\ni__48666_48821 = G__48829;\ncontinue;\n} else {\nvar temp__5753__auto___48830 = cljs.core.seq(seq__48663_48818);\nif(temp__5753__auto___48830){\nvar seq__48663_48831__$1 = temp__5753__auto___48830;\nif(cljs.core.chunked_seq_QMARK_(seq__48663_48831__$1)){\nvar c__5568__auto___48833 = cljs.core.chunk_first(seq__48663_48831__$1);\nvar G__48834 = cljs.core.chunk_rest(seq__48663_48831__$1);\nvar G__48835 = c__5568__auto___48833;\nvar G__48836 = cljs.core.count(c__5568__auto___48833);\nvar G__48837 = (0);\nseq__48663_48818 = G__48834;\nchunk__48664_48819 = G__48835;\ncount__48665_48820 = G__48836;\ni__48666_48821 = G__48837;\ncontinue;\n} else {\nvar f_48838 = cljs.core.first(seq__48663_48831__$1);\ntry{(f_48838.cljs$core$IFn$_invoke$arity$0 ? f_48838.cljs$core$IFn$_invoke$arity$0() : f_48838.call(null));\n}catch (e48674){var e_48839 = e48674;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,134,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__48663_48818,chunk__48664_48819,count__48665_48820,i__48666_48821,steps,e_48839,f_48838,seq__48663_48831__$1,temp__5753__auto___48830){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_48839,\"Post processing step failed. See https://book.fulcrologic.com/#err-stp-postproc-failed\"], null);\n});})(seq__48663_48818,chunk__48664_48819,count__48665_48820,i__48666_48821,steps,e_48839,f_48838,seq__48663_48831__$1,temp__5753__auto___48830))\n,null)),null,1081744400,null);\n}\n\nvar G__48842 = cljs.core.next(seq__48663_48831__$1);\nvar G__48843 = null;\nvar G__48844 = (0);\nvar G__48845 = (0);\nseq__48663_48818 = G__48842;\nchunk__48664_48819 = G__48843;\ncount__48665_48820 = G__48844;\ni__48666_48821 = G__48845;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar temp__5753__auto__ = cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1));\nif(temp__5753__auto__){\nvar next_steps = temp__5753__auto__;\nvar G__48847 = next_steps;\nsteps = G__48847;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$in_transaction_QMARK_(p__48676){\nvar map__48677 = p__48676;\nvar map__48677__$1 = cljs.core.__destructure_map(map__48677);\nvar app__$1 = map__48677__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48677__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((0),cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)));\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$release_post_render_tasks_BANG_(app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n})], 0));\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__48680,remote){\nvar map__48681 = p__48680;\nvar map__48681__$1 = cljs.core.__destructure_map(map__48681);\nvar tx_element = map__48681__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48681__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48681__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48681__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48681__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48681__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar result_48851 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_48852 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_48852)){\nvar env_48853 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_48851], null));\ntry{(handler_48852.cljs$core$IFn$_invoke$arity$1 ? handler_48852.cljs$core$IFn$_invoke$arity$1(env_48853) : handler_48852.call(null,env_48853));\n}catch (e48683){var e_48859 = e48683;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,166,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_48859,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception. See https://book.fulcrologic.com/#err-stp-res-action-exc\"], null);\n}),null)),null,-1988824121,null);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__48685){\nvar map__48686 = p__48685;\nvar map__48686__$1 = cljs.core.__destructure_map(map__48686);\nvar tx_element = map__48686__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48686__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48686__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$node_index(queue,txn_id){\nvar n = cljs.core.count(queue);\nvar idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__48689){\nvar map__48690 = p__48689;\nvar map__48690__$1 = cljs.core.__destructure_map(map__48690);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48690__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),queue);\nif((idx < n)){\nreturn idx;\n} else {\nreturn null;\n}\n});\n/**\n * Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n * handler and mark that remote as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_results_BANG_(app__$1,txn_id,ele_idx){\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\nvar tx_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,idx);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx], null),(function (p1__48691_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_(app__$1,tx_node,p1__48691_SHARP_);\n})], 0));\n});\n/**\n * Deal with a network result on the given txn/element.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$record_result_BANG_(var_args){\nvar G__48695 = arguments.length;\nswitch (G__48695) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (app__$1,txn_id,ele_idx,remote,result,result_key){\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar txn_idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,209,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-stp-res-lacks-valid-node\"], null);\n}),null)),null,-147492653,null);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.assoc_in,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result], 0));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_(app__$1,txn_id,ele_idx);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$remove_send_BANG_(app__$1,remote,txn_id,ele_idx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (old_queue){\nreturn cljs.core.filterv((function (p__48699){\nvar map__48700 = p__48699;\nvar map__48700__$1 = cljs.core.__destructure_map(map__48700);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48700__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48700__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\n})], 0));\n});\n/**\n * Generate a new send node and add it to the appropriate send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG_(app__$1,p__48703,ele_idx,remote){\nvar map__48704 = p__48703;\nvar map__48704__$1 = cljs.core.__destructure_map(map__48704);\nvar tx_node = map__48704__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48704__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48704__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\nvar id__48387__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__48387__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nvar G__48706 = app__$1;\nvar G__48707 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__48706,G__48707) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__48706,G__48707));\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__48387__auto__,cljs.core.dec);\n}});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_result_handler_STAR_(result){\nvar id__48387__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__48387__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\nvar G__48709 = app__$1;\nvar G__48710 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__48709,G__48710) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__48709,G__48710));\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__48387__auto__,cljs.core.dec);\n}});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),send_node], 0));\n} else {\ncom.fulcrologic.fulcro.algorithms.scheduling.defer((function (){\nreturn handler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n}),(1));\n}\n\nreturn null;\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__48712){\nvar map__48713 = p__48712;\nvar map__48713__$1 = cljs.core.__destructure_map(map__48713);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48713__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48713__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48713__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_sends_BANG_(app__$1,p__48716){\nvar map__48717 = p__48716;\nvar map__48717__$1 = cljs.core.__destructure_map(map__48717);\nvar tx_node = map__48717__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48717__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48717__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_tx_node_BANG_(app__$1,p__48719){\nvar map__48720 = p__48719;\nvar map__48720__$1 = cljs.core.__destructure_map(map__48720);\nvar tx_node = map__48720__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48720__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,tx_node)));\n}\n});\n/**\n * Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_send_queues_BANG_(app__$1){\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar seq__48722_48901 = cljs.core.seq(remote_names);\nvar chunk__48723_48902 = null;\nvar count__48724_48903 = (0);\nvar i__48725_48904 = (0);\nwhile(true){\nif((i__48725_48904 < count__48724_48903)){\nvar remote_48905 = chunk__48723_48902.cljs$core$IIndexed$_nth$arity$2(null,i__48725_48904);\nvar send_queue_48906 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_48905);\nvar vec__48750_48907 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_48906);\nvar p_48908 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48750_48907,(0),null);\nvar serial_48909 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48750_48907,(1),null);\nvar front_48910 = cljs.core.first(serial_48909);\nvar seq__48753_48911 = cljs.core.seq(p_48908);\nvar chunk__48754_48912 = null;\nvar count__48755_48913 = (0);\nvar i__48756_48914 = (0);\nwhile(true){\nif((i__48756_48914 < count__48755_48913)){\nvar item_48916 = chunk__48754_48912.cljs$core$IIndexed$_nth$arity$2(null,i__48756_48914);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__48753_48911,chunk__48754_48912,count__48755_48913,i__48756_48914,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48916,send_queue_48906,vec__48750_48907,p_48908,serial_48909,front_48910,remote_48905,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_48916,remote_48905);\n});})(seq__48753_48911,chunk__48754_48912,count__48755_48913,i__48756_48914,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48916,send_queue_48906,vec__48750_48907,p_48908,serial_48909,front_48910,remote_48905,remote_names,operations))\n);\n\n\nvar G__48919 = seq__48753_48911;\nvar G__48920 = chunk__48754_48912;\nvar G__48921 = count__48755_48913;\nvar G__48922 = (i__48756_48914 + (1));\nseq__48753_48911 = G__48919;\nchunk__48754_48912 = G__48920;\ncount__48755_48913 = G__48921;\ni__48756_48914 = G__48922;\ncontinue;\n} else {\nvar temp__5753__auto___48924 = cljs.core.seq(seq__48753_48911);\nif(temp__5753__auto___48924){\nvar seq__48753_48925__$1 = temp__5753__auto___48924;\nif(cljs.core.chunked_seq_QMARK_(seq__48753_48925__$1)){\nvar c__5568__auto___48926 = cljs.core.chunk_first(seq__48753_48925__$1);\nvar G__48927 = cljs.core.chunk_rest(seq__48753_48925__$1);\nvar G__48928 = c__5568__auto___48926;\nvar G__48929 = cljs.core.count(c__5568__auto___48926);\nvar G__48930 = (0);\nseq__48753_48911 = G__48927;\nchunk__48754_48912 = G__48928;\ncount__48755_48913 = G__48929;\ni__48756_48914 = G__48930;\ncontinue;\n} else {\nvar item_48931 = cljs.core.first(seq__48753_48925__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__48753_48911,chunk__48754_48912,count__48755_48913,i__48756_48914,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48931,seq__48753_48925__$1,temp__5753__auto___48924,send_queue_48906,vec__48750_48907,p_48908,serial_48909,front_48910,remote_48905,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_48931,remote_48905);\n});})(seq__48753_48911,chunk__48754_48912,count__48755_48913,i__48756_48914,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48931,seq__48753_48925__$1,temp__5753__auto___48924,send_queue_48906,vec__48750_48907,p_48908,serial_48909,front_48910,remote_48905,remote_names,operations))\n);\n\n\nvar G__48932 = cljs.core.next(seq__48753_48925__$1);\nvar G__48933 = null;\nvar G__48934 = (0);\nvar G__48935 = (0);\nseq__48753_48911 = G__48932;\nchunk__48754_48912 = G__48933;\ncount__48755_48913 = G__48934;\ni__48756_48914 = G__48935;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_48910))){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_48905,serial_48909);\n} else {\nvar map__48760_48936 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_48905,serial_48909);\nvar map__48760_48937__$1 = cljs.core.__destructure_map(map__48760_48936);\nvar send_queue_48938__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48760_48937__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node_48939 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48760_48937__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node_48939)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,map__48760_48936,map__48760_48937__$1,send_queue_48938__$1,send_node_48939,send_queue_48906,vec__48750_48907,p_48908,serial_48909,front_48910,remote_48905,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_48939,remote_48905);\n});})(seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,map__48760_48936,map__48760_48937__$1,send_queue_48938__$1,send_node_48939,send_queue_48906,vec__48750_48907,p_48908,serial_48909,front_48910,remote_48905,remote_names,operations))\n);\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_48905,send_queue_48938__$1);\n}\n\n\nvar G__48943 = seq__48722_48901;\nvar G__48944 = chunk__48723_48902;\nvar G__48945 = count__48724_48903;\nvar G__48946 = (i__48725_48904 + (1));\nseq__48722_48901 = G__48943;\nchunk__48723_48902 = G__48944;\ncount__48724_48903 = G__48945;\ni__48725_48904 = G__48946;\ncontinue;\n} else {\nvar temp__5753__auto___48948 = cljs.core.seq(seq__48722_48901);\nif(temp__5753__auto___48948){\nvar seq__48722_48949__$1 = temp__5753__auto___48948;\nif(cljs.core.chunked_seq_QMARK_(seq__48722_48949__$1)){\nvar c__5568__auto___48950 = cljs.core.chunk_first(seq__48722_48949__$1);\nvar G__48951 = cljs.core.chunk_rest(seq__48722_48949__$1);\nvar G__48952 = c__5568__auto___48950;\nvar G__48953 = cljs.core.count(c__5568__auto___48950);\nvar G__48954 = (0);\nseq__48722_48901 = G__48951;\nchunk__48723_48902 = G__48952;\ncount__48724_48903 = G__48953;\ni__48725_48904 = G__48954;\ncontinue;\n} else {\nvar remote_48956 = cljs.core.first(seq__48722_48949__$1);\nvar send_queue_48957 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_48956);\nvar vec__48762_48958 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_48957);\nvar p_48959 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48762_48958,(0),null);\nvar serial_48960 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48762_48958,(1),null);\nvar front_48961 = cljs.core.first(serial_48960);\nvar seq__48765_48963 = cljs.core.seq(p_48959);\nvar chunk__48766_48965 = null;\nvar count__48767_48966 = (0);\nvar i__48768_48967 = (0);\nwhile(true){\nif((i__48768_48967 < count__48767_48966)){\nvar item_48969 = chunk__48766_48965.cljs$core$IIndexed$_nth$arity$2(null,i__48768_48967);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__48765_48963,chunk__48766_48965,count__48767_48966,i__48768_48967,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48969,send_queue_48957,vec__48762_48958,p_48959,serial_48960,front_48961,remote_48956,seq__48722_48949__$1,temp__5753__auto___48948,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_48969,remote_48956);\n});})(seq__48765_48963,chunk__48766_48965,count__48767_48966,i__48768_48967,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48969,send_queue_48957,vec__48762_48958,p_48959,serial_48960,front_48961,remote_48956,seq__48722_48949__$1,temp__5753__auto___48948,remote_names,operations))\n);\n\n\nvar G__48970 = seq__48765_48963;\nvar G__48971 = chunk__48766_48965;\nvar G__48972 = count__48767_48966;\nvar G__48973 = (i__48768_48967 + (1));\nseq__48765_48963 = G__48970;\nchunk__48766_48965 = G__48971;\ncount__48767_48966 = G__48972;\ni__48768_48967 = G__48973;\ncontinue;\n} else {\nvar temp__5753__auto___48974__$1 = cljs.core.seq(seq__48765_48963);\nif(temp__5753__auto___48974__$1){\nvar seq__48765_48975__$1 = temp__5753__auto___48974__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__48765_48975__$1)){\nvar c__5568__auto___48976 = cljs.core.chunk_first(seq__48765_48975__$1);\nvar G__48977 = cljs.core.chunk_rest(seq__48765_48975__$1);\nvar G__48978 = c__5568__auto___48976;\nvar G__48979 = cljs.core.count(c__5568__auto___48976);\nvar G__48980 = (0);\nseq__48765_48963 = G__48977;\nchunk__48766_48965 = G__48978;\ncount__48767_48966 = G__48979;\ni__48768_48967 = G__48980;\ncontinue;\n} else {\nvar item_48981 = cljs.core.first(seq__48765_48975__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__48765_48963,chunk__48766_48965,count__48767_48966,i__48768_48967,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48981,seq__48765_48975__$1,temp__5753__auto___48974__$1,send_queue_48957,vec__48762_48958,p_48959,serial_48960,front_48961,remote_48956,seq__48722_48949__$1,temp__5753__auto___48948,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_48981,remote_48956);\n});})(seq__48765_48963,chunk__48766_48965,count__48767_48966,i__48768_48967,seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,item_48981,seq__48765_48975__$1,temp__5753__auto___48974__$1,send_queue_48957,vec__48762_48958,p_48959,serial_48960,front_48961,remote_48956,seq__48722_48949__$1,temp__5753__auto___48948,remote_names,operations))\n);\n\n\nvar G__48984 = cljs.core.next(seq__48765_48975__$1);\nvar G__48985 = null;\nvar G__48986 = (0);\nvar G__48987 = (0);\nseq__48765_48963 = G__48984;\nchunk__48766_48965 = G__48985;\ncount__48767_48966 = G__48986;\ni__48768_48967 = G__48987;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_48961))){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_48956,serial_48960);\n} else {\nvar map__48769_48990 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_48956,serial_48960);\nvar map__48769_48991__$1 = cljs.core.__destructure_map(map__48769_48990);\nvar send_queue_48992__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48769_48991__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node_48993 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48769_48991__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node_48993)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,map__48769_48990,map__48769_48991__$1,send_queue_48992__$1,send_node_48993,send_queue_48957,vec__48762_48958,p_48959,serial_48960,front_48961,remote_48956,seq__48722_48949__$1,temp__5753__auto___48948,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_48993,remote_48956);\n});})(seq__48722_48901,chunk__48723_48902,count__48724_48903,i__48725_48904,map__48769_48990,map__48769_48991__$1,send_queue_48992__$1,send_node_48993,send_queue_48957,vec__48762_48958,p_48959,serial_48960,front_48961,remote_48956,seq__48722_48949__$1,temp__5753__auto___48948,remote_names,operations))\n);\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_48956,send_queue_48992__$1);\n}\n\n\nvar G__48995 = cljs.core.next(seq__48722_48949__$1);\nvar G__48996 = null;\nvar G__48997 = (0);\nvar G__48998 = (0);\nseq__48722_48901 = G__48995;\nchunk__48723_48902 = G__48996;\ncount__48724_48903 = G__48997;\ni__48725_48904 = G__48998;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__48770 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__48771 = null;\nvar count__48772 = (0);\nvar i__48773 = (0);\nwhile(true){\nif((i__48773 < count__48772)){\nvar op = chunk__48771.cljs$core$IIndexed$_nth$arity$2(null,i__48773);\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\n\n\nvar G__49001 = seq__48770;\nvar G__49002 = chunk__48771;\nvar G__49003 = count__48772;\nvar G__49004 = (i__48773 + (1));\nseq__48770 = G__49001;\nchunk__48771 = G__49002;\ncount__48772 = G__49003;\ni__48773 = G__49004;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__48770);\nif(temp__5753__auto__){\nvar seq__48770__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__48770__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__48770__$1);\nvar G__49006 = cljs.core.chunk_rest(seq__48770__$1);\nvar G__49007 = c__5568__auto__;\nvar G__49008 = cljs.core.count(c__5568__auto__);\nvar G__49009 = (0);\nseq__48770 = G__49006;\nchunk__48771 = G__49007;\ncount__48772 = G__49008;\ni__48773 = G__49009;\ncontinue;\n} else {\nvar op = cljs.core.first(seq__48770__$1);\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\n\n\nvar G__49010 = cljs.core.next(seq__48770__$1);\nvar G__49011 = null;\nvar G__49012 = (0);\nvar G__49013 = (0);\nseq__48770 = G__49010;\nchunk__48771 = G__49011;\ncount__48772 = G__49012;\ni__48773 = G__49013;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG_(p__48774){\nvar map__48775 = p__48774;\nvar map__48775__$1 = cljs.core.__destructure_map(map__48775);\nvar app__$1 = map__48775__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48775__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48775__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar old_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,old_queue);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_queue,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,325,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Old queue changed! See https://book.fulcrologic.com/#err-stp-old-queue-chng\"], null);\n}),null)),null,-973044989,null);\n} else {\n}\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_(app__$1,new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_(app__$1);\n\nreturn null;\n});\n/**\n * Returns true if the submission queue has work on it that can proceed without any restrictions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$available_work_QMARK_(app__$1){\nvar map__48776 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\nvar map__48776__$1 = cljs.core.__destructure_map(map__48776);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48776__$1,false);\nreturn cljs.core.boolean$(cljs.core.seq(ready));\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$activate_submissions_BANG_(app__$1){\nvar map__48778 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\nvar map__48778__$1 = cljs.core.__destructure_map(map__48778);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48778__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48778__$1,false);\nvar _ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_(app__$1,cljs.core.vec(blocked));\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__48777_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__48777_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__48777_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,cljs.core.PersistentVector.EMPTY),dispatched_nodes], 0));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_(app__$1);\n});\n/**\n * Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n * are processed as well until the submission queue remains empty. This can start network requests.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_all_immediate_work_BANG_(app__$1){\ntry{return com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_(app__$1);\n}catch (e48779){var e = e48779;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,358,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Error processing tx queue! See https://book.fulcrologic.com/#err-stp-err-processing-tx-q\"], null);\n}),null)),null,-832092103,null);\n}});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_queue_BANG_(app__$1,p__48780){\nwhile(true){\nvar map__48781 = p__48780;\nvar map__48781__$1 = cljs.core.__destructure_map(map__48781);\nvar options = map__48781__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48781__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48781__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nwhile(true){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_(app__$1);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\ncontinue;\n} else {\n}\nbreak;\n}\n\nif(cljs.core.truth_((function (){var and__5043__auto__ = synchronous_QMARK_;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn component;\n} else {\nreturn and__5043__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nvar temp__5753__auto___49025 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\nif(cljs.core.truth_(temp__5753__auto___49025)){\nvar render_BANG__49026 = temp__5753__auto___49025;\n(render_BANG__49026.cljs$core$IFn$_invoke$arity$2 ? render_BANG__49026.cljs$core$IFn$_invoke$arity$2(app__$1,options) : render_BANG__49026.call(null,app__$1,options));\n} else {\n}\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_(app__$1);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\nvar G__49027 = app__$1;\nvar G__49028 = cljs.core.PersistentArrayMap.EMPTY;\napp__$1 = G__49027;\np__48780 = G__49028;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$sync_tx_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___49029 = arguments.length;\nvar i__5770__auto___49030 = (0);\nwhile(true){\nif((i__5770__auto___49030 < len__5769__auto___49029)){\nargs__5775__auto__.push((arguments[i__5770__auto___49030]));\n\nvar G__49031 = (i__5770__auto___49030 + (1));\ni__5770__auto___49030 = G__49031;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$applyTo = (function (seq48782){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq48782));\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submit_sync_tx_BANG_(var_args){\nvar G__48785 = arguments.length;\nswitch (G__48785) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__48786,tx,options){\nvar map__48787 = p__48786;\nvar map__48787__$1 = cljs.core.__destructure_map(map__48787);\nvar app__$1 = map__48787__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48787__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__48788 = options;\nvar map__48788__$1 = cljs.core.__destructure_map(map__48788);\nvar options__$1 = map__48788__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48788__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48788__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48788__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__48783_SHARP_){\nreturn (((p1__48783_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__48783_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__48789 = cljs.core.set(refresh);\nvar G__48789__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__48789,follow_on_reads):G__48789);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__48789__$1,ref);\n} else {\nreturn G__48789__$1;\n}\n})();\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),node], 0));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__48790 = s;\nvar G__48790__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__48790,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__48790);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__48790__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__48790__$1;\n}\n}));\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_(app__$1)){\n} else {\nvar id__48387__auto___49033 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__48387__auto___49033,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_(app__$1,options__$1);\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__48387__auto___49033,cljs.core.dec);\n}}\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * [app abort-id]\n * \n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_ = com.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_;\n/**\n * Installs synchronous transaction processing on a fulcro application.\n * \n *   ```\n *   (defonce app (stx/with-synchronous-transactions\n *               (app/fulcro-app {...})))\n *   ```\n * \n *   This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n *   can behave synchronously. This processing system\n *   preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n *   operations will exactly match what you'd see if using the standard tx processing.\n * \n *   The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n *   `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n *   `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n * \n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n *   is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n *   - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n *  `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.with_synchronous_transactions = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$with_synchronous_transactions(app__$1){\nvar remotes = cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1))));\nvar send_queues = cljs.core.zipmap(remotes,cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1((function (){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\n})));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"algorithms\",\"com.fulcrologic.fulcro.application/algorithms\",-397334538),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"tx!\",\"com.fulcrologic.fulcro.algorithm/tx!\",1081877133),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"abort!\",\"com.fulcrologic.fulcro.algorithm/abort!\",1698846123),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_], 0)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),send_queues], null));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",78],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$in-transaction","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^I"],"~:excludes",["~#set",[]],"~:macros",["^ ","^F",["^ ","~:arglists",["~#list",[["~$app-sym","~$&","~$body"]]],"^8",89,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction","~:ns","^G","~:macro",true]],"^R","^G","~:reader-aliases",["^ "],"~:op","^T","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^12","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^12","~$cljs.core","^18","^I","^I","~$goog","^19","^11","^11","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1;","~$sched","^1;","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","^1:","^1:","^[","^[","^1>","^1>","^16","^16","^14","^14"],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",["^ ","^H","^I","^J","^I"],"^1A",["^ ","^13","^14","^15","^16","^18","^18","^I","^I","~$m","^1:","^1:","^1:","^16","^16","^14","^14","^G","^G"],"~:form",["^O",["~$ns","^G","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ",["^O",["^1A",["^G","~:refer",["^F"]]]],["^O",["^1@",["^11","~:as","^10"],["^1>","^1F","^1="],["^1;","^1F","^1<"],["^[","^1F","^Z"],["^1:","^1F","~$m"],["^16","^1F","^15"],["^I","^1E",["^H","^J"]],["^12","^1F","^17"],["^14","^1F","^13"]]]]],"~:flags",["^ ","^1A",["^L",[]],"^1@",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^19","^18","^11","^1>","^1;","^[","^1:","^16","^I","^12","^14"]],"^T","^G","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],"~:compiled-at",1689300107250,"^V",["^ ","^Z","^[","^10","^11","^12","^12","^13","^14","^15","^16","^17","^12","^18","^18","^I","^I","^19","^19","^11","^11","~$m","^1:","^1;","^1;","^1<","^1;","^1=","^1>","^1:","^1:","^[","^[","^1>","^1>","^16","^16","^14","^14","^G","^G"],"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\n  \"A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing :refer [in-transaction]]))\n  (:require\n    [clojure.set :as set]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.inspect.inspect-client :refer [ido ilet]]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defonce apps-in-tx (atom {}))\n\n(declare run-queue! available-work?)\n\n#?(:clj\n   (defmacro in-transaction [app-sym & body]\n     `(let [id# (:com.fulcrologic.fulcro.application/id ~app-sym)]\n        (swap! apps-in-tx update id# (fnil inc 0))\n        (try\n          ~@body\n          (finally\n            (swap! apps-in-tx update id# dec))))))\n\n(defn top-level?\n  \"Returns true if the current thread is running non-nested transaction processing code.\"\n  [{:com.fulcrologic.fulcro.application/keys [id]}]\n  (= (-> apps-in-tx deref (get id 0)) 0))\n\n(defn swap-submission-queue! [app & args] (apply swap! (get-in app [::config ::submission-queue]) args))\n(defn reset-submission-queue! [app v] (reset! (get-in app [::config ::submission-queue]) v))\n(defn submission-queue [app] @(get-in app [::config ::submission-queue]))\n(defn swap-post-processing-steps! [app & args] (apply swap! (get-in app [::config ::post-processing-steps]) args))\n(defn reset-post-processing-steps! [app v] (reset! (get-in app [::config ::post-processing-steps]) v))\n(defn post-processing-steps [app] @(get-in app [::config ::post-processing-steps]))\n(defn swap-active-queue! [app & args] (apply swap! (get-in app [::config ::active-queue]) args))\n(defn reset-active-queue! [app v] (reset! (get-in app [::config ::active-queue]) v))\n(defn active-queue [app] @(get-in app [::config ::active-queue]))\n(defn swap-send-queue! [app remote & args] (apply swap! (get-in app [::config ::send-queues remote]) args))\n(defn reset-send-queue! [app remote v] (reset! (get-in app [::config ::send-queues remote]) v))\n(defn send-queue [app remote] @(get-in app [::config ::send-queues remote]))\n\n(defn run-after!\n  \"Add `f` as a function that will run after the current transaction has been fully processed.\"\n  [app f]\n  (swap-post-processing-steps! app (fnil conj []) f))\n\n(defn post-processing?\n  \"Is there post processing to do?\"\n  [app]\n  (boolean (seq (post-processing-steps app))))\n\n(defn do-post-processing!\n  \"Runs the queued post processing steps until the post-processing queue is empty.\"\n  [app]\n  (loop [steps (post-processing-steps app)]\n    (reset-post-processing-steps! app [])\n    (doseq [f steps]\n      (try\n        (f)\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Post processing step failed. See https://book.fulcrologic.com/#err-stp-postproc-failed\"))))\n    (when-let [next-steps (seq (post-processing-steps app))]\n      (recur next-steps))))\n\n(defn in-transaction?\n  \"Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\"\n  [{:com.fulcrologic.fulcro.application/keys [id] :as app}]\n  (not= 0 (get @apps-in-tx id 0)))\n\n(defn release-post-render-tasks!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [app]\n  (swap-submission-queue! app (fn [queue] (mapv (fn [node] (update node ::txn/options dissoc :after-render?)) queue))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::txn/keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (txn/build-env app tx-node {:dispatch        dispatch\n                                            :transacted-ast  original-ast-node\n                                            :mutation-ast    (get desired-ast-nodes remote)\n                                            :transmitted-ast (get transmitted-ast-nodes remote)\n                                            :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception. See https://book.fulcrologic.com/#err-stp-res-action-exc\"))))))\n  (update tx-element ::txn/complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::txn/results ::txn/complete?] :as tx-element}]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn- node-index [queue txn-id]\n  (let [n   (count queue)\n        idx (reduce\n              (fn [idx {:keys [::txn/id]}]\n                (if (= id txn-id)\n                  (reduced idx)\n                  (inc idx)))\n              0\n              queue)]\n    (when (< idx n)\n      idx)))\n\n(defn distribute-results!\n  \"Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete.\"\n  [app txn-id ele-idx]\n  (let [active-queue (active-queue app)\n        idx          (node-index active-queue txn-id)\n        tx-node      (get active-queue idx)]\n    (swap-active-queue! app update-in [idx ::txn/elements ele-idx]\n      #(distribute-element-results! app tx-node %))))\n\n(defn record-result!\n  \"Deal with a network result on the given txn/element.\"\n  ([app txn-id ele-idx remote result result-key]\n   (let [active-queue (active-queue app)\n         txn-idx      (node-index active-queue txn-id)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::txn/id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-stp-res-lacks-valid-node\")\n       (do\n         (swap-active-queue! app assoc-in [txn-idx ::txn/elements ele-idx result-key remote] result)\n         (distribute-results! app txn-id ele-idx)))))\n  ([app txn-id ele-idx remote result]\n   (record-result! app txn-id ele-idx remote result ::txn/results)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [app remote txn-id ele-idx]\n  (swap-send-queue! app remote (fn [old-queue]\n                                 (filterv (fn [{::txn/keys [id idx]}]\n                                            (not (and (= txn-id id) (= ele-idx idx)))) old-queue))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue.\"\n  [app {::txn/keys [id options] :as tx-node} ele-idx remote]\n  (let [update-handler (fn progress-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result ::txn/progress)\n                           (run-queue! app {})))\n        ast            (get-in tx-node [::txn/elements ele-idx ::txn/transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result)\n                           (remove-send! app remote id ele-idx)\n                           (run-queue! app {})))\n        send-node      {::txn/id             id\n                        ::txn/idx            ele-idx\n                        ::txn/ast            ast\n                        ::txn/options        options\n                        ::txn/active?        false\n                        ::txn/result-handler handler\n                        ::txn/update-handler update-handler}]\n    (if ast\n      (swap-send-queue! app remote (fnil conj []) send-node)\n      ;; The handler would make a recursive call back to the queue processing, so we have to defer it if the AST wasn't set\n      (sched/defer #(handler {:status-code 200 :body {}}) 1))\n    nil))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {::txn/keys [idx dispatch started?]}]\n  (let [remotes     (set/intersection (set (keys dispatch)) (txn/app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::txn/elements idx ::txn/started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::txn/elements idx] (fn [tx-element] (txn/compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::txn/elements idx ::txn/started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::txn/options ::txn/elements] :as tx-node}]\n  (reduce\n    (fn [node element]\n      (queue-element-sends! app node element))\n    tx-node\n    elements))\n\n(defn process-tx-node!\n  [app {:keys [::txn/options] :as tx-node}]\n  (if (txn/fully-complete? app tx-node)\n    nil\n    (->> tx-node\n      (txn/run-actions! app)\n      (queue-sends! app)\n      (txn/update-progress! app))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\"\n  [app]\n  (let [remote-names (txn/app->remote-names app)\n        operations   (atom [])]\n    (doseq [remote remote-names]\n      (let [send-queue (send-queue app remote)\n            [p serial] (txn/extract-parallel send-queue)\n            front      (first serial)]\n        ;; parallel items are removed from the queues, since they don't block anything\n        (doseq [item p]\n          (swap! operations conj #(txn/net-send! app item remote)))\n        ;; sequential items are kept in queue to prevent out-of-order operation\n        (if (::active? front)\n          (reset-send-queue! app remote serial)\n          (let [{::txn/keys [send-queue send-node]} (txn/combine-sends app remote serial)]\n            (when send-node\n              (swap! operations conj #(txn/net-send! app send-node remote)))\n            (reset-send-queue! app remote send-queue)))))\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, nested send queue updates in those handlers could confuse our notion of what's going on.\n    (doseq [op @operations]\n      (op))))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  (let [old-queue        (active-queue app)\n        new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           old-queue)\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (txn/app->remote-names app)\n        explicit-refresh (txn/requested-refreshes app new-queue)\n        remotes-active?  (txn/active-remotes new-queue remotes)]\n    (when (not= old-queue (active-queue app))\n      (log/error \"Old queue changed! See https://book.fulcrologic.com/#err-stp-old-queue-chng\"))\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (reset-active-queue! app new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (process-send-queues! app)\n    nil))\n\n(defn available-work?\n  \"Returns true if the submission queue has work on it that can proceed without any restrictions.\"\n  [app]\n  (let [{ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))]\n    (boolean (seq ready))))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [app]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))\n        _                (reset-submission-queue! app (vec blocked))\n        dispatched-nodes (mapv #(txn/dispatch-elements % (txn/build-env app %) m/mutate) ready)]\n    (swap-active-queue! app (fnil into []) dispatched-nodes)\n    (process-queue! app)))\n\n(defn run-all-immediate-work!\n  \"Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests.\"\n  [app]\n  (try\n    (activate-submissions! app)\n    (catch #?(:cljs :default :clj Exception) e\n      (log/error e \"Error processing tx queue! See https://book.fulcrologic.com/#err-stp-err-processing-tx-q\"))))\n\n(defn run-queue! [app {:keys [component synchronous?] :as options}]\n  (loop []\n    (run-all-immediate-work! app)\n    (when (available-work? app)\n      (recur)))\n  (if (and synchronous? component)\n    (comp/refresh-component! component)\n    (when-let [render! (ah/app-algorithm app :render!)]\n      (render! app options)))\n  (release-post-render-tasks! app)\n  (when (available-work? app)\n    (recur app {})))\n\n(defn sync-tx! [& args] (throw (ex-info \"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\" {})))\n\n(defn submit-sync-tx!\n  ([app tx]\n   (submit-sync-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx options]\n   (let [{:keys [refresh only-refresh ref] :as options} options\n         follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n         node            (txn/tx-node tx options)\n         accumulate      (fn [r items] (into (set r) items))\n         refresh         (cond-> (set refresh)\n                           (seq follow-on-reads) (into follow-on-reads)\n                           ref (conj ref))]\n     (swap-submission-queue! app (fnil conj []) node)\n     (swap! runtime-atom (fn [s] (cond-> s\n                                   ;; refresh sets are cumulative because rendering is debounced\n                                   (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                   (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n     (when-not (in-transaction? app)\n       (in-transaction app\n         (run-queue! app options)))\n     (::txn/id node))))\n\n(def abort!\n  \"[app abort-id]\n\n   Implementation of abort when using this tx processing\"\n  txn/abort!)\n\n(defn with-synchronous-transactions\n  \"Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \\\"remotes\\\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  [app]\n  (let [remotes     (-> app :com.fulcrologic.fulcro.application/runtime-atom deref\n                      :com.fulcrologic.fulcro.application/remotes keys)\n        send-queues (zipmap remotes (repeatedly #(atom [])))]\n    (-> app\n      (update :com.fulcrologic.fulcro.application/algorithms assoc\n        :com.fulcrologic.fulcro.algorithm/tx! submit-sync-tx!\n        :com.fulcrologic.fulcro.algorithm/abort! abort!)\n      (assoc ::config {::submission-queue      (atom [])\n                       ::post-processing-steps (atom [])\n                       ::active-queue          (atom [])\n                       ::send-queues           send-queues}))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","cljs.core.atom","p__48638","map__48639","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","id","cljs.core._EQ_","cljs.core/deref","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","seq48641","G__48642","cljs.core/first","cljs.core/next","self__5754__auto__","app","args","cljs.core.apply","cljs.core/swap!","cljs.core.get_in","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","v","cljs.core/reset!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","seq48646","G__48647","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","seq48651","G__48652","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","seq48656","G__48657","G__48658","remote","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","f","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_","cljs.core.fnil","cljs.core/conj","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","cljs.core/boolean","cljs.core/seq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","steps","seq__48663","chunk__48664","count__48665","i__48666","temp__5753__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","e48672","e48674","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","next-steps","p__48676","map__48677","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_","queue","cljs.core.mapv","node","cljs.core.update","cljs.core/dissoc","p__48680","map__48681","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","tx-node","results","dispatch","desired-ast-nodes","transmitted-ast-nodes","original-ast-node","tx-element","result","handler","env","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","e48683","p__48685","map__48686","complete?","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","cljs.core.reduce","new-element","cljs.core/keys","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","txn-id","n","idx","p__48689","map__48690","cljs.core/reduced","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","ele-idx","active-queue","p1__48691#","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_","cljs.core/update-in","G__48695","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","js/Error","result-key","txn-idx","not-found?","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_","old-queue","cljs.core/filterv","p__48699","map__48700","p__48703","map__48704","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","options","update-handler","id__48387__auto__","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","cljs.core/dec","G__48706","G__48707","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","ast","G__48709","G__48710","send-node","com.fulcrologic.fulcro.algorithms.scheduling/defer","p__48712","map__48713","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","started?","remotes","clojure.set.intersection","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","to-dispatch","clojure.set.difference","cljs.core/contains?","updated-node","cljs.core.update_in","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","p__48716","map__48717","elements","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","element","p__48719","map__48720","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","remote-names","operations","seq__48722","chunk__48723","count__48724","i__48725","vec__48750","cljs.core.nth","vec__48762","send-queue","p","serial","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","front","seq__48753","chunk__48754","count__48755","i__48756","seq__48765","chunk__48766","count__48767","i__48768","item","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","map__48760","map__48769","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","seq__48770","chunk__48771","count__48772","i__48773","op","p__48774","map__48775","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","state-atom","runtime-atom","new-queue","temp__5751__auto__","new-node","cljs.core.conj","accumulate","r","items","cljs.core.into","explicit-refresh","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","remotes-active?","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","cljs.core/assoc","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","map__48776","ready","cljs.core/group-by","cljs.core.comp","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","map__48778","blocked","_","cljs.core/vec","dispatched-nodes","p1__48777#","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","com.fulcrologic.fulcro.mutations/mutate","cljs.core/into","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","e48779","p__48780","map__48781","component","synchronous?","and__5043__auto__","com.fulcrologic.fulcro.components/refresh-component!","render!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","seq48782","self__5755__auto__","cljs.core.ex_info","G__48785","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","p__48786","map__48787","tx","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_","map__48788","refresh","only-refresh","ref","follow-on-reads","p1__48783#","cljs.core.filter","cljs.core/Keyword","edn-query-language.core/ident?","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","G__48789","s","G__48790","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","send-queues","cljs.core/zipmap","cljs.core.repeatedly","cljs.core.assoc"]],"~:used-vars",["^L",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$cljs.core/--destructure-map","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","~$cljs.core/comp","~$clojure.set/intersection","~$com.fulcrologic.fulcro.algorithms.scheduling/defer","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$cljs.core/repeatedly","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$cljs.core/dec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","~$taoensso.timbre/-log!","~$cljs.core/IndexedSeq","~$com.fulcrologic.fulcro.mutations/mutate","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/group-by","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","~$cljs.core/mapv","~$cljs.core/not=","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","~$cljs.core/dissoc","~$cljs.core/Delay","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/reset!","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","~$cljs.core/zipmap","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","~$cljs.core/-nth","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","~$clojure.set/difference","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/reduced","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/assoc","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$cljs.core/first","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/update-in","~$js/Error","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","~$cljs.core/boolean","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","~$cljs.core/inc","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1K","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^19","^18","~$com.fulcrologic.fulcro.algorithms.do-not-use","^12","^14","^16"]]],["^1K","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.dom.HtmlElement"]]],["^1K","goog/async/freelist.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/core/async/impl/ioc_helpers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$cljs.core.async.impl.protocols"]]],["^1K","goog/i18n/datetimesymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.i18n.cldrversion"]]],["^1K","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1K","expound/util.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@"]]],["^1K","goog/crypt/crypt.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.asserts","~$goog.async.throwException"]]],["^1K","cljs/core/async.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1K","goog/timer/timer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Promise","~$goog.events.EventTarget"]]],["^1K","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^14"]]],["^1K","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$goog.Uri"]]],["^1K","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$clojure.string","~$goog.string"]]],["^1K","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q"]]],["^1K","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^51"]]],["^1K","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1K","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^4N","^4Q","^4L","^4O","^4P"]]],["^1K","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4L"]]],["^1K","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q"]]],["^1K","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^14","^50","^12","~$goog.object","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1K","expound/problems.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$expound.paths","^@"]]],["^1K","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4M","~$goog.reflect","^4L"]]],["^1K","goog/structs/prioritypool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1K","goog/async/run.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.async.WorkQueue","~$goog.debug.asyncStackTag","~$goog.async.nextTick","^4R"]]],["^1K","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1K","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/async/workqueue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.async.FreeList","^4Q"]]],["^1K","com/fulcrologic/fulcro/dom/events.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1K","goog/promise/resolver.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^51","~$goog.string.StringBuffer"]]],["^1K","goog/structs/priorityqueue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs.Heap"]]],["^1K","goog/net/xhrio.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Timer","^4X","^4Q","~$goog.collections.maps","^5H","^4Z","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^58","^51","~$goog.uri.utils","^53"]]],["^1K","goog/promise/thenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/collections/iters.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^1>","^1;","^[","^1:","^16","^I","^12","^14"]]],["^1K","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$cognitect.transit","~$com.fulcrologic.guardrails.core","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1K","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$clojure.walk"]]],["^1K","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^58"]]],["^1K","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^4L"]]],["^1K","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^51","^5R"]]],["^1K","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^@","^62","^12","^14"]]],["^1K","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5N","^5O","^5P","^5M","^4X","^51","^5R"]]],["^1K","expound/alpha.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$expound.problems","^@","^50","^11","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1K","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","~$goog.i18n.DateTimeFormat","~$taoensso.encore","~$taoensso.timbre.appenders.core"]]],["^1K","goog/net/wrapperxmlhttpfactory.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1K","goog/date/utcdatetime.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1K","goog/i18n/nativelocaledigits.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/eventtarget.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Disposable","^4Q","~$goog.events","~$goog.events.Event","^5K","^5L","^58"]]],["^1K","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^50","~$expound.alpha"]]],["^1K","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1K","expound/ansi.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50"]]],["^1K","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4D",["^ ","^4E",2,"^4F",["^L",[0,1]],"^4G",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1K","shadow/js.js"],["409b887858ac3838697e7a1c6e019c62bc4e5814","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q"]]],["^1K","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^11","~$cljs.reader","~$cljs.tools.reader.edn","^58","^4X","^51","~$goog.string.format","^5R","^6C","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^5Y","^5X","~$taoensso.truss"]]],["^1K","goog/structs/set.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map"]]],"~:SHADOW-TIMESTAMP",[1689298966000,1689298966000,1689298966000],["^6K","node_modules/react/cjs/react.development.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","1df918e8981877c2759388dfae58a059e089860d","^4D",["^ ","^4E",1,"^4F",["^L",[]],"^4G",["^6L"]]],["^1K","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^6:"]]],["^1K","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^5?"]]],["^1K","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.events.ListenableKey"]]],["^1K","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.fs.blob","^54","~$goog.html.SafeScript","~$goog.html.trustedtypes","^56","^57"]]],["^1K","cljs/core/async/impl/channels.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J","^4V","^4T"]]],["^1K","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","~$goog.events.Listener","^58"]]],["^1K","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$taoensso.truss.impl"]]],["^1K","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/fulcro/algorithms/merge.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.fulcro.algorithms.data-targeting","^16","^[","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^4H","^12","^14","^63"]]],["^1K","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@"]]],["^1K","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/core/async/impl/dispatch.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4T","^5D"]]],["^1K","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^56","~$goog.html.SafeUrl","^57","^4Q","^4L"]]],["^1K","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^70","~$goog.html.SafeStyle","^77","^55","~$goog.html.uncheckedconversions","^56","^4L"]]],["^1K","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.dom.TagName","^4Q","~$goog.dom.element"]]],["^1K","goog/i18n/dayperiodsymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","expound/paths.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@","^67"]]],["^1K","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11"]]],["^1K","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/useragent/product.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5<","^5>","^53"]]],["^1K","cljs/core/async/impl/protocols.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/net/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/structs/map.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.collections.iters","~$goog.iter","~$goog.iter.Iterator","~$goog.iter.es6"]]],["^1K","goog/net/xhriopool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6R","~$goog.structs.PriorityPool"]]],["^1K","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/date/date.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.i18n.DateTimeSymbols","^51"]]],["^1K","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^56","^70","^7<","~$goog.html.SafeStyleSheet","^77","^7>","^55","^57","^4Q","^5<","^4X","^58","^4L","~$goog.dom.tags","^71"]]],["^1K","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^58"]]],["^1K","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^58","^11","^50","^64","^76","^4H","^[","~$com.fulcrologic.fulcro.algorithms.transit","^12","^6:","^14"]]],["^1K","goog/structs/queue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X"]]],["^1K","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","^4L","^4M"]]],["^1K","com/fulcrologic/fulcro/inspect/transit.cljs"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^61","~$com.cognitect.transit.types","^7H","^14"]]],["^1K","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5F","^7I"]]],["^1K","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^58","^5Q","^6P","^5R"]]],["^1K","com/fulcrologic/fulcro/mutations.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.fulcro.raw.components","~$com.fulcrologic.fulcro.dom.events","^62","^12","^14","^6:","^@","^4H","^74","~$com.fulcrologic.fulcro.algorithms.merge","^[","^63","^50"]]],["^1K","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","^4Q","^78","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7>","~$goog.dom.safe","^7;","^7=","~$goog.math.Coordinate","~$goog.math.Size","^58","^51","^56","~$goog.string.Unicode","^53"]]],["^1K","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.guardrails.registry","^6F"]]],["^1K","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[2]],"^4G",["^19","^18","^58","~$module$node_modules$react$index","^12","^@","^14","^64","^50","^4H","^76","^[","^7L","^62","^11"]]],["^1K","com/fulcrologic/fulcro/specs.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@","^62","^4H","^12"]]],["^1K","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.debug.Error","^7P"]]],["^1K","cljs/core/async/impl/buffers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J"]]],["^1K","goog/i18n/timezone.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","^58","^51"]]],["^1K","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","^4Q","^5U","^51","^6V","^60","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/i18n/cldrversion.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/net/errorcode.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4N"]]],["^1K","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/iter/es6.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.iter.Iterable","^7B"]]],["^1K","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5J","^53"]]],["^1K","goog/debug/asyncstacktag.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q"]]],["^1K","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/promise/promise.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Thenable","^4Q","^5G","~$goog.async.run","^4R","^7W","^5C","^7:","~$goog.promise.Resolver"]]],["^1K","cljs/core/async/impl/timers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J","^4S","^4V"]]],["^1K","cljs/spec/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^58","^64","~$cljs.spec.gen.alpha","^50"]]],["^1K","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",[]]],["^1K","goog/json/hybrid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.json"]]],["^1K","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","^58"]]],["^1K","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5N","^50","~$cljs.tools.reader.impl.inspect"]]],["^1K","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^62","^B","^14"]]],["^1K","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^51","^5R"]]],["^1K","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^14","^64"]]],["^1K","goog/structs/pool.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6B","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1K","com/fulcrologic/fulcro/inspect/diff.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@"]]],["^6K","node_modules/react/cjs/react.production.min.js"],["95489a89fcf69ff5d55328ddf571406285eebad5","84bdd29dc1ad7f36c15a36e5014f153db42265ce","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^4D",["^ ","^4E",0,"^4F",["^L",[]],"^4G",["^6L"]]],["^1K","goog/net/httpstatus.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/i18n/datetimeformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^6>","~$goog.date.UtcDateTime","^7E","~$goog.i18n.DayPeriods","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^51"]]],["^1K","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7J","^7I","~$goog.math.Long"]]],["^1K","goog/structs/heap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs.Node","^58"]]],["^1K","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q"]]],["^1K","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7Q","^7=","^56","^4L"]]],["^1K","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7J","~$com.cognitect.transit.eq","^8<"]]],["^1K","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4L","^4P"]]],["^1K","expound/printer.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^@","^D","^11","^67","^68","^5;","^64","^6Q","^51"]]],["^1K","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^@","^[","^63","^76","^4H","^1;","^1:","^16","~$com.fulcrologic.fulcro.specs","^I","^62","^12","^6:","^14"]]],["^1K","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7J"]]],["^1K","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","~$goog.debug.errorcontext"]]],["^1K","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.math"]]],["^1K","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5O","^51","^5R"]]],["^1K","goog/iter/iter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4X","^4Q","~$goog.debug","^7:","^8A"]]],["^1K","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.flags"]]],["^1K","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5H","~$goog.dom","^7>","^7:","^5<","^5="]]],["^1K","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7P","^7>"]]],["^1K","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^7;","^70","^7<","^7F","^77","^55","^56","^4L"]]],["^1K","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7K"]]],["^1K","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6B","~$goog.events.EventId"]]],["^1K","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5M","^5N","^5O"]]],["^1K","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^8<","~$goog.math.Integer","^51","^58","^4X","^4[","^5R"]]],["^1K","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7J","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^7I","^8>","^5E","^5F"]]],["^1K","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^56","^57","^71","^4Q"]]],["^1K","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^8B"]]],["^1K","goog/async/throwexception.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^56","^7<","^57","^58","^4Q","^4L"]]],["^1K","goog/structs/collection.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^8B","^6D","~$goog.events.EventType","^5?","^53"]]],["^1K","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5?"]]],["^1K","goog/structs/node.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^53"]]],["^1K","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^51"]]],["^1K","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^57"]]],["^1K","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6I"]]],["^1K","goog/json/json.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/i18n/localefeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7J","^5F","~$com.cognitect.transit.handlers","^7I","^7K","^8<"]]],["^1K","goog/net/xmlhttpfactory.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6<"]]],["^1K","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^12","^14"]]],["^1K","goog/net/xmlhttp.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","~$goog.net.WrapperXmlHttpFactory","^6="]]],["^1K","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^12","^[","^58","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^6:","^14"]]],["^1K","goog/net/xhrlike.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cognitect/transit.cljs"],["98d11d81caee82f97b9417025750b785fb6ecb16","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","~$com.cognitect.transit","^7I","^8>","^58","^8<"]]],["^1K","goog/crypt/base64.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Q","^59","^4L","^53","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async/impl/ioc_macros.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/problems.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1689258840000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/ioc_macros.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/paths.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1689292448000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm.clj",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tx_processing.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1689292470000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm/utils.clj",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1689292470000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/mutex.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/buffers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/dispatch.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/ansi.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/printer.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/timers.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1689292448000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/protocols.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/concurrent.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/exec/threadpool.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1689292466000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/scheduling.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1689258840000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/dom/events.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1689292450000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/alpha.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/com/cognitect/transit-clj/1.0.329/transit-clj-1.0.329.jar!/cognitect/transit.clj",1689298965000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/util.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1689258836000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/channels.clj",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1689258834000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/mutations.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689298966000,"jar:file:/Users/alejandroherrera/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1689258845000,"jar:file:/Users/alejandroherrera/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1689292469000,"jar:file:/Users/alejandroherrera/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/alpha.cljc",1689298964000,"jar:file:/Users/alejandroherrera/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1689292466000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",78],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^I","^J","^I"],"^K",["^L",[]],"^M",["^ ","^F",["^ ","^N",["^O",[["^P","~$&","^Q"]]],"^8",89,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^R","^S","^T","^G","^U",true]],"^R","^G","^V",["^ "],"^X",null,"^Y",["^ ","^Z","^[","^10","^11","^12","^12","^13","^14","^15","^16","^17","^12","^18","^18","^I","^I","^19","^19","^11","^11","~$m","^1:","^1;","^1;","^1<","^1;","^1=","^1>","^1:","^1:","^[","^[","^1>","^1>","^16","^16","^14","^14"],"^1?",["^L",["^1@","^1A"]],"~:shadow/js-access-global",["^L",["Error"]],"^1B",["^ ","^H","^I","^J","^I"],"~:defs",["^ ","~$distribute-element-results!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",169,"^9",7,"^:",169,"^;",34,"^N",["^O",["~$quote",["^O",[["~$app","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1F","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^R","^2Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"~:method-params",["^O",[["^;:","^;;","~$p__48685"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^9",1,"~:variadic?",false,"^8",169,"~:ret-tag",["^L",[null,"~$any"]],"^:",169,"~:max-fixed-arity",3,"~:fn-var",true,"^N",["^O",["^;9",["^O",[["^;:","^;;",["^ ","^;<",["^;=","^;>"],"^1F","^;?"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$top-level?",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",17,"^N",["^O",["^;9",["^O",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$id"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"^R","^2U","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;@",["^O",[["~$p__48638"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",97,"^;E","~$boolean","^:",97,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[[["^ ","^;J",["^;K"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"~$with-synchronous-transactions",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",402,"^9",7,"^:",402,"^;",36,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"^R","^4<","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",36,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",402,"^;E",["^L",["~$clj","^;F"]],"^:",402,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$swap-post-processing-steps!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",105,"^9",7,"^:",105,"^;",34,"^N",["^O",["^;9",["^O",[["^;:","~$&","~$args"]]]]],"~:top-fn",["^ ","^;D",true,"~:fixed-arity",1,"^;G",1,"^;@",[["^O",["^;:","^;Q"]]],"^N",["^O",[["^;:","~$&","^;Q"]]],"^;C",["^O",[null]]]],"^R","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"^;R",["^ ","^;D",true,"^;S",1,"^;G",1,"^;@",[["^O",["^;:","^;Q"]]],"^N",["^O",[["^;:","~$&","^;Q"]]],"^;C",["^O",[null]]],"^;@",[["^O",["^;:","^;Q"]]],"^;B",null,"^;S",1,"^;C",["^O",[null]],"^9",1,"^;D",true,"~:methods",[["^ ","^;S",1,"^;D",true,"~:tag","^;F"]],"^8",105,"^;E","^;F","^:",105,"^;G",1,"^;H",true,"^N",["^O",[["^;:","~$&","^;Q"]]]],"~$active-queue",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",110,"^9",7,"^:",110,"^;",19,"^N",["^O",["^;9",["^O",[["^;:"]]]]]],"^R","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",110,"^;E","^;F","^:",110,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]]],"~$reset-send-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",112,"^9",7,"^:",112,"^;",24,"^N",["^O",["^;9",["^O",[["^;:","~$remote","~$v"]]]]]],"^R","^2R","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",24,"^;@",["^O",[["^;:","^;X","~$v"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",112,"^;E",["^L",[null,"^;F"]],"^:",112,"^;G",3,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","^;X","~$v"]]]]]],"~$apps-in-tx",["^ ","^R","^42","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",84,"^9",1,"^:",84,"^;",20,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",84,"^9",10,"^:",84,"^;",20],"^;U","~$cljs.core/Atom"],"~$post-processing-steps",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",107,"^9",7,"^:",107,"^;",28,"^N",["^O",["^;9",["^O",[["^;:"]]]]]],"^R","^2[","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",107,"^;E","^;F","^:",107,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]]],"~$queue-sends!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",19,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^;<",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1F","^;;"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^R","^2O","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;@",["^O",[["^;:","~$p__48716"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",266,"^;E",["^L",[null,"^;F"]],"^:",266,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^;<",["^<1","^<2"],"^1F","^;;"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$submit-sync-tx!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",375,"^9",7,"^:",375,"^;",22,"^N",["^O",["^;9",["^O",[["^;:","~$tx"],[["^ ","^;J",["~$runtime-atom"],"^1F","^;:"],"^<5","~$options"]]]]],"^;R",["^ ","^;D",false,"^;S",3,"^;G",3,"^;@",[["^;:","^<5"],[["^ ","^;J",["^<6"],"^1F","^;:"],"^<5","^<7"]],"^N",["^O",[["^;:","^<5"],[["^ ","^;J",["^<6"],"^1F","^;:"],"^<5","^<7"]]],"^;C",["^O",[null,null]]]],"^R","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;R",["^ ","^;D",false,"^;S",3,"^;G",3,"^;@",[["^;:","^<5"],[["^ ","^;J",["^<6"],"^1F","^;:"],"^<5","^<7"]],"^N",["^O",[["^;:","^<5"],[["^ ","^;J",["^<6"],"^1F","^;:"],"^<5","^<7"]]],"^;C",["^O",[null,null]]],"^;@",[["^;:","^<5"],[["^ ","^;J",["^<6"],"^1F","^;:"],"^<5","^<7"]],"^;B",null,"^;S",3,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^;T",[["^ ","^;S",2,"^;D",false,"^;U","^;F"],["^ ","^;S",3,"^;D",false,"^;U","^;F"]],"^8",375,"^:",375,"^;G",3,"^;H",true,"^N",["^O",[["^;:","^<5"],[["^ ","^;J",["^<6"],"^1F","^;:"],"^<5","^<7"]]]],"~$process-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",309,"^9",7,"^:",309,"^;",21,"^N",["^O",["^;9",["^O",[[["^ ","^;J",["~$state-atom","^<6"],"^1F","^;:"]]]]]],"^6","Run through the active queue and do a processing step."],"^R","^3?","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^;@",["^O",[["~$p__48774"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",309,"^;E","~$clj-nil","^:",309,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[[["^ ","^;J",["^<9","^<6"],"^1F","^;:"]]]]]],"^6","Run through the active queue and do a processing step."],"~$remove-send!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",216,"^9",7,"^:",216,"^;",19,"^N",["^O",["^;9",["^O",[["^;:","^;X","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^R","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;@",["^O",[["^;:","^;X","^<=","^<>"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",216,"^;E","^;F","^:",216,"^;G",4,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","^;X","^<=","^<>"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",249,"^9",7,"^:",249,"^;",27,"^N",["^O",["^;9",["^O",[["^;:","^;;",["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$idx","~$dispatch","~$started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^R","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^;@",["^O",[["^;:","^;;","~$p__48712"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",249,"^;E",["^L",[null,"^;F"]],"^:",249,"^;G",3,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","^;;",["^ ","^<@",["^<A","^<B","^<C"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$run-after!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",115,"^9",7,"^:",115,"^;",17,"^N",["^O",["^;9",["^O",[["^;:","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"^R","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;@",["^O",[["^;:","~$f"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",115,"^;E","^;F","^:",115,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"~$run-all-immediate-work!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",351,"^9",7,"^:",351,"^;",30,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"^R","^4>","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",351,"^:",351,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"~$record-result!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",202,"^9",7,"^:",202,"^;",21,"^N",["^O",["^;9",["^O",[["^;:","^<=","^<>","^;X","~$result","~$result-key"],["^;:","^<=","^<>","^;X","^<H"]]]]],"^6","Deal with a network result on the given txn/element.","^;R",["^ ","^;D",false,"^;S",6,"^;G",6,"^;@",[["^;:","^<=","^<>","^;X","^<H","^<I"],["^;:","^<=","^<>","^;X","^<H"]],"^N",["^O",[["^;:","^<=","^<>","^;X","^<H","^<I"],["^;:","^<=","^<>","^;X","^<H"]]],"^;C",["^O",[null,null]]]],"^R","^2H","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^;R",["^ ","^;D",false,"^;S",6,"^;G",6,"^;@",[["^;:","^<=","^<>","^;X","^<H","^<I"],["^;:","^<=","^<>","^;X","^<H"]],"^N",["^O",[["^;:","^<=","^<>","^;X","^<H","^<I"],["^;:","^<=","^<>","^;X","^<H"]]],"^;C",["^O",[null,null]]],"^;@",[["^;:","^<=","^<>","^;X","^<H","^<I"],["^;:","^<=","^<>","^;X","^<H"]],"^;B",null,"^;S",6,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^;T",[["^ ","^;S",6,"^;D",false,"^;U",["^L",["^;F","^<;"]]],["^ ","^;S",5,"^;D",false,"^;U",["^L",["^;F","^<;"]]]],"^8",202,"^:",202,"^;G",6,"^;H",true,"^N",["^O",[["^;:","^<=","^<>","^;X","^<H","^<I"],["^;:","^<=","^<>","^;X","^<H"]]],"^6","Deal with a network result on the given txn/element."],"~$process-tx-node!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",276,"^9",7,"^:",276,"^;",23,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^;<",["^<1"],"^1F","^;;"]]]]]]],"^R","^3B","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;@",["^O",[["^;:","~$p__48719"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",276,"^;E",["^L",[null,"^;F","^<;"]],"^:",276,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^;<",["^<1"],"^1F","^;;"]]]]]]],"~$add-send!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",223,"^9",7,"^:",223,"^;",16,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^<@",["^;K","^<7"],"^1F","^;;"],"^<>","^;X"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"^R","^3J","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",16,"^;@",["^O",[["^;:","~$p__48703","^<>","^;X"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",223,"^;E","^<;","^:",223,"^;G",4,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^<@",["^;K","^<7"],"^1F","^;;"],"^<>","^;X"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"~$do-post-processing!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",125,"^9",7,"^:",125,"^;",26,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"^R","^3F","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",125,"^;E","^<;","^:",125,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"~$distribute-results!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",192,"^9",7,"^:",192,"^;",26,"^N",["^O",["^;9",["^O",[["^;:","^<=","^<>"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"^R","^2:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;@",["^O",[["^;:","^<=","^<>"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",192,"^;E","^;F","^:",192,"^;G",3,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","^<=","^<>"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"~$post-processing?",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",120,"^9",7,"^:",120,"^;",23,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Is there post processing to do?"],"^R","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",120,"^;E","^;M","^:",120,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Is there post processing to do?"],"~$process-send-queues!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",285,"^9",7,"^:",285,"^;",27,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"^R","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",285,"^;E","^<;","^:",285,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"~$swap-active-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",108,"^9",7,"^:",108,"^;",25,"^N",["^O",["^;9",["^O",[["^;:","~$&","^;Q"]]]]],"^;R",["^ ","^;D",true,"^;S",1,"^;G",1,"^;@",[["^O",["^;:","^;Q"]]],"^N",["^O",[["^;:","~$&","^;Q"]]],"^;C",["^O",[null]]]],"^R","^3:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",25,"^;R",["^ ","^;D",true,"^;S",1,"^;G",1,"^;@",[["^O",["^;:","^;Q"]]],"^N",["^O",[["^;:","~$&","^;Q"]]],"^;C",["^O",[null]]],"^;@",[["^O",["^;:","^;Q"]]],"^;B",null,"^;S",1,"^;C",["^O",[null]],"^9",1,"^;D",true,"^;T",[["^ ","^;S",1,"^;D",true,"^;U","^;F"]],"^8",108,"^;E","^;F","^:",108,"^;G",1,"^;H",true,"^N",["^O",[["^;:","~$&","^;Q"]]]],"~$sync-tx!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",373,"^9",7,"^:",373,"^;",15,"^N",["^O",["^;9",["^O",[["~$&","^;Q"]]]]],"^;R",["^ ","^;D",true,"^;S",0,"^;G",0,"^;@",[["^O",["^;Q"]]],"^N",["^O",[["~$&","^;Q"]]],"^;C",["^O",[null]]]],"^R","^3T","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",15,"^;R",["^ ","^;D",true,"^;S",0,"^;G",0,"^;@",[["^O",["^;Q"]]],"^N",["^O",[["~$&","^;Q"]]],"^;C",["^O",[null]]],"^;@",[["^O",["^;Q"]]],"^;B",null,"^;S",0,"^;C",["^O",[null]],"^9",1,"^;D",true,"^;T",[["^ ","^;S",0,"^;D",true,"^;U","~$ignore"]],"^8",373,"^;E","^;F","^:",373,"^;G",0,"^;H",true,"^N",["^O",[["~$&","^;Q"]]]],"~$in-transaction?",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",138,"^9",7,"^:",138,"^;",22,"^N",["^O",["^;9",["^O",[[["^ ","^;J",["^;K"],"^1F","^;:"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"^R","^40","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;@",["^O",[["~$p__48676"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",138,"^;E","^;M","^:",138,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[[["^ ","^;J",["^;K"],"^1F","^;:"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"~$available-work?",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",333,"^9",7,"^:",333,"^;",22,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"^R","^3W","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",333,"^;E","^;M","^:",333,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"~$reset-post-processing-steps!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",106,"^9",7,"^:",106,"^;",35,"^N",["^O",["^;9",["^O",[["^;:","~$v"]]]]]],"^R","^41","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",35,"^;@",["^O",[["^;:","~$v"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",106,"^;E",["^L",[null,"^;F"]],"^:",106,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","~$v"]]]]]],"~$release-post-render-tasks!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",143,"^9",7,"^:",143,"^;",33,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^R","^31","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",33,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",143,"^;E","^;F","^:",143,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$abort!",["^ ","^R","^3E","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",396,"^9",1,"^:",396,"^;",12,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",396,"^9",6,"^:",396,"^;",12],"^6","[app abort-id]\n\n   Implementation of abort when using this tx processing"],"~$send-queue",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",113,"^9",7,"^:",113,"^;",17,"^N",["^O",["^;9",["^O",[["^;:","^;X"]]]]]],"^R","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;@",["^O",[["^;:","^;X"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",113,"^;E","^;F","^:",113,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","^;X"]]]]]],"~$node-index",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",180,"^9",8,"^:",180,"^;",18,"~:private",true,"^N",["^O",["^;9",["^O",[["~$queue","^<="]]]]]],"^=1",true,"^R","^21","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",18,"^;@",["^O",[["^=2","^<="]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",180,"^;E",["^L",[null,"^;F","^<;"]],"^:",180,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^=2","^<="]]]]]],"~$reset-active-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",109,"^9",7,"^:",109,"^;",26,"^N",["^O",["^;9",["^O",[["^;:","~$v"]]]]]],"^R","^3H","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;@",["^O",[["^;:","~$v"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",109,"^;E",["^L",[null,"^;F"]],"^:",109,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","~$v"]]]]]],"~$submission-queue",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",104,"^9",7,"^:",104,"^;",23,"^N",["^O",["^;9",["^O",[["^;:"]]]]]],"^R","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",104,"^;E","^;F","^:",104,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]]],"~$swap-submission-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",102,"^9",7,"^:",102,"^;",29,"^N",["^O",["^;9",["^O",[["^;:","~$&","^;Q"]]]]],"^;R",["^ ","^;D",true,"^;S",1,"^;G",1,"^;@",[["^O",["^;:","^;Q"]]],"^N",["^O",[["^;:","~$&","^;Q"]]],"^;C",["^O",[null]]]],"^R","^23","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",29,"^;R",["^ ","^;D",true,"^;S",1,"^;G",1,"^;@",[["^O",["^;:","^;Q"]]],"^N",["^O",[["^;:","~$&","^;Q"]]],"^;C",["^O",[null]]],"^;@",[["^O",["^;:","^;Q"]]],"^;B",null,"^;S",1,"^;C",["^O",[null]],"^9",1,"^;D",true,"^;T",[["^ ","^;S",1,"^;D",true,"^;U","^;F"]],"^8",102,"^;E","^;F","^:",102,"^;G",1,"^;H",true,"^N",["^O",[["^;:","~$&","^;Q"]]]],"~$run-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",360,"^9",7,"^:",360,"^;",17,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^;<",["~$component","~$synchronous?"],"^1F","^<7"]]]]]]],"^R","^22","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;@",["^O",[["^;:","~$p__48780"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",360,"^;E","^<;","^:",360,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:",["^ ","^;<",["^=7","^=8"],"^1F","^<7"]]]]]]],"~$activate-submissions!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",339,"^9",7,"^:",339,"^;",28,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^R","^27","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^;@",["^O",[["^;:"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",339,"^;E","^<;","^:",339,"^;G",1,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$reset-submission-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",103,"^9",7,"^:",103,"^;",30,"^N",["^O",["^;9",["^O",[["^;:","~$v"]]]]]],"^R","^1Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^;@",["^O",[["^;:","~$v"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",103,"^;E",["^L",[null,"^;F"]],"^:",103,"^;G",2,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","~$v"]]]]]],"~$swap-send-queue!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",111,"^9",7,"^:",111,"^;",23,"^N",["^O",["^;9",["^O",[["^;:","^;X","~$&","^;Q"]]]]],"^;R",["^ ","^;D",true,"^;S",2,"^;G",2,"^;@",[["^O",["^;:","^;X","^;Q"]]],"^N",["^O",[["^;:","^;X","~$&","^;Q"]]],"^;C",["^O",[null]]]],"^R","^44","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;R",["^ ","^;D",true,"^;S",2,"^;G",2,"^;@",[["^O",["^;:","^;X","^;Q"]]],"^N",["^O",[["^;:","^;X","~$&","^;Q"]]],"^;C",["^O",[null]]],"^;@",[["^O",["^;:","^;X","^;Q"]]],"^;B",null,"^;S",2,"^;C",["^O",[null]],"^9",1,"^;D",true,"^;T",[["^ ","^;S",2,"^;D",true,"^;U","^;F"]],"^8",111,"^;E","^;F","^:",111,"^;G",2,"^;H",true,"^N",["^O",[["^;:","^;X","~$&","^;Q"]]]],"~$dispatch-result!",["^ ","^;8",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",149,"^9",7,"^:",149,"^;",23,"^N",["^O",["^;9",["^O",[["^;:","^;;",["^ ","^<@",["~$results","^<B","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1F","^;?"],"^;X"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^R","^2@","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;@",["^O",[["^;:","^;;","~$p__48680","^;X"]]],"^;B",null,"^;C",["^O",[null,null]],"^9",1,"^;D",false,"^8",149,"^;E",["^L",["^;O","^;F"]],"^:",149,"^;G",4,"^;H",true,"^N",["^O",["^;9",["^O",[["^;:","^;;",["^ ","^<@",["^=>","^<B","^=?","^=@","^=A"],"^1F","^;?"],"^;X"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."]],"^1A",["^ ","^13","^14","^15","^16","^18","^18","^I","^I","~$m","^1:","^1:","^1:","^16","^16","^14","^14","^G","^G"],"~:cljs.analyzer/constants",["^ ","^1?",["^L",["~:only-refresh","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","^;=","~:transacted-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:refresh","~:ref","~:synchronous?","~:render!","~:transmitted-ast","~:com.fulcrologic.fulcro.algorithm/abort!","~:com.fulcrologic.fulcro.algorithm/tx!","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config","~:status-code","~:after-render?","~:component","^<2","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:com.fulcrologic.fulcro.application/id","~:dispatch","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues","~:result","~:com.fulcrologic.fulcro.application/runtime-atom","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?","~:dispatch-key","~:com.fulcrologic.fulcro.application/algorithms","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?","~:error","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:body","^<1","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~:auto","~:p","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^;>","~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^=X","^=R","^>=","^=F","^=H","^>0","^>9","~:p","^>>","^<1","^=T","^;=","^>3","^>E","^>G","^>?","^>:","^=Y","^=G","^=[","^=O","^>1","^>5","^;>","^>7","^<2","^>D","^>;","^=I","^>C","^>F","^=J","^=S","^><","^>4","^>8","^=E","^>A","^=V","^>2","^>B","^=Z","^=U","^=M","^=N","^=K","^=D","^=L","^=W","^>@","^>6","^=Q","^=P"]],"^1G",["^ ","^1A",["^L",[]],"^1@",["^L",[]]],"^1H",["^ "],"^1I",["^19","^18","^11","^1>","^1;","^[","^1:","^16","^I","^12","^14"]],"^T","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^4C",[["^>K","~:static-fns"],true,["^>K","~:shadow-tweaks"],null,["^>K","~:source-map-inline"],null,["^>K","~:elide-asserts"],true,["^>K","~:optimize-constants"],null,["^>K","^1N"],null,["^>K","~:external-config"],null,["^>K","~:tooling-config"],null,["^>K","~:emit-constants"],null,["^>K","~:load-tests"],false,["^>K","~:form-size-threshold"],null,["^>K","~:global-goog-object&array"],null,["^>K","~:data-readers"],null,["^>K","~:infer-externs"],"^>>",["^>K","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^>K","~:fn-invoke-direct"],null,["^>K","~:source-map"],null]]]